<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article" xml:lang="EN"><?properties no_embargo?><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">Acta Crystallogr D Biol Crystallogr</journal-id><journal-id journal-id-type="publisher-id">Acta Cryst. D</journal-id><journal-title>Acta Crystallographica Section D: Biological Crystallography</journal-title><issn pub-type="ppub">0907-4449</issn><issn pub-type="epub">1399-0047</issn><publisher><publisher-name>International Union of Crystallography</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">2467521</article-id><article-id pub-id-type="publisher-id">gx5125</article-id><article-id pub-id-type="doi">10.1107/S0907444908001558</article-id><article-id pub-id-type="coden">ABCRE6</article-id><article-id pub-id-type="pii">S0907444908001558</article-id><article-id pub-id-type="pmid">18391408</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Papers</subject></subj-group></article-categories><title-group><article-title>A knowledge-driven approach for crystallographic protein model completion</article-title><alt-title>Model completion</alt-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Joosten</surname><given-names>Krista</given-names></name><xref ref-type="aff" rid="a">a</xref></contrib><contrib contrib-type="author"><name><surname>Cohen</surname><given-names>Serge X.</given-names></name><xref ref-type="aff" rid="a">a</xref></contrib><contrib contrib-type="author"><name><surname>Emsley</surname><given-names>Paul</given-names></name><xref ref-type="aff" rid="b">b</xref></contrib><contrib contrib-type="author"><name><surname>Mooij</surname><given-names>Wijnand</given-names></name><xref ref-type="aff" rid="a">a</xref></contrib><contrib contrib-type="author"><name><surname>Lamzin</surname><given-names>Victor S.</given-names></name><xref ref-type="aff" rid="c">c</xref></contrib><contrib contrib-type="author"><name><surname>Perrakis</surname><given-names>Anastassis</given-names></name><xref ref-type="aff" rid="a">a</xref><xref ref-type="corresp" rid="cor">*</xref></contrib><aff id="a"><label>a</label>Department of Molecular Carcinogenesis, Netherlands Cancer Institute, <country>The Netherlands</country></aff><aff id="b"><label>b</label>York Structural Biology Laboratory, Chemistry Department, The University of York, <country>England</country></aff><aff id="c"><label>c</label>EMBL Hamburg Outstation, <country>Germany</country></aff></contrib-group><author-notes><corresp id="cor">Correspondence e-mail: <email>a.perrakis@nki.nl</email></corresp></author-notes><pub-date pub-type="ppub"><day>01</day><month>4</month><year>2008</year></pub-date><pub-date pub-type="epub"><day>19</day><month>3</month><year>2008</year></pub-date><pub-date pub-type="pmc-release"><day>19</day><month>3</month><year>2008</year></pub-date><volume>64</volume><issue>Pt 4</issue><issue-id pub-id-type="publisher-id">d080400</issue-id><fpage>416</fpage><lpage>424</lpage><history><date date-type="received"><day>02</day><month>11</month><year>2007</year></date><date date-type="accepted"><day>15</day><month>1</month><year>2008</year></date></history><permissions><copyright-statement>&#169; International Union of Crystallography 2008</copyright-statement><copyright-year>2008</copyright-year><license license-type="open-access" xlink:href="http://journals.iucr.org/services/termsofuse.html"><p>This is an open-access article distributed under the terms described at http://journals.iucr.org/services/termsofuse.html.</p></license></permissions><self-uri xlink:type="simple" xlink:href="http://dx.doi.org/10.1107/S0907444908001558">A full version of this article is available from Crystallography Journals Online.</self-uri><abstract abstract-type="toc"><p>A novel method that uses the conformational distribution of C<sup>&#945;</sup> atoms in known structures is used to build short missing regions (&#8216;loops&#8217;) in protein models. An initial tree of possible loop paths is pruned according to structural and electron-density criteria and the most likely loop conformation(s) are selected and built.</p></abstract><abstract><p>One of the most cumbersome and time-demanding tasks in completing a protein model is building short missing regions or &#8216;loops&#8217;. A method is presented that uses structural and electron-density information to build the most likely conformations of such loops. Using the distribution of angles and dihedral angles in pentapeptides as the driving parameters, a set of possible conformations for the C<sup>&#945;</sup> backbone of loops was generated. The most likely candidate is then selected in a hierarchical manner: new and stronger restraints are added while the loop is built. The weight of the electron-density correlation relative to geometrical considerations is gradually increased until the most likely loop is selected on map correlation alone. To conclude, the loop is refined against the electron density in real space. This is started by using structural information to trace a set of models for the C<sup>&#945;</sup> backbone of the loop. Only in later steps of the algorithm is the electron-density correlation used as a criterion to select the loop(s). Thus, this method is more robust in low-density regions than an approach using density as a primary criterion. The algorithm is implemented in a loop-building program, <italic>Loopy</italic>, which can be used either alone or as part of an automatic building cycle. <italic>Loopy</italic> can build loops of up to 14 residues in length within a couple of minutes. The average root-mean-square deviation of the C<sup>&#945;</sup> atoms in the loops built during validation was less than 0.4&#8197;&#197;. When implemented in the context of automated model building in <italic>ARP</italic>/<italic>wARP</italic>, <italic>Loopy</italic> can increase the completeness of the built models.</p></abstract><kwd-group><kwd>model building</kwd><kwd>loop modelling</kwd><kwd><italic>Loopy</italic></kwd></kwd-group></article-meta></front><body><sec sec-type="introduction" id="sec1"><label>1.</label><title>Introduction</title><p>In macromolecular X-ray crystallography, building a complete model from a density map remains a challenging task. Even though several programs exist that aim towards automated model building [for example, <italic>ARP</italic>/<italic>wARP</italic> (Perrakis <italic>et al.</italic>, 1999<xref ref-type="bibr" rid="bb18"> &#9654;</xref>), <italic>RESOLVE</italic> (Terwilliger, 2003<italic>a</italic>
            <xref ref-type="bibr" rid="bb20"> &#9654;</xref>), <italic>TEXTAL</italic> (Ioerger <italic>et al.</italic>, 1999<xref ref-type="bibr" rid="bb10"> &#9654;</xref>), <italic>MAID</italic> (Levitt, 2001<xref ref-type="bibr" rid="bb15"> &#9654;</xref>) and <italic>Buccaneer</italic> (Cowtan, 2006<xref ref-type="bibr" rid="bb5"> &#9654;</xref>)], none of these programs is expected to return a &#8216;complete&#8217; model. This means that no matter how far the automated model building has progressed, part of the model still needs to be built manually. Low-density regions, for example, can cause gaps in the model. In these regions the user has to build the model using interactive graphics, which can be quite a laborious task.</p><p>All automated model-building programs start by tracing the backbone of the protein from the density map, albeit in different manners. In <italic>ARP</italic>/<italic>wARP</italic>, for example, the electron density is first modelled by free atoms, from which the C<sup>&#945;</sup> backbone of the structure is traced (Morris <italic>et al.</italic>, 2002<xref ref-type="bibr" rid="bb17"> &#9654;</xref>). The next step is to assign the known protein sequence to the main-chain fragments that were found (&#8216;sequence docking&#8217;; see, for example, Cohen <italic>et al.</italic>, 2004<xref ref-type="bibr" rid="bb3"> &#9654;</xref>; Terwilliger, 2003<italic>b</italic>
            <xref ref-type="bibr" rid="bb21"> &#9654;</xref>). However, at the end, even after a successful automated model-building run, some regions of known start, end, length and amino-acid sequence remain to be built.</p><p>Software that uses this information to complete the model has also been developed. For example, <italic>Xpleo</italic> (van den Bedem <italic>et al.</italic>, 2005<xref ref-type="bibr" rid="bb2"> &#9654;</xref>), <italic>LAFIRE</italic> (Yao <italic>et al.</italic>, 2006<xref ref-type="bibr" rid="bb24"> &#9654;</xref>) and <italic>RAPPER</italic> (de Bakker <italic>et al.</italic>, 2006<xref ref-type="bibr" rid="bb1"> &#9654;</xref>) are tools for automated model completion. In this paper, we describe the use of structural information on the C<sup>&#945;</sup> backbone to fill in the gaps and build the loops of the model. It has been shown (Jones <italic>et al.</italic>, 1991<xref ref-type="bibr" rid="bb12"> &#9654;</xref>) that a database of five-residue-long fragments (pentapeptides) could be used to complete and improve the backbone structure found by skeletonization of the density map. It has also been shown that protein conformation can be described by the angles and dihedral angles between successive C<sup>&#945;</sup> atoms (Kleywegt, 1997<xref ref-type="bibr" rid="bb14"> &#9654;</xref>; Esnouf, 1997<xref ref-type="bibr" rid="bb8"> &#9654;</xref>).</p><p>We use knowledge from pentapeptides to predict the probable positions of the fifth C<sup>&#945;</sup> atom from the terminal tetrapeptides of main-chain fragments, thus extending the peptide segment. By iterating this process, using each set of new C<sup>&#945;</sup> atoms as a new set of terminal tetrapeptides, we create a tree of possible backbones for the loop. In several steps based on different features we remove less likely options until the most probable loop(s) is/are selected from the tree. Our loop-building method can be used in two modes. In the first case, gaps are automatically detected, the best loop for each gap is selected and the resulting model is returned to the user. In this mode, <italic>Loopy</italic> can easily be incorporated into an automated package. In the second case, the user can define an area to (re-)build. The program now provides a selection of the best possible loops ordered by density correlation. This allows the creation of an ensemble of models (Terwilliger <italic>et al.</italic>, 2007<xref ref-type="bibr" rid="bb22"> &#9654;</xref>; de Bakker <italic>et al.</italic>, 2006<xref ref-type="bibr" rid="bb1"> &#9654;</xref>; DePristo <italic>et al.</italic>, 2004<xref ref-type="bibr" rid="bb6"> &#9654;</xref>; Furnham <italic>et al.</italic>, 2006<xref ref-type="bibr" rid="bb9"> &#9654;</xref>), at least locally; this selection can also aid the user in building the loop manually by interactively inspecting and editing the given choices.</p><p>Since our approach is based on the usage of structural information from pentapeptides, we will start with a description of the function we use and how we obtained our data. Next, we will explain the method we use to build the loops. Results of testing <italic>Loopy</italic> on manual builds as well as as a part of <italic>ARP</italic>/<italic>wARP</italic> are then described. Finally, we summarize our results on <italic>Loopy</italic> and add a few ideas for further improvements.</p></sec><sec id="sec2"><label>2.</label><title>Structure of a five-C<sup>&#945;</sup> fragment (pentapetide)</title><p>Consider a missing region in the middle of a protein model (for simplicity, we will refer to such regions as &#8216;loops&#8217;). When all the fragments of the model are docked into sequence, both anchors of the loop (the preceding and succeeding residues) are known and the number of missing residues is also known. Moreover, not only the position and the amino-acid type of the anchors are known, but the geometrical features of the protein model close to the anchors are also known. Our aim is to use these features to extend the anchors over the number of missing residues, effectively filling in the gap.</p><p>As the main geometrical feature, we consider a fragment of four C<sup>&#945;</sup> atoms (or tetrapeptide; see Fig. 1<xref ref-type="fig" rid="fig1"> &#9654;</xref>). We define a tetrapeptide from the N-terminus to the C-terminus as &#8216;forward&#8217; and one in the opposite direction as &#8216;backward&#8217;. Initially, we investigated whether one can predict the position of the fourth C<sup>&#945;</sup> atom given the positions of the first three C<sup>&#945;</sup> atoms of a tetrapeptide. This tripeptide defines an origin and a natural basis. Under the assumption that the variation in the distance between successive C<sup>&#945;</sup> atoms, <italic>d</italic> (3.8&#8197;&#197;), is negligible, the relative position of the fourth C<sup>&#945;</sup> atom can be described by (<italic>d</italic>,&#160;&#981;<sub>0</sub>, &#952;<sub>0</sub>, &#981;<sub>1</sub>). Likewise, the relative position of the fourth C<sup>&#945;</sup> atom in a backward tetrapeptide is given by (<italic>d</italic>,&#160;&#981;<sub>1</sub>,&#160;&#952;<sub>0</sub>, &#981;<sub>0</sub>).</p><p>The density profiles of the angle and torsion (&#981;<sub>1</sub>, &#952;<sub>0</sub>) for forward tetrapeptides and (&#981;<sub>0</sub>, &#952;<sub>0</sub>) for backward tetrapeptides have been studied in the PhD thesis of R. Morris (Morris, 2000<xref ref-type="bibr" rid="bb16"> &#9654;</xref>); his results are illustrated in Fig. 2<xref ref-type="fig" rid="fig2"> &#9654;</xref> and clearly show two separate peaks: a sharp peak representing the &#945;-helices (at &#952;<sub>0</sub> around 50&#176;) and a broad peak representing &#946;-strands (at &#952;<sub>0</sub> around &#8722;150&#176;). The first peak is roughly a factor of one hundred higher than the second peak. This suggests that trying to predict the position of the fourth C<sup>&#945;</sup> atom using these plots would strongly favour &#945;-&#173;helices, even when we include &#981;<sub>0</sub> for forward and &#981;<sub>1</sub> for backward peptides. We checked this suggestion and concluded that we indeed needed to use larger structural fragments to provide additional information.</p><p>Therefore, we decided to consider five-C<sup>&#945;</sup> fragments (pentapeptides) instead of tetrapeptides. The fifth C<sup>&#945;</sup> atom of a forward pentapeptide can be described in terms of (<italic>d</italic>, &#981;<sub>0</sub>, &#952;<sub>0</sub>, &#981;<sub>1</sub>, &#952;<sub>1</sub>, &#981;<sub>2</sub>) or similarly for a backward pentapeptide in terms of (<italic>d</italic>, &#981;<sub>2</sub>, &#952;<sub>1</sub>, &#981;<sub>1</sub>, &#952;<sub>0</sub>, &#981;<sub>0</sub>) (see Fig. 1<xref ref-type="fig" rid="fig1"> &#9654;</xref>).</p><p>To determine the frequency tables for the given combinations of angles and torsions, we downloaded all structures present in the PDB on 12 October 2005. From these, we kept for our learning set all structures with a reported <italic>R</italic>
            <sub>work</sub> better than 25% that had been refined at a resolution higher than 2.0&#8197;&#197;, leaving a set of approximately 12&#8197;000 structures. These structures were then randomly distributed over ten sets each containing 1200 structures. For every protein, we computed the angles and dihedral angles for every possible pentapeptide in both the forward and the backward directions. The results of these analyses were tabulated in multi-dimensional tables; angles (&#981;) between 75 and 155&#176; were binned every 10&#176; and dihedral angles (&#952;) between &#8722;180 and 180&#176; every were binned 15&#176;. The variation between the frequency tables derived from each of the ten sets was used to estimate the accuracy of the average of all values and look-up tables were constructed. We found that the variation in &#981;<sub>0</sub> in the forward direction and in &#981;<sub>2</sub> in the backward direction was negligible. Hence, we could approximate the propensity distributions to the four-dimensional tables of (&#952;<sub>0</sub>, &#981;<sub>1</sub>, &#952;<sub>1</sub>, &#981;<sub>2</sub>) in the forward direction and (&#952;<sub>1</sub>,&#160;&#981;<sub>1</sub>, &#952;<sub>0</sub>, &#981;<sub>0</sub>) in the backward direction.</p><p>To ensure that these tables reflect changes in the secondary structure, we displayed (as in Fig. 3<xref ref-type="fig" rid="fig3"> &#9654;</xref>) the retrieved density profiles in the regions of &#945;-helices and &#946;-strands. The panels show clearly that the density profile depends strongly on the secondary structure at a given position in the protein.</p><p>How can we use these density tables to predict the position of a fifth C<sup>&#945;</sup> atom given a tetrapeptide? Let us consider the C-&#173;terminus of a fragment in a protein model. The final tetrapeptide at this end of the fragment can be seen as the start of a forward pentapeptide. The C<sup>&#945;</sup>-atom positions of this part of the pentapeptide are known and thus (&#952;<sub>0</sub>,&#160;&#981;<sub>1</sub>) are fixed. From Fig. 3<xref ref-type="fig" rid="fig3"> &#9654;</xref> we know that the &#952;<sub>0</sub> torsion and the &#981;<sub>1</sub> angle describe the conformation of this part of the fragment effectively. The probability that the fifth C<sup>&#945;</sup> atom lies at an angle &#981;<sub>2</sub> and a dihedral angle &#952;<sub>1</sub> to the tetrapeptide is given by<disp-formula id="fd1"><graphic xlink:href="d-64-00416-efd1.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>when we use our observation that &#981;<sub>0</sub> is independent of the other angles and torsions.</p><p>Equivalently, the final tetrapeptide at the N-terminus of the fragment can be seen as the start of a backward pentapeptide. In this frame of reference, we found &#981;<sub>2</sub> to be independent of the other angles and torsions. Thus, we find for the probability that (&#981;<sub>0</sub>, &#952;<sub>1</sub>) describes the position of the fifth C<sup>&#945;</sup> atom<disp-formula id="fd2"><graphic xlink:href="d-64-00416-efd2.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>In the next section, we explain how we use the structural information to extend a fragment by a single C<sup>&#945;</sup> atom and iterate it to obtain loops.</p></sec><sec sec-type="methods" id="sec3"><label>3.</label><title>Method</title><p>Let us consider two main-chain fragments which are docked into sequence. The gap between these successive fragments is <italic>n</italic> residues long. Let us call the C<sup>&#945;</sup> atom of the N-terminus of the loop the &#8216;N-anchor&#8217; of the loop to be built. It is connected to the C-terminus of the preceding main-chain fragment. By extending this fragment iteratively in the forward direction, a connection can be made with the succeeding fragment. We call the C<sup>&#945;</sup> atom of the second anchor point the &#8216;C-anchor&#8217; of the loop. Of course, a loop can also be built in the opposite direction by iterating the extension from the C-&#173;anchor backwards.</p><p>In our loop-building algorithm, the creation of C<sup>&#945;</sup> backbones for possible loops is initially geometry-driven. Initially, the electron-density map plays the role of a &#8216;mask&#8217;; it is used to avoid building over the existing model by applying negative density around the atoms of the model. As the &#8216;tree&#8217; of possible conformations is reduced to the most likely candidates in a hierarchical manner, the contribution of the electron-density correlation to the selection criteria is slowly increased. The value of the correlation is only used to compare loops with each other; it is not used as a global measure. As a result, this method can easily bridge areas of low electron density using geometry, while at the end loops are finally selected based on the electron-density map.</p><p>A flowchart of our algorithm is given in Fig. 4<xref ref-type="fig" rid="fig4"> &#9654;</xref>. A short description of the algorithm steps is given below; each step is discussed separately in the following sections.<list id="l1" list-type="simple"><list-item><p>(i) Select a small number of possible C<sup>&#945;</sup>-atom positions, <italic>p</italic>, based on the structural information; these are likely extensions of a fragment by a single C<sup>&#945;</sup> atom. This step is iterated <italic>n</italic> times, creating a tree of possible loop backbones.</p></list-item><list-item><p>(ii) The large tree (which initially contains approximately <italic>p<sup>n</sup></italic> conformations or &#8216;paths&#8217;) is pruned by removing the most unlikely &#8216;branches&#8217;. Removing a single branch, which can be furcated, can result in the removal of multiple paths. Loops leading far away from the opposite anchor are removed, as well as loops with a geometrically unfavourable connection with the opposite anchor and those with a relatively low C<sup>&#945;</sup> electron-density correlation.</p></list-item><list-item><p>(iii) Determine the position of all main-chain atoms of the remaining loop conformations. In this step, we remove paths that are unlikely based on failure to find a peptide plane for the main-chain atoms, unlikely Ramachandran dihedral angles or too low density correlation of all main-chain atoms. Steps (i)&#8211;(iii) are performed twice, once for each direction in which the loop can be built (forward and backward). This is important as the tree of possible branches depends strongly on the structure of the anchor tetrapeptides.</p></list-item><list-item><p>(iv) Build the side chains of all peptides in the remaining loops. The best loop(s) is/are selected based on the density correlation of the all the atoms in the loop.</p></list-item><list-item><p>(v) Finally, the best loop(s) are refined in real space.</p></list-item></list>
         </p><sec id="sec3.1"><label>3.1.</label><title>Extending fragments by a single C<sup>&#945;</sup> atom at a time</title><p>We start by creating a &#8216;real-space&#8217; residual map, as shown in Jones &amp; Liljas (1984<xref ref-type="bibr" rid="bb11"> &#9654;</xref>) and described in a similar implementation in Cohen <italic>et al.</italic> (2004<xref ref-type="bibr" rid="bb3"> &#9654;</xref>). This sets the map density around each atom of the existing model to a negative value. Next, we create a uniform spherical grid with radius <italic>d</italic> (3.8&#8197;&#197;) around one of the anchor points of our loop. The algorithm we use to create a uniform spherical grid restricts the number of grid points to the Fibonacci sequence. Tests showed that the performance was optimal for 377 nodes. For each node in the grid, we determine the density at the node itself and midway between the node and the anchor. Since we expect at least some density at both points, we remove nodes with negative density at either position (the density map has the mean set to zero, as commonly performed). We have found that including the requirement for positive density at the midway point strongly improved the performance of the program. Note also that this is a very generous density constraint, which mostly ensures that we do not build over existing fragments or over the fragment itself.</p><p>For the remaining nodes, we compute the angle and torsion (&#981;, &#952;) and look up the corresponding structural probability from our tables. We use this value in combination with the electron density at the node to score the nodes. The contribution of the electron density is approximately a factor of ten smaller than the structural probability (the relative weights are set empirically) and thus the contribution of the density only involves the fine-tuning of the scoring.</p><p>Since the above procedure is iterated <italic>n</italic> times, the number of nodes may lead to a combinatorial explosion, <italic>p</italic>
               <sup><italic>n</italic></sup>. Thus, it is desirable to keep the number of nodes to a minimum. However, we cannot simply select nodes with the highest score. Consider the example displayed in Fig. 5<xref ref-type="fig" rid="fig5"> &#9654;</xref>: the figure shows that nodes tend to cluster together, with a single cluster having several high-scoring nodes (red spheres; lower scores are blue). We try to select the representative nodes from each cluster by taking the one with the highest score within a sphere of 0.3&#8197;&#197; radius. We found that in general five nodes per extension sphere suffice to build most loops.</p></sec><sec id="sec3.2"><label>3.2.</label><title>Removing unlikely conformations</title><p>The single extension for the <italic>p</italic> node candidates <italic>n</italic> times creates a tree of possibly up to <italic>p</italic>
               <sup><italic>n</italic></sup> C<sup>&#945;</sup> atoms representing possible backbones for the loop. The tree can grow in every direction, restricted only by the structural probability and positive electron density. In this step, we prune the tree by removing the least likely paths as follows.<list id="l2" list-type="simple"><list-item><p>(i) Those ending too far away from the opposite loop anchor are removed.</p></list-item><list-item><p>(ii) Loop paths are ordered according to the density at each C<sup>&#945;</sup> node and their density midway from the edges. Only a best selection is kept (typically around 100).</p></list-item><list-item><p>(iii) Structural probability is determined for the connection of each loop end node to the opposite anchor point. Again, the branches are ordered according to the structural probability and the best ones are kept (typically a few dozen).</p></list-item></list>
            </p></sec><sec id="sec3.3"><label>3.3.</label><title>Building the main-chain atoms</title><p>After the first round of pruning, we determine the position of the main-chain atoms for each residue in the loop tree. The main-chain atoms of a peptide lie approximately in a plane. Their relative positions are known to high accuracy and with negligible variations within this plane. Currently, we only consider <italic>trans</italic>-peptides.</p><p>For all amino acids except glycine, the position of the anchor C<sup>&#946;</sup> atom can be determined from the positions of the C and the N atom around the anchor C<sup>&#945;</sup> atom. Furthermore, little or no density is expected outside the peptide plane. We selected four points (<italic>E</italic>
               <sup>+</sup>
               <sub>max</sub>, <italic>E</italic>
               <sup>&#8722;</sup>
               <sub>max</sub>, <italic>E</italic>
               <sup>+</sup>
               <sub>min</sub>, <italic>E</italic>
               <sup>&#8722;</sup>
               <sub>min</sub>) which we found to have low density in comparison to the main-chain atom positions. The exact location of these points was chosen such that the procedure gave optimal results for the reproduction of the orientation for each peptide plane in the structure <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/cr.cgi?rm=pdb&amp;pdbId=1lml">1lml</ext-link> at a resolution of 2.0&#8197;&#197;. This yields eight (or seven for glycine) points to determine the orientation of the peptide plane between two successive C<sup>&#945;</sup> atoms.</p><p>Let &#961;(<italic>x</italic>) be the density at the position of atom <italic>x</italic>. The plane is rotated through two successive nodes, maximizing the value of<disp-formula id="fd3"><graphic xlink:href="d-64-00416-efd3.jpg" mimetype="image" mime-subtype="gif" position="float"/></disp-formula>This search is restricted by the constraint that the angle between N, C<sup>&#945;</sup> and C should be 109 &#177; 20&#176;. If no peptide plane is found which complies with this restraint, it is assumed that the corresponding C<sup>&#945;</sup> candidates are wrong and all paths containing this edge in the tree are removed.</p><p>We complete the loop tree with the main-chain atoms and remove those branches that are unlikely in the following steps.<list id="l3" list-type="simple"><list-item><p>(i) Determine the most probable position of the main-chain atoms by rotating the peptide plane as described above. Branches with residues for which we cannot find a plane are completely removed from the tree.</p></list-item><list-item><p>(ii) Determine the Ramachandran angles (Ramachandran <italic>et al.</italic>, 1963<xref ref-type="bibr" rid="bb19"> &#9654;</xref>) for the residues in every possible loop. In this reduction, glycines aside, loops which include peptides with a value of zero in the four-valued Ramachandran plot described in Kelly (2008<xref ref-type="bibr" rid="bb13"> &#9654;</xref>) are removed.</p></list-item><list-item><p>(iii) Order the loops based on the density correlation of all main-chain atoms and, if present, the C<sup>&#946;</sup> atoms. Typically, about five loops are kept for the final selection step.</p></list-item></list>
            </p></sec><sec id="sec3.4"><label>3.4.</label><title>Completion of the loop</title><p>After the latter selection step, in which we were still working both in the forward and the backward directions, only a small number of possible loop paths remain. For this final selection, the positions of all side-chain atoms in each candidate loop are determined using the algorithm from <italic>ARP</italic>/<italic>wARP</italic>. A weighted combination of the density correlation of the side-chain atoms and that of the main-chain atoms is used for the final scoring of the paths.</p></sec><sec id="sec3.5"><label>3.5.</label><title>Real-space refinement</title><p>After a loop with all side chains has been built, we refine it in real space. Real-space refinement for the purpose of this study has been performed as implemented in the program <italic>Coot</italic> (Emsley &amp; Cowtan, 2004<xref ref-type="bibr" rid="bb7"> &#9654;</xref>) utilizing a script that refines the loop in real space with geo&#173;metrical restraints.</p></sec><sec id="sec3.6"><label>3.6.</label><title>Implementation and hardware details</title><p>
               <italic>Loopy</italic> was written in C++. The ATLAS library (Whaley &amp; Petitet, 2005<xref ref-type="bibr" rid="bb23"> &#9654;</xref>) provided us with an automatically optimized <italic>BLAS</italic>/<italic>LAPACK</italic> implementation for linear algebraic computations. <italic>Clipper</italic> (Cowtan, 2003<xref ref-type="bibr" rid="bb4"> &#9654;</xref>) was used for handling electron-density maps. In the initial stage of the algorithm a linear interpolation was used to determine the electron-density correlation. This method is ten times faster than the Gaussian interpolation method that we use in the final stage, although less accurate. However, at the beginning many map correlations need to be determined and accuracy is less important at this stage than speed. In the final stage, where we determine the side-chain atoms and score all loops, we need a better and more precise interpolation method. In this stage, we compute the electron-density correlation by approximating the atoms by Gaussian distributions centred at the atomic position (Cowtan, 2003<xref ref-type="bibr" rid="bb4"> &#9654;</xref>).</p><p>
               <italic>Loopy</italic> compiles under different architectures and operating systems, including Linux, Mac OSC, Alpha Tru64 Unix and SGI Irix. The validation was performed on an Intel Xeon 2.66&#8197;GHz machine under Fedora core 5. Testing in the context of <italic>ARP</italic>/<italic>wARP</italic> model building was performed on an Intel Pentium 4 3.00&#8197;GHz and on a cluster of five Apple X-serve G5 nodes.</p></sec></sec><sec sec-type="results" id="sec4"><label>4.</label><title>Results</title><p>The results of our program were examined in two stages. Firstly, we wanted to validate <italic>Loopy</italic>: could the program rebuild parts of a model using the best available map? In the next stage, we considered a more interesting question: can <italic>Loopy</italic> build loops in difficult parts of the density map? In other words, could <italic>Loopy</italic> add to the model completion by building loops where another program, in this case <italic>ARP</italic>/<italic>wARP</italic>, failed? All these tests will be described in the next subsections.</p><sec id="sec4.1"><label>4.1.</label><title>Validation</title><p>We validated <italic>Loopy</italic> on two structures: <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/cr.cgi?rm=pdb&amp;pdbId=1lml">1lml</ext-link> and <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/cr.cgi?rm=pdb&amp;pdbId=1o1z">1o1z</ext-link>. Both structures had been refined to a resolution of 2.0&#8197;&#197;. For the initial validation of <italic>Loopy</italic>, we ran it in the manual mode to rebuild a few random parts of <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/cr.cgi?rm=pdb&amp;pdbId=1lml">1lml</ext-link> and checked the generated loop suggestions visually. In Fig. 6<xref ref-type="fig" rid="fig6"> &#9654;</xref>, a representative example of a loop test is shown for a loop with anchor points at residues 35 and 43. In this example, all loop suggestions closely resemble the final model (pink). The loop with the highest score (green) is very close to the reference structure.</p><p>For a more extensive validation, we used the structure <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/cr.cgi?rm=pdb&amp;pdbId=1o1z">1o1z</ext-link> which had also been used for the validation of <italic>Xpleo</italic> (van den Bedem <italic>et al.</italic>, 2005<xref ref-type="bibr" rid="bb2"> &#9654;</xref>). We rebuilt every polypeptide in the final structure of 4, 6, 8, 10, 12 and 14 residues long. Results for the various loop lengths are given in Fig. 7<xref ref-type="fig" rid="fig7"> &#9654;</xref>, which displays a box plot for the r.m.s.d. of all atoms after real-space refinement. Each time around 100 loops were built. In Table 1<xref ref-type="table" rid="table1"> &#9654;</xref> we show how various settings of the maximum number of nodes per extension and loop length affect the average building time, success rate and accuracy of the loops. Based on these tests, we adjusted the default number of maximum number of nodes per extension to balance time, success and accuracy (defaults are highlighted in Table 1<xref ref-type="table" rid="table1"> &#9654;</xref>).</p><p>We also showed that the r.m.s.d. of the C<sup>&#945;</sup> atoms alone gives a good indication of the quality of the loop. Furthermore, real-space refinement improves the loops considerably, demonstrating that despite the inherent inaccuracy of its building algorithm, <italic>Loopy</italic> places the loops accurately enough to be positioned correctly by real-space refinement. Details of this are illustrated in Fig. 1 of the supplementary material<xref ref-type="fn" rid="fn1">1</xref>.</p><p>The validation gave us confidence to run the test as part of an automatic building procedure.</p></sec><sec id="sec4.2"><label>4.2.</label><title>Loop building after <italic>ARP</italic>/<italic>wARP</italic> main-chain tracing</title><p>To test how <italic>Loopy</italic> performs in the most difficult regions of a structure, which are typically those that need to be built in order to obtain a complete model, we devised the following protocol. The main-chain tracing and side-chain tracing modules of <italic>ARP</italic>/<italic>wARP</italic> were run on the best available map using as free atoms the atomic coordinates from the final structure, only once and without any iteration with refinement. This is the best possible scenario for the <italic>ARP</italic>/<italic>wARP</italic> tracing modules: the best map and the most accurate free-atom coordinates are used. Under these conditions, the regions of the structure that are not built by the <italic>ARP</italic>/<italic>wARP</italic> main tracing modules would almost certainly never be built by <italic>ARP</italic>/<italic>wARP</italic> and thus represent the most challenging areas of the structure. The test set was composed of a broad range of different structures for which we know the final model. The set contained 38 structures in total and included structures with multiple chains and/or NCS. The resolution of the data sets ranged from 1.0 to 3.3&#8197;&#197;.</p><p>In the automatic mode <italic>Loopy</italic> determines the loop positions from the PDB file of the model; the sequence of the structure is provided in a PIR format file, like in a classic <italic>ARP</italic>/<italic>wARP</italic> run. <italic>Loopy</italic> then tries to build all loops according to the user input. Before starting to build each loop, the program checks that the anchors or their symmetry mates lie within reasonable distance. For our test, we used a maximum loop length of 14 residues. The value of <italic>p</italic> (see &#167;<xref ref-type="sec" rid="sec3.1"/>3.1) was varied with the length of the loop, starting between six for short loops and two for the longest loops. The loop quality was determined as the r.m.s.d. between the C<sup>&#945;</sup> atoms in the loops and those in the reference structure. Since we expect that the anchors are wrong when the gap consists of only one or two residues, for these small loops the gap was broadened on each side if possible. This effectively meant that we rebuilt the initial anchors.</p><p>Table 2<xref ref-type="table" rid="table2"> &#9654;</xref> shows that <italic>Loopy</italic> can build difficult regions of the structure. Thus, it adds many additional correct C<sup>&#945;</sup> atoms to the structure built by the protocol described in &#167;<xref ref-type="sec" rid="sec4.2"/>4.2 without adding too many incorrect atoms. It should also be noted that in an iterative <italic>ARP</italic>/<italic>wARP</italic> run the wrong loops would be most likely removed or, in the context of <italic>flex-wARP</italic>, flagged as wrong by <italic>ElAl</italic> (Cohen <italic>et al.</italic>, 2004<xref ref-type="bibr" rid="bb3"> &#9654;</xref>). The time needed per structure varied from a couple of seconds to 4&#8197;min at the most.</p><p>To quantify the quality of the built loops, we studied the r.m.s.d. of the C<sup>&#945;</sup> atoms per loop (see Fig. 8<xref ref-type="fig" rid="fig8"> &#9654;</xref>) and observed a decrease in the accuracy of the loops with resolution. For a resolution &lt;2.0&#8197;&#197; the median of the r.m.s.d. lies at 0.2&#8197;&#197; and it increases to 0.8&#8197;&#197; for resolutions lower than 3&#8197;&#197;. We furthermore observe that the value of the r.m.s.d. increases with the length of the loop; since only a few loops with a length of eight residues or more are available, the decrease in the median r.m.s.d. is hardly significant. In supplementary Fig. 2<xref ref-type="fig" rid="fig2"> &#9654;</xref>
               <xref ref-type="fn" rid="fn1">1</xref>, we show that the percentage of C<sup>&#945;</sup> atoms in each loop that lie within 0.7&#8197;&#197; of the reference structure is also very high.</p></sec><sec id="sec4.3"><label>4.3.</label><title>Loop building within the <italic>ARP</italic>/<italic>wARP</italic>&#160;<italic>flex-wARP</italic> module</title><p>As a final test, we implemented <italic>Loopy</italic> within the <italic>ARP</italic>/<italic>wARP flex-wARP</italic> module (Cohen <italic>et al.</italic>, 2004<xref ref-type="bibr" rid="bb3"> &#9654;</xref>) that was introduced in <italic>ARP</italic>/<italic>wARP</italic> release 7.0 (July 2007). In this flexible module of <italic>ARP</italic>/<italic>wARP</italic>, we could not only implement <italic>Loopy</italic> after the full <italic>ARP</italic>/<italic>wARP</italic> run but could also run<italic> Loopy</italic> internally after each model-building cycle. In this test, we want to establish whether the overall completeness of the models delivered by <italic>ARP</italic>/<italic>wARP</italic> increases when <italic>Loopy</italic> is run in every <italic>ARP</italic>/<italic>wARP</italic> model-building cycle. More precisely, each time the <italic>ARP</italic>/<italic>wARP</italic> main-chain tracing module is run and the resulting main-chain fragments are docked into sequence, all possible loops shorter than ten residues are built. After the final main-chain tracing cycle all possible loops shorter than 14 residues are built. For a set of 30 structures from the <italic>ARP</italic>/<italic>wARP</italic> test-cases deposition site (<ext-link ext-link-type="uri" xlink:href="http://xtal.nki.nl/Depot">http://xtal.nki.nl/Depot</ext-link>), the best possible results were compared with those of a <italic>flex-wARP</italic> run without <italic>Loopy</italic>. The results are displayed in Fig. 9<xref ref-type="fig" rid="fig9"> &#9654;</xref>. Usage of <italic>Loopy</italic> generally increases the completeness of the models, sometimes significantly, especially for higher resolution. In a small number of the cases the number of residues found using <italic>Loopy</italic> was slightly reduced.</p></sec></sec><sec sec-type="discussion|interpretation" id="sec5"><label>5.</label><title>Discussion</title><p>We have shown that using the geometry of pentapeptides as a driving force combined with a hierarchical pruning algorithm is a powerful and accurate method for loop building. The validation of <italic>Loopy</italic> showed that for high-resolution data <italic>Loopy</italic> can rebuild parts of a structure up to 14 residues long with a median accuracy below 0.5&#8197;&#197; within a couple of minutes on a 2.66&#8197;GHz Pentium 4.</p><p>During the tests on &#8216;real&#8217; loops, we found that <italic>Loopy</italic> can build difficult regions and add to model completeness, especially at resolutions higher than 2.6&#8197;&#197;. The average r.m.s.d. of the C<sup>&#945;</sup> atoms in the loops lies around 0.5&#8197;&#197;, although the r.m.s.d. increases with the loop length. For lower resolution data, <italic>Loopy</italic> still improves the model completeness, but the number of C<sup>&#945;</sup> atoms further than 0.7&#8197;&#197; from their equivalents in the reference structure increases. Note, however, that at lower resolution the accuracy of position of the atoms in the reference structure also decreases.</p><p>In the future, we would like to improve the performance of <italic>Loopy</italic>, in particular for lower resolution and longer loops. We have found that in these cases a failure to find the correct loop often originates from the pruning algorithm. When we verified our scoring function (see Fig. 10<xref ref-type="fig" rid="fig10"> &#9654;</xref>), we found that its (negative) correlation with the r.m.s.d. is not very strong. As a result, we are at present not able to use the scoring as a measure of accuracy or as an indicator for incorrect loops. We aim to rectify this in the future. Furthermore, we have found that for lower resolutions and for longer loops our method for finding main-chain atoms often fails to find any possible peptide plane. This may be caused by the selection criteria used in previous steps of the pruning algorithm or by the plane-search algorithm. We plan to study this problem and to try to improve the robustness of this part of the algorithm. Finally, we would like to remedy the exponential time and memory usage of <italic>Loopy</italic>. One idea is to check the distance to the opposite anchor point during the building of the tree and remove the suggested C<sup>&#945;</sup> atoms that are unlikely based on that distance. This should reduce the size of the loop tree generated and thereby reduce both the time and the memory usage. A first test with this idea shows that it will indeed increase the speed and as a side effect improve the accuracy of the loops. As a final remark we would like to note that <italic>Loopy</italic> is currently unable to build <italic>cis</italic>-peptides. The method we use to search the plane of the main-chain atoms of the peptide implies <italic>trans</italic>-peptides. We expect as well that the angles and torsions of a pentapeptide that includes a <italic>cis</italic>-peptide will deviate from the data that we have acquired.</p><p>Overall, we conclude that <italic>Loopy</italic> is useful software that increases model completeness in automated model building. It is also a valuable tool for suggesting loop conformations during manual model building. Finally, it can facilitate the building of ensembles of loops and testing the idea of refining partial model ensembles along the lines suggested by Furnham <italic>et al.</italic> (2006<xref ref-type="bibr" rid="bb9"> &#9654;</xref>).</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material content-type="local-data" xlink:href="d-64-00416-sup1.pdf" position="float" xlink:type="simple"><p>Supplementary material file. DOI: <ext-link ext-link-type="uri" xlink:type="simple" xlink:href="http://dx.doi.org/10.1107/S0907444908001558/gx5125sup1.pdf">10.1107/S0907444908001558/gx5125sup1.pdf</ext-link>
            </p><media mimetype="application" mime-subtype="pdf" xlink:href="d-64-00416-sup1.pdf" position="float" xlink:type="simple"/></supplementary-material></sec></body><back><fn-group><fn id="fn1"><label>1</label><p>Supplementary material has been deposited in the IUCr electronic archive (Reference: <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/sendsup?gx5125sup1.pdf">GX5125</ext-link>). Services for accessing this material are described at the back of the journal.</p></fn></fn-group><ack><p>We would like to thank Richard J. Morris for providing the tables for the tetrapeptides. This research was supported by the NIH (grant No. R01 GM62612). SXC thanks NWO/CW (VENI 700.55.405). This work was performed under the coordination of the EU BIOXHIT FW6 Integrated Project (grant No. LSHG-CT-2003-503420).</p></ack><ref-list><title>References</title><ref id="bb1"><citation citation-type="other">Bakker, P. I. de, Furnham, N., Blundell, T. L. &amp; DePristo, M. A. (2006). <italic>Curr. Opin. Struct. Biol.</italic><bold>16</bold>, 160&#8211;165.</citation></ref><ref id="bb2"><citation citation-type="other">Bedem, H. van den, Lotan, I., Latombe, J.-C. &amp; Deacon, A. M. (2005). <italic>Acta Cryst.</italic> D<bold>61</bold>, 2&#8211;13.</citation></ref><ref id="bb3"><citation citation-type="other">Cohen, S. X., Morris, R. J., Fernandez, F. J., Ben Jelloul, M., Kakaris, M., Parthasarathy, V., Lamzin, V. S., Kleywegt, G. J. &amp; Perrakis, A. (2004). <italic>Acta Cryst.</italic> D<bold>60</bold>, 2222&#8211;2229.</citation></ref><ref id="bb4"><citation citation-type="other">Cowtan, K. (2003). <italic>IUCr CompComm. Newslett.</italic><bold>2</bold>, 4&#8211;9.</citation></ref><ref id="bb5"><citation citation-type="other">Cowtan, K. (2006). <italic>Acta Cryst.</italic> D<bold>62</bold>, 1002&#8211;1011.</citation></ref><ref id="bb6"><citation citation-type="other">DePristo, M. A., de Bakker, P. I. &amp; Blundell, T. L. (2004). <italic>Structure</italic>, <bold>12</bold>, 831&#8211;838.</citation></ref><ref id="bb7"><citation citation-type="other">Emsley, P. &amp; Cowtan, K. (2004). <italic>Acta Cryst.</italic> D<bold>60</bold>, 2126&#8211;2132.</citation></ref><ref id="bb8"><citation citation-type="other">Esnouf, R. M. (1997). <italic>Acta Cryst.</italic> D<bold>53</bold>, 665&#8211;672.</citation></ref><ref id="bb9"><citation citation-type="other">Furnham, N., Blundell, T. L., DePristo, M. A. &amp; Terwilliger, T. C. (2006). <italic>Nature Struct. Mol. Biol.</italic><bold>13</bold>, 184&#8211;185.</citation></ref><ref id="bb10"><citation citation-type="other">Ioerger, T. R., Holton, T., Christopher, J. A. &amp; Sacchettini, J. C. (1999). <italic>Proceedings of the Seventh International Conference on Intelligent Systems for Molecular Biology</italic>, edited by T. Lengauer, R. Schneider, P. Bork, D. Brutlag, J. Glasgow, H.-W. Mewes &amp; R. Zimmer, pp. 130&#8211;137. Menlo Park, USA: AAAI Press.</citation></ref><ref id="bb11"><citation citation-type="other">Jones, T. A. &amp; Liljas, L. (1984). <italic>Acta Cryst.</italic> A<bold>40</bold>, 50&#8211;57.</citation></ref><ref id="bb12"><citation citation-type="other">Jones, T. A., Zou, J.-Y., Cowan, S. W. &amp; Kjeldgaard, M. (1991). <italic>Acta Cryst.</italic> A<bold>47</bold>, 110&#8211;119.</citation></ref><ref id="bb13"><citation citation-type="other">Kelly, K. (2008). <italic>Protein Structure Validation and Analysis.</italic> http://www.chemcomp.com/journal/provalid.htm.</citation></ref><ref id="bb14"><citation citation-type="other">Kleywegt, G. J. (1997). <italic>J. Mol. Biol.</italic><bold>273</bold>, 371&#8211;376.</citation></ref><ref id="bb15"><citation citation-type="other">Levitt, D. G. (2001). <italic>Acta Cryst.</italic> D<bold>57</bold>, 1013&#8211;1019.</citation></ref><ref id="bb16"><citation citation-type="other">Morris, R. J. (2000). PhD thesis. Karl-Franzens-Universit&#228;t, Graz, Austria.</citation></ref><ref id="bb17"><citation citation-type="other">Morris, R. J., Perrakis, A. &amp; Lamzin, V. S. (2002). <italic>Acta Cryst.</italic> D<bold>58</bold>, 968&#8211;975.</citation></ref><ref id="bb18"><citation citation-type="other">Perrakis, A., Morris, R. &amp; Lamzin, V. S. (1999). <italic>Nature Struct. Biol.</italic><bold>6</bold>, 458&#8211;463.</citation></ref><ref id="bb19"><citation citation-type="other">Ramachandran, G. N., Ramakrishnan, C. &amp; Sasisekharan, V. (1963). <italic>J. Mol. Biol.</italic><bold>7</bold>, 95&#8211;99.</citation></ref><ref id="bb20"><citation citation-type="other">Terwilliger, T. C. (2003<italic>a</italic>). <italic>Acta Cryst.</italic> D<bold>59</bold>, 38&#8211;44.</citation></ref><ref id="bb21"><citation citation-type="other">Terwilliger, T. C. (2003<italic>b</italic>). <italic>Acta Cryst.</italic> D<bold>59</bold>, 45&#8211;49.</citation></ref><ref id="bb22"><citation citation-type="other">Terwilliger, T. C., Grosse-Kunstleve, R. W., Afonine, P. V., Adams, P. D., Moriarty, N. W., Zwart, P., Read, R. J., Turk, D. &amp; Hung, L.-W. (2007). <italic>Acta Cryst.</italic> D<bold>63</bold>, 597&#8211;610.</citation></ref><ref id="bb23"><citation citation-type="other">Whaley, R. C. &amp; Petitet, A. (2005). <italic>Software Pract. Exp.</italic><bold>35</bold>, 101&#8211;121.</citation></ref><ref id="bb24"><citation citation-type="other">Yao, M., Zhou, Y. &amp; Tanaka, I. (2006). <italic>Acta Cryst.</italic> D<bold>62</bold>, 189&#8211;196.</citation></ref></ref-list></back><floats-wrap><fig id="fig1" position="float"><label>Figure 1</label><caption><p>Angles and dihedral angles of the C<sup>&#945;</sup> atoms in a tetrapeptide or pentapeptide.</p></caption><graphic xlink:href="d-64-00416-fig1"/></fig><fig id="fig2" position="float"><label>Figure 2</label><caption><p>Logarithmic occurrence of angle and dihedral angle of the C<sup>&#945;</sup> atoms in tetrapeptides.</p></caption><graphic xlink:href="d-64-00416-fig2"/></fig><fig id="fig3" position="float"><label>Figure 3</label><caption><p>Examples of the logarithmic occurrence of angle and dihedral angle of the C<sup>&#945;</sup> atoms in pentapeptides.</p></caption><graphic xlink:href="d-64-00416-fig3"/></fig><fig id="fig4" position="float"><label>Figure 4</label><caption><p>Flowchart of <italic>Loopy</italic>.</p></caption><graphic xlink:href="d-64-00416-fig4"/></fig><fig id="fig5" position="float"><label>Figure 5</label><caption><p>Example of possible points <italic>p</italic> from an existing candidate terminal C<sup>&#945;</sup> atom (large grey sphere) in stereographic view. Candidate positions are shown as smaller spheres using a &#8216;heat&#8217; colour scheme: blue refers to a low score and red to a high score.</p></caption><graphic xlink:href="d-64-00416-fig5"/></fig><fig id="fig6" position="float"><label>Figure 6</label><caption><p>Example of loops for <ext-link ext-link-type="uri" xlink:href="http://scripts.iucr.org/cgi-bin/cr.cgi?rm=pdb&amp;pdbId=1lml">1lml</ext-link> between residue 35 and 43 in stereographic view. The pink loop is the reference structure, the green loop is the loop with the highest score and grey loops are alternative loops. (<italic>a</italic>) Before and (<italic>b</italic>) after real-space refinement.</p></caption><graphic xlink:href="d-64-00416-fig6"/></fig><fig id="fig7" position="float"><label>Figure 7</label><caption><p>For validation purposes, portions of the original structure were rebuilt. This plot shows the r.m.s.d. of all atoms in a loop <italic>versus</italic> its number of residues. The median is displayed as a thick bar, the first and third quartile are represented by the rectangle and the minimum and maximum are shown by the caps of the dotted lines. Outliers are determined as 1.5 times the interquartile range. They are displayed as circles.</p></caption><graphic xlink:href="d-64-00416-fig7"/></fig><fig id="fig8" position="float"><label>Figure 8</label><caption><p>The C<sup>&#945;</sup> r.m.s.d. of the loops built by <italic>Loopy</italic> on models computed using the protocol described in &#167;<xref ref-type="sec" rid="sec4.2"/>4.2 are displayed against the resolution (<italic>a</italic>) and the loop length (<italic>b</italic>). The C<sup>&#945;</sup> r.m.s.d. clearly increases with the resolution. For the loop length, the number of loops per length (given above the median line in the box plot) is insufficient to derive any statistical conclusions for the C<sup>&#945;</sup> r.m.s.d. as a function of the loop length. (See the caption of Fig. 7<xref ref-type="fig" rid="fig7"> &#9654;</xref> for an explanation of the box plot).</p></caption><graphic xlink:href="d-64-00416-fig8"/></fig><fig id="fig9" position="float"><label>Figure 9</label><caption><p>Extra correct residues built with <italic>Loopy</italic> integrated within <italic>flex-wARP</italic> compared with models created by <italic>flex-wARP</italic> without<italic> Loopy.</italic>
               </p></caption><graphic xlink:href="d-64-00416-fig9"/></fig><fig id="fig10" position="float"><label>Figure 10</label><caption><p>The scoring function is plotted against the r.m.s.d. of the C<sup>&#945;</sup> atoms per loop built by <italic>Loopy</italic> after the protocol described in &#167;<xref ref-type="sec" rid="sec4.2"/>4.2. The figure displays a negative correlation. The symbols in the plot represent the percentage of C<sup>&#945;</sup> atoms in a loop that are within 0.7&#8197;&#197; of the reference.</p></caption><graphic xlink:href="d-64-00416-fig10"/></fig><table-wrap id="table1" position="float"><label>Table 1</label><caption><title>Nodes per extension and average time per number of residues</title><p>The default choices for the maximum number of point per extension, <italic>p</italic>
                  <sub>max</sub>, for each loop length are shown in bold. Time is the average time per loop for about 100 loops in each case, including real-space refinement. The success rate is calculated as the percentage of times that <italic>Loopy</italic> actually returned a solution. R.m.s.d. C<sup>&#945;</sup> is the root-mean-square deviation from the final structure for all built loops after real-space refinement.</p></caption></table-wrap><table-wrap id="table2" position="float"><label>Table 2</label><caption><title>The results of the testing protocol described in &#167;<xref ref-type="sec" rid="sec4.2"/>4.2</title><p>
                  <italic>R</italic>, resolution; <italic>f</italic>, number of residues in the final model. We firstly show the results after running the main-chain and side-chain building modules of <italic>ARP</italic>/<italic>wARP</italic> alone (<italic>C</italic>, chains; <italic>r</italic>, correct residues) and then we indicate the same numbers after running <italic>Loopy</italic> [<italic>C</italic>(<italic>L</italic>), <italic>r</italic>(<italic>L</italic>)]; <italic>t</italic>, time.</p></caption></table-wrap></floats-wrap></article>