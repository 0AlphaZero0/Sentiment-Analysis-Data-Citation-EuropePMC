<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><?subarticle report26511?><?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v3.0 20080202//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName journalpublishing3.dtd?><?SourceDTD.Version 3.0?><?ConverterInfo.XSLTName jp2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">F1000Res</journal-id><journal-id journal-id-type="iso-abbrev">F1000Res</journal-id><journal-id journal-id-type="pmc">F1000Research</journal-id><journal-title-group><journal-title>F1000Research</journal-title></journal-title-group><issn pub-type="epub">2046-1402</issn><publisher><publisher-name>F1000Research</publisher-name><publisher-loc>London, UK</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">5365225</article-id><article-id pub-id-type="pmid">28413619</article-id><article-id pub-id-type="doi">10.12688/f1000research.11022.3</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software Tool Article</subject></subj-group><subj-group><subject>Articles</subject><subj-group><subject>Bioinformatics</subject></subj-group><subj-group><subject>Genomics</subject></subj-group></subj-group></article-categories><title-group><article-title>Picopore: A tool for reducing the storage size of Oxford Nanopore Technologies datasets without loss of functionality</article-title><fn-group content-type="pub-status"><fn><p>[version 3; referees: 2 approved]</p></fn></fn-group></title-group><contrib-group><contrib contrib-type="author"><name><surname>Gigante</surname><given-names>Scott</given-names></name><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-4544-2764</contrib-id><xref ref-type="corresp" rid="c1">a</xref><xref ref-type="aff" rid="a1">1</xref></contrib><aff id="a1">
<label>1</label>Walter &amp; Eliza Hall Institute of Medical Research, Parkville, Victoria, 3121, Australia</aff></contrib-group><author-notes><corresp id="c1"><label>a</label><email xlink:href="mailto:gigante.s@wehi.edu.au">gigante.s@wehi.edu.au</email></corresp><fn fn-type="con"><p>SG designed and developed the source code, published the software and wrote the article.</p></fn><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>No competing interests were disclosed.</p></fn></author-notes><pub-date pub-type="epub"><day>28</day><month>9</month><year>2017</year></pub-date><pub-date pub-type="collection"><year>2017</year></pub-date><volume>6</volume><elocation-id>227</elocation-id><history><date date-type="accepted"><day>30</day><month>9</month><year>2017</year></date></history><permissions><copyright-statement>Copyright: &#169; 2017 Gigante S</copyright-statement><copyright-year>2017</copyright-year><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This is an open access article distributed under the terms of the Creative Commons Attribution Licence, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><self-uri content-type="pdf" xlink:type="simple" xlink:href="f1000research-6-13857.pdf"/><abstract><p>Oxford Nanopore Technologies' (ONT's) MinION and PromethION long-read sequencing technologies are emerging as genuine alternatives to established Next-Generation Sequencing technologies. A combination of the highly redundant file format and a rapid increase in data generation have created a significant problem both for immediate data storage on MinION-capable laptops, and for long-term storage on lab data servers. We developed Picopore, a software suite offering three methods of compression. Picopore's lossless and deep lossless methods provide a 25% and 44% average reduction in size, respectively, without removing any data from the files. Picopore's raw method provides an 88% average reduction in size, while retaining biologically relevant data for the end-user. All methods have the capacity to run in real-time in parallel to a sequencing run, reducing demand for both immediate and long-term storage space.</p></abstract><kwd-group kwd-group-type="author"><kwd>DNA Sequencing</kwd><kwd>Genome Informatics</kwd><kwd>Nanopore Sequencing</kwd><kwd>Compression</kwd><kwd>Data Storage</kwd></kwd-group><funding-group><award-group id="fund-1"><funding-source>Australian NHMRC Program</funding-source><award-id>1054618</award-id></award-group><funding-statement>The work discussed in this article was funded by the Speed Lab in the Bioinformatics Division of the Walter &amp; Eliza Institute of Medical Research. The Speed Lab is supported by the Australian NHMRC Program Grant number 1054618.</funding-statement><funding-statement><italic>The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</italic></funding-statement></funding-group></article-meta><notes notes-type="version-changes"><sec sec-type="version-changes"><label>Revised</label><title>Amendments from Version 2</title><p>This new version has been published to include the &#8220;Author endorsement&#8221; section, which was missed out of the previous version 2.</p></sec></notes></front><body><sec sec-type="intro"><title>Introduction</title><p>Oxford Nanopore Technologies&#8217; (ONT&#8217;s) nanopore sequencing technology MinION provides a high-throughput, low-cost alternative to traditional Next-Generation Sequencing (NGS) technologies
<sup><xref rid="ref-1" ref-type="bibr">1</xref></sup>. The sequencing device itself is handheld and connects by USB to a laptop computer. Together with all equipment and reagents required for DNA library preparation, the equipment required to use MinION is minimal; entire laboratories have even been transported overseas in a suitcase, allowing a versatile and agile approach towards DNA and RNA sequencing
<sup><xref rid="ref-2" ref-type="bibr">2</xref></sup>.</p><p>Over the course of ONT&#8217;s Early Access Program, several improvements in software and chemistry have led to a rapid increase in yield, through an increase in average read length, an improvement in basecalling accuracy rates and an increase in total number of reads. In October 2015, the MinION Analysis and Reference Consortium (MARC), using R7.3 flow cells and SQK-MAP005 (2D) chemistry, reported a median of 60,600 reads with a median yield of 650,000 events across 20 MinION experiments
<sup><xref rid="ref-3" ref-type="bibr">3</xref></sup>. In contrast, ONT claim to have obtained a total base yield of 17 gigabases using an R9.4 flowcell on the latest version of their MinKNOW software (
<ext-link ext-link-type="uri" xlink:href="https://nanoporetech.com/about-us/news/minion-software-minknow-upgraded-enable-increased-data-yield-other-benefits">https://nanoporetech.com/about-us/news/minion-software-minknow-upgraded-enable-increased-data-yield-other-benefits</ext-link>). Dramatic increases in MinION flowcell throughput have highlighted the need for reduced per-base data handling and storage demands now and into the future.</p><p>The concerns over data storage extend beyond the data generation capabilities of a single flowcell. Recent attempts to perform
<italic>de novo</italic> assembly of eukaryotic genomes have combined the data generated by multiple flowcells in order to gain sufficient coverage of the genome
<sup><xref rid="ref-4" ref-type="bibr">4</xref></sup>. To this end, ONT have begun the precommercial release of the PromethION, a benchtop nanopore sequencing device with 48 flowcells. In addition, each of these flowcells contains 3000 channels, as opposed to the 512 channels in a single MinION flowcell. Data generation from one PromethION unit is projected at up to 6 terabases per day
<sup><xref rid="ref-5" ref-type="bibr">5</xref></sup>.</p><p>Numerous methods have been developed for the efficient analysis of the increasingly large nanopore datasets. However, current methods to reduce the data storage footprint are extremely limited. Nanopore runs uploaded to online repositories, such as the European Nucleotide Archive, are bundled into a tarball, a process which facilitates upload as a single file, but does not decrease file size. Moreover, ONT runs bundled into a tarball (which could then be compressed using traditional means) are not able to be read by any existing nanopore analysis tools. Moreover, traditional compression technologies are poorly adapted to the needs of the individual user, many of whom have no need for a large portion of the data stored by ONT&#8217;s basecallers. Therefore, we developed Picopore, a tool for reducing the storage footprint of the ONT runs without preventing users from using their preferred analysis tools. Picopore uses a combination of storage reduction techniques, including built-in dynamic compression in the HDF5 file format, reduction of data duplication, efficient allocation of memory within the file, and the removal of intermediate data generated during basecalling, which is deemed unnecessary by the end-user.</p></sec><sec sec-type="methods"><title>Methods</title><sec><title>Implementation</title><p>Picopore is developed using the Python
<monospace>h5py</monospace> module (
<ext-link ext-link-type="uri" xlink:href="http://www.h5py.org/">http://www.h5py.org/</ext-link>), an interface to the HDF5 file format (
<ext-link ext-link-type="uri" xlink:href="http://www.hdfgroup.org/HDF5">http://www.hdfgroup.org/HDF5</ext-link>), used by ONT under the FAST5 file extension. Picopore implements a number of different compression methods, a selection of which are applied according to user preferences, before using HDF5&#8217;s
<monospace>h5repack</monospace> to rebuild the file according to the reduced file size requirements.</p></sec><sec><title>Compression techniques</title><p>
<bold><italic>Built-in GZIP compression.</italic></bold> The HDF5 file format allows for both files and datasets within files to be written using a number of different compression filters, the most universally implemented being GZIP. GZIP applies traditional compression to the data stored in the HDF5 file with choices of compression level between 1 and 9. ONT&#8217;s default compression uses GZIP at level 1; Picopore increases this to level 9 in order to decrease disk space usage.</p><p>
<bold><italic>Dynamic memory allocation for variables.</italic></bold> Data stored in the HDF5 file format uses fixed-size file formats provided by NumPy, which provides a vast array of options for storing integers, decimals and strings within high-dimensional datasets
<sup><xref rid="ref-6" ref-type="bibr">6</xref></sup>. ONT&#8217;s native data is written using the largest data types provided by NumPy: 64-bit integers, 64-bit decimals, and "variable-size" strings. Picopore vastly reduces disk space usage by analyzing each dataset to determine the minimum number of bytes required by a given variable in the file, changing the data type accordingly.</p><p>
<bold><italic>Collapsing of file structure.</italic></bold> The advantage of the HDF5 file format is that it provides a file directory-like storage format for datasets and properties, making reading and writing to the files straightforward and easy to understand. However, the inherent nature of the highly-structured file format requires HDF5 to allocate slots of memory to "groups", which represent the internal directory structure of the file. Picopore reduces the disk space used by this file metadata by collapsing the directory structure, while retaining the option for users to reverse this action when tools that only recognize the original file format are required.</p><p>
<bold><italic>Indexing of duplicated data.</italic></bold> ONT&#8217;s most widely used basecalling software, the cloud-based Metrichor service (
<ext-link ext-link-type="uri" xlink:href="https://metrichor.com/s/">https://metrichor.com/s/</ext-link>), performs feature recognition (or "event detection"). This segments the electrical signal representing each nanopore read into events, each of which represents a period of time when the DNA was stationary in the nanopore. These events are then converted into basecalled data, which provides a single k-mer (at present a 5-mer) of DNA representing the bases in the nanopore contributing to the signal at that time. Each event corresponds to a single row in the basecalled dataset, and both the event detection and basecalled datasets thus store the mean signal, standard deviation, start time and length of the event. Picopore reduces disk space usage by indexing the basecalled dataset to the event detection dataset, removing the duplicated data while retaining the option for users to reverse this action when tools that require access to this data are required.</p><p>
<bold><italic>Removal of intermediate data.</italic></bold> The primary function of all basecalling software is to generate a FASTQ file containing the genomic sequence and associated quality scores representing the read stored in each FAST5 file. While some software tools, such as
<monospace>nanopolish</monospace>
<sup><xref rid="ref-7" ref-type="bibr">7</xref></sup> and
<monospace>nanoraw</monospace>
<sup><xref rid="ref-8" ref-type="bibr">8</xref></sup>, do make use of the signal, event detection and basecalled datasets, the large majority of analyses, including alignment, assembly and variant calling, simply require access to the FASTQ data. Picopore allows users to remove the intermediate data generated during the process of converting raw signal to FASTQ, while retaining the signal data, should they ever want to re-basecall the run to attain improved FASTQ data or to access this intermediate data at a later stage.</p></sec><sec><title>Operation</title><p>
<bold><italic>Requirements.</italic></bold> Picopore is built in Python 2.7 (
<ext-link ext-link-type="uri" xlink:href="https://www.python.org">www.python.org</ext-link>) and runs on Windows, Mac OS and Linux. It requires the following Python packages:</p><list list-type="bullet"><list-item><p>
<monospace>h5py 2.2.0</monospace> or later</p></list-item><list-item><p>
<monospace>future</monospace>
</p></list-item><list-item><p>
<monospace>watchdog 0.8.3</monospace> or later</p></list-item></list><p>In addition, Picopore requires HDF5 1.8.4 or newer, with development headers (
<monospace>libhdf5-dev</monospace> or similar), including the binary utility
<monospace>h5repack</monospace>, which is included therein.</p><p>
<bold><italic>Installation.</italic></bold> The latest stable version of Picopore is available on PyPi and bioconda (see Software availability). It can be installed according to the following commands:</p><p>Linux and Mac OS:
<monospace>pip install picopore</monospace>
</p><p>Windows:
<monospace>conda install picopore -c bioconda -c conda-forge</monospace>
</p><p>Picopore can also be installed from source (see Software availability) using the command
<monospace>python setup.py install.</monospace>
</p><p>
<bold><italic>Execution.</italic></bold> Picopore is run from the command-line as a binary executable as follows:</p><p>
<monospace>picopore --mode lossless --prefix shrunk [...] /path/to/fast5/</monospace>
</p><p>Picopore accepts both folders and FAST5 files as input. If a folder is provided, it will be searched recursively for FAST5 files, and all files found will be considered as input.</p><p>There are three modes of compression available, each of which performs a selection of the techniques described above.</p><list list-type="bullet"><list-item><p>
<monospace>lossless:</monospace> performs built-in GZIP compression and dynamic memory allocation for variables. This mode is both fast and allows continued analysis of data by any existing software.</p></list-item><list-item><p>
<monospace>deep-lossless:</monospace> performs lossless compression, as well as collapsing of file structure and indexing of duplicated data. This mode obtains the best compression results without removing any data, but comes at the cost of requiring reversion before most software tools can analyse the data.</p></list-item><list-item><p>
<monospace>raw:</monospace> performs lossless compression, as well as removal of intermediate data, partially reverting files to the "raw" pre-basecalled file format. This mode is fast, obtains the best filesize reduction, and allows continued analysis by tools that extract FASTQ and related data, but comes at the cost of removing intermediate basecalling data required for some niche applications, such as
<monospace>nanopolish</monospace>, which cannot be retrieved by Picopore (but can be regenerated using basecalling software.)</p></list-item></list><p>Optional arguments include:</p><list list-type="bullet"><list-item><p>
<monospace>--revert:</monospace> reverts lossless compressed files to their original state to allow high-speed access at the cost of disk usage;</p></list-item><list-item><p>
<monospace>--realtime:</monospace> watches for file creation in the given input folder(s) and performs the selected mode of compression on new files in real time to reduce the footprint of an ongoing MinION run;</p></list-item><list-item><p>
<monospace>--prefix:</monospace> allows the user to specify a filename prefix to prevent in-place overwriting of files;</p></list-item><list-item><p>
<monospace>--group:</monospace> allows the user to select only one of the analysis groups on files that have been processed by multiple basecallers;</p></list-item><list-item><p>
<monospace>--threads:</monospace> allows the user to specify the number of files to be processed in parallel.</p></list-item></list></sec></sec><sec sec-type="results"><title>Results</title><p>To demonstrate the effectiveness of Picopore&#8217;s compression, we ran all three modes of compression on four toy datasets of 40 FAST5 files run using the R9 SQK-RAD001 (R9_1D), R9 SQK-NSK007 (R9_2D), R9.4 SQK-RAD002 (R9.4_1D) and R9.4 SQK-LSK208 (R9.4_2D) protocols. The files for the toy datasets were chosen randomly from the
<italic>pass</italic> folder of four MinION datasets generated at the Australian Genome Research Facility. For the R9_1D dataset, DNA was extracted from the lung of a juvenile 129/Sv mouse using the DNeasy Blood and Tissue kit (Qiagen). For the R9_2D, R9.4_1D and R9.4_2D datasets, DNA was extracted from a culture of
<italic>escherichia coli</italic> K12 MG1655 using the Blood &amp; Cell Culture DNA Kit (Qiagen). Quality control performed by visualisation on the TapeStation (Agilent). Run metadata is shown in
<xref ref-type="table" rid="T1">Table 1</xref>.</p><table-wrap id="T1" orientation="portrait" position="anchor"><label>Table 1. </label><caption><title>Metadata for MinION datasets sampled to produce toy datasets.</title></caption></table-wrap><p>Each file was compressed and tarred using each of five methods: no compression,
<monospace>gzip</monospace> (applied after tarring, as per convention),
<monospace>picopore lossless, picopore deep-lossless</monospace> and
<monospace>picopore raw</monospace>. Each of these methods was run on a single core, and results were normalised for the number of bases in each dataset, obtained using
<monospace>poretools stats</monospace>
<sup><xref rid="ref-9" ref-type="bibr">9</xref></sup>.
<xref ref-type="fig" rid="f1">Figure 1</xref> shows that
<monospace>lossless</monospace> achieves only slightly less compression than
<monospace>gzip</monospace>, giving an average reduction in size of 25% compared to
<monospace>gzip&#8217;s</monospace> 32%, while
<monospace>deep-lossless</monospace> and
<monospace>raw</monospace> perform significantly better, giving average reductions in size of 44% and 88%, respectively. A dependent sample t-test was run on individual compressed file sizes.
<xref ref-type="table" rid="T2">Table 2</xref> shows that each successive method of compression (excluding
<monospace>gzip</monospace>, which does not compress individual files) gives a significant reduction in size from the previous.
<xref ref-type="fig" rid="f2">Figure 2</xref> shows that while all of Picopore&#8217;s compression methods are much slower than
<monospace>gzip, raw</monospace> is the fastest of these, followed by
<monospace>lossless</monospace> and
<monospace>deep-lossless</monospace>. Note that the tarring time makes up a maximum of 0.5 s/megabase in each case and is largely negligible.</p><fig fig-type="figure" id="f1" orientation="portrait" position="anchor"><label>Figure 1. </label><caption><title>Size of tarball containing FAST5 files compressed using various methods.</title></caption><graphic xlink:href="f1000research-6-13857-g0000"/></fig><fig fig-type="figure" id="f2" orientation="portrait" position="anchor"><label>Figure 2. </label><caption><title>Time taken for single-thread compression and tarring of FAST5 files using various methods.</title></caption><graphic xlink:href="f1000research-6-13857-g0001"/></fig><table-wrap id="T2" orientation="portrait" position="anchor"><label>Table 2. </label><caption><title>Significance of difference in size of files compressed with different methods using a dependent sample t-test.</title></caption></table-wrap><p>To demonstrate the effectiveness of Picopore&#8217;s multithreading, we ran
<monospace>deep-lossless</monospace>, the most computationally expensive of the Picopore compression methods, on each dataset using 1, 2, 5, and 10 cores.
<xref ref-type="fig" rid="f3">Figure 3</xref> shows an almost linear improvement in speed, showing that even on a small dataset, the multithreading overhead is relatively small.</p><fig fig-type="figure" id="f3" orientation="portrait" position="anchor"><label>Figure 3. </label><caption><title>Speed of deep lossless compression of FAST5 files using multiple threads.</title><p>The dotted blue line shows the theoretical linear maximum increase in speed for the R9 2D run.</p></caption><graphic xlink:href="f1000research-6-13857-g0002"/></fig></sec><sec sec-type="discussion"><title>Discussion</title><p>It is clear that, due to the enormous reduction in disk space and low total time requirements, Picopore&#8217;s raw compression is the optimal compression mode for users who have no need for the intermediate event detection and basecalling data. The superior running speed of lossless compression over deep lossless compression may mean that this is the preferred method for users who wish to retain all data and need to compress the data in real-time; however, for users with these data retention requirements who wish to store data longterm on their file server, for whom speed of compression is not an issue, deep lossless compression provides the best option. All Picopore compression methods provide significant improvements over uncompressed or traditionally compressed files, and
<monospace>lossless</monospace> and
<monospace>raw</monospace> methods carry the added benefit that files can be processed using analysis tools in compressed form.</p><p>Although the compression has a high CPU cost, the capability of Picopore to run on multiple threads signifies that, if computing resources are available, the files can be compressed in a reasonably short period of time. Finally, extrapolating the running time per file to a real-time run over 48 hours, Picopore has the capability to run
<monospace>lossless</monospace> (&lt;= 55 s/Mb) and
<monospace>raw</monospace> (&lt;= 45 s/Mb) modes on a single core in real time for flowcell yield up to 3Gb (57s/Mb). While
<monospace>deep-lossless</monospace> requires multiple cores to keep pace with the MinION data generation, this adds little to the overall computational cost, and can reach real-time speed with just five cores (&lt;= 33 s/Mb). Note that experienced users of the MinION have reported single flowcell yields of above 12 Gb (
<ext-link ext-link-type="uri" xlink:href="http://omicsomics.blogspot.com.au/2017/03/catching-up-on-oxford-nanopore-news.html">http://omicsomics.blogspot.com.au/2017/03/catching-up-on-oxford-nanopore-news.html</ext-link>), for which lossless and raw compression would also require multithreading. As data generation continues to increase in scale, further gains could be made by incorporating the compression methods used in Picopore into the basecalling software itself.</p><p>As of the 17th of March 2017, ONT announced that the version 1.5 of their MinKNOW software will not store the intermediate data by default (
<ext-link ext-link-type="uri" xlink:href="https://nanoporetech.com/sites/default/files/s3/MinION-Computer-Requirements-March-17_Final.pdf">https://nanoporetech.com/sites/default/files/s3/MinION-Computer-Requirements-March-17_Final.pdf</ext-link>), effectively mimicking Picopore&#8217;s raw compression mode. Picopore&#8217;s three modes of compression will be maintained for use on datasets generated before the upcoming release of MinNOW 1.5, and for those users who choose to store the event data beyond this point.</p></sec><sec sec-type="conclusions"><title>Conclusions</title><p>ONT&#8217;s MinION and PromethION sequencing devices promise to produce increasingly large datasets as the technology progresses toward commercial release. The disk space required to run and store one or multiple datasets from these poses a problem for service providers and users alike; Picopore provides three different solutions that cater to the different needs of users.</p><p>Although the trade-off between data retention, computing time and disk space is a compromise that cannot be perfectly resolved, Picopore provides user options to reduce their ONT datasets to the minimum viable size based on their intended use. This may involve real-time compression for laptop disk space concerns, reduction of bandwidth usage for transfer of datasets between laboratories, or reduction of the storage footprint on shared data servers.</p></sec><sec><title>Data availability</title><p>The data referenced by this article are under copyright with the following copyright statement: Copyright: &#169; 2017 Gigante S</p><p>Data associated with the article are available under the terms of the Creative Commons Zero "No rights reserved" data waiver (CC0 1.0 Public domain dedication).
<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/"/>
</p><p>The toy dataset used for the analyses in this paper is available on Zenodo: Toy datasets for compression by Picopore, doi:
<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5281/zenodo.321957">10.5281/zenodo.321957</ext-link>.</p></sec><sec><title>Software availability</title><p>Software for Linux or Mac OS available from:
<ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/picopore">https://pypi.python.org/pypi/picopore</ext-link>
</p><p>Software for Linux, Mac OS and Windows available from:
<ext-link ext-link-type="uri" xlink:href="https://anaconda.org/bioconda/picopore">https://anaconda.org/bioconda/picopore</ext-link>
</p><p>Source code available from:
<ext-link ext-link-type="uri" xlink:href="https://github.com/scottgigante/picopore">https://github.com/scottgigante/picopore</ext-link>
</p><p>Archived source code from:
<ext-link ext-link-type="uri" xlink:href="https://dx.doi.org/10.5281/zenodo.438509">https://dx.doi.org/10.5281/zenodo.438509</ext-link>
</p><p>License: GPLv3</p></sec><sec><title>Author endorsement</title><p>Chris Woodruff confirms that the author has an appropriate level of expertise to conduct this research, and confirms that the submission is of an acceptable scientific standard. Chris Woodruff declares he has no competing interests. Affiliation: Visiting Scientist at Bioinformatics Division of Walter and Eliza Hall Institute of Medical Research, Parkville, Victoria, Australia</p></sec></body><back><ack><title>Acknowledgments</title><p>The author is grateful to Terry Speed and Chris Woodruff from the Walter &amp; Eliza Hall Institute of Medical Research for their supervision of this and related work, to Alexis Lucattini and Lavinia Gordon from the Australian Genome Research Facility and Matthew Ritchie, Andrew Keniry and Marnie Blewitt from the Walter &amp; Eliza Hall Institute of Medical Research for their assistance in providing MinION data and discussing ongoing analyses, to Biomedical Research Victoria and CSL Limited for the provision of a stipend to begin his work at the Walter &amp; Eliza Hall Institute, and to the organisers and participants of PorecampAU for inspiring this work.</p></ack><ref-list><ref id="ref-1"><label>1</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Eisenstein</surname><given-names>M</given-names></name></person-group>:
<article-title>Oxford Nanopore announcement sets sequencing sector abuzz.</article-title>
<source><italic>Nat Biotechnol.</italic></source>
<year>2012</year>;<volume>30</volume>(<issue>4</issue>):<fpage>295</fpage>&#8211;<lpage>296</lpage>.
<pub-id pub-id-type="doi">10.1038/nbt0412-295</pub-id>
<?supplied-pmid 22491260?><pub-id pub-id-type="pmid">22491260</pub-id></mixed-citation></ref><ref id="ref-2"><label>2</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Quick</surname><given-names>J</given-names></name><name><surname>Loman</surname><given-names>NJ</given-names></name><name><surname>Duraffour</surname><given-names>S</given-names></name><etal/></person-group>:
<article-title>Real-time, portable genome sequencing for Ebola surveillance.</article-title>
<source><italic>Nature.</italic></source>
<year>2016</year>;<volume>530</volume>(<issue>7589</issue>):<fpage>228</fpage>&#8211;<lpage>232</lpage>.
<pub-id pub-id-type="doi">10.1038/nature16996</pub-id>
<!--<pub-id pub-id-type="pmcid">4817224</pub-id>-->
<?supplied-pmid 26840485?><pub-id pub-id-type="pmid">26840485</pub-id></mixed-citation></ref><ref id="ref-3"><label>3</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Ip</surname><given-names>CL</given-names></name><name><surname>Loose</surname><given-names>M</given-names></name><name><surname>Tyson</surname><given-names>JR</given-names></name><etal/></person-group>:
<article-title>MinION Analysis and Reference Consortium: Phase 1 data release and analysis [version 1; referees: 2 approved].</article-title>
<source><italic>F1000Res.</italic></source>
<year>2015</year>;<volume>4</volume>:<fpage>1075</fpage>.
<pub-id pub-id-type="doi">10.12688/f1000research.7201.1</pub-id>
<!--<pub-id pub-id-type="pmcid">4722697</pub-id>-->
<?supplied-pmid 26834992?><pub-id pub-id-type="pmid">26834992</pub-id></mixed-citation></ref><ref id="ref-4"><label>4</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Tyson</surname><given-names>JR</given-names></name><name><surname>O&#8217;Neil</surname><given-names>NJ</given-names></name><name><surname>Jain</surname><given-names>M</given-names></name><etal/></person-group>:
<article-title>Whole genome sequencing and assembly of a Caenorhabditis elegans genome with complex genomic rearrangements using the MinION sequencing device.</article-title>
<source><italic>bioRxiv.</italic></source>
<year>2017</year>
<pub-id pub-id-type="doi">10.1101/099143</pub-id>
</mixed-citation></ref><ref id="ref-5"><label>5</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Jain</surname><given-names>M</given-names></name><name><surname>Olsen</surname><given-names>HE</given-names></name><name><surname>Paten</surname><given-names>B</given-names></name><etal/></person-group>:
<article-title>The Oxford Nanopore MinION: delivery of nanopore sequencing to the genomics community.</article-title>
<source><italic>Genome Biol.</italic></source>
<year>2016</year>;<volume>17</volume>(<issue>1</issue>):<fpage>239</fpage>.
<pub-id pub-id-type="doi">10.1186/s13059-016-1103-0</pub-id>
<!--<pub-id pub-id-type="pmcid">5124260</pub-id>-->
<?supplied-pmid 27887629?><pub-id pub-id-type="pmid">27887629</pub-id></mixed-citation></ref><ref id="ref-6"><label>6</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>van der Walt</surname><given-names>S</given-names></name><name><surname>Colbert</surname><given-names>SC</given-names></name><name><surname>Varoquaux</surname><given-names>G</given-names></name></person-group>:
<article-title>The numpy array: a structure for efficient numerical computation.</article-title>
<source><italic>Comput Sci Eng.</italic></source>
<year>2011</year>;<volume>13</volume>(<issue>2</issue>):<fpage>22</fpage>&#8211;<lpage>30</lpage>.
<pub-id pub-id-type="doi">10.1109/MCSE.2011.37</pub-id>
</mixed-citation></ref><ref id="ref-7"><label>7</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Loman</surname><given-names>NJ</given-names></name><name><surname>Quick</surname><given-names>J</given-names></name><name><surname>Simpson</surname><given-names>JT</given-names></name></person-group>:
<article-title>A complete bacterial genome assembled
<italic>de novo</italic> using only nanopore sequencing data.</article-title>
<source><italic>Nat Methods.</italic></source>
<year>2015</year>;<volume>12</volume>(<issue>8</issue>):<fpage>733</fpage>&#8211;<lpage>735</lpage>.
<pub-id pub-id-type="doi">10.1038/nmeth.3444</pub-id>
<?supplied-pmid 26076426?><pub-id pub-id-type="pmid">26076426</pub-id></mixed-citation></ref><ref id="ref-8"><label>8</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Stoiber</surname><given-names>MH</given-names></name><name><surname>Quick</surname><given-names>J</given-names></name><name><surname>Egan</surname><given-names>R</given-names></name><etal/></person-group>:
<article-title>
<italic>De novo</italic> identification of DNA modifications enabled by genome-guided nanopore signal processing.</article-title>
<source><italic>bioRxiv.</italic></source>
<year>2016</year>
<pub-id pub-id-type="doi">10.1101/094672</pub-id>
</mixed-citation></ref><ref id="ref-9"><label>9</label><mixed-citation publication-type="journal">
<person-group person-group-type="author"><name><surname>Loman</surname><given-names>NJ</given-names></name><name><surname>Quinlan</surname><given-names>AR</given-names></name></person-group>:
<article-title>Poretools: a toolkit for analyzing nanopore sequence data.</article-title>
<source><italic>Bioinformatics.</italic></source>
<year>2014</year>;<volume>30</volume>(<issue>23</issue>):<fpage>3399</fpage>&#8211;<lpage>401</lpage>.
<pub-id pub-id-type="doi">10.1093/bioinformatics/btu555</pub-id>
<!--<pub-id pub-id-type="pmcid">4296151</pub-id>-->
<?supplied-pmid 25143291?><pub-id pub-id-type="pmid">25143291</pub-id></mixed-citation></ref></ref-list></back><sub-article id="report26511" article-type="peer-review"><front-stub><article-id pub-id-type="doi">10.5256/f1000research.13857.r26511</article-id><title-group><article-title>Referee response for version 3</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Eccles</surname><given-names>David A.</given-names></name><xref ref-type="aff" rid="r26511a1">1</xref><xref ref-type="aff" rid="r26511a2">2</xref><role>Referee</role><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4634-4995</contrib-id></contrib><aff id="r26511a1">
<label>1</label>Malaghan Institute of Medical Research, Wellington, New Zealand</aff><aff id="r26511a2">
<label>2</label>Gringene Bioinformatics, Wellington, New Zealand</aff></contrib-group><author-notes><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>David Eccles was a demonstrator / speaker at PoreCampAU 2017, an event which inspired the creation of Picopore.</p></fn></author-notes><pub-date pub-type="epub"><day>29</day><month>9</month><year>2017</year></pub-date><related-article id="d35e1185" related-article-type="peer-reviewed-article" ext-link-type="doi" xlink:href="10.12688/f1000research.11022.3">Version 3</related-article><custom-meta-group><custom-meta><meta-name>recommendation</meta-name><meta-value>approve</meta-value></custom-meta></custom-meta-group></front-stub><body><p>No further comments.</p><p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p></body></sub-article><sub-article id="report21836" article-type="peer-review"><front-stub><article-id pub-id-type="doi">10.5256/f1000research.12305.r21836</article-id><title-group><article-title>Referee response for version 2</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Eccles</surname><given-names>David A.</given-names></name><xref ref-type="aff" rid="r21836a1">1</xref><xref ref-type="aff" rid="r21836a2">2</xref><role>Referee</role><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4634-4995</contrib-id></contrib><aff id="r21836a1">
<label>1</label>Malaghan Institute of Medical Research, Wellington, New Zealand</aff><aff id="r21836a2">
<label>2</label>Gringene Bioinformatics, Wellington, New Zealand</aff></contrib-group><author-notes><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>David Eccles was a demonstrator / speaker at PoreCampAU 2017, an event which inspired the creation of Picopore.</p></fn></author-notes><pub-date pub-type="epub"><day>13</day><month>4</month><year>2017</year></pub-date><related-article id="d35e1243" related-article-type="peer-reviewed-article" ext-link-type="doi" xlink:href="10.12688/f1000research.11022.2">Version 2</related-article><custom-meta-group><custom-meta><meta-name>recommendation</meta-name><meta-value>approve</meta-value></custom-meta></custom-meta-group></front-stub><body><p>The updated version of Picopore fixes all the issues that I reported previously.</p><p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p></body></sub-article><sub-article id="report20757" article-type="peer-review"><front-stub><article-id pub-id-type="doi">10.5256/f1000research.11886.r20757</article-id><title-group><article-title>Referee response for version 1</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Eccles</surname><given-names>David A.</given-names></name><xref ref-type="aff" rid="r20757a1">1</xref><xref ref-type="aff" rid="r20757a2">2</xref><role>Referee</role><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0003-4634-4995</contrib-id></contrib><aff id="r20757a1">
<label>1</label>Malaghan Institute of Medical Research, Wellington, New Zealand</aff><aff id="r20757a2">
<label>2</label>Gringene Bioinformatics, Wellington, New Zealand</aff></contrib-group><author-notes><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>David Eccles was a demonstrator / speaker at PoreCampAU 2017, an event which inspired the creation of Picopore.</p></fn></author-notes><pub-date pub-type="epub"><day>21</day><month>3</month><year>2017</year></pub-date><related-article id="d35e1301" related-article-type="peer-reviewed-article" ext-link-type="doi" xlink:href="10.12688/f1000research.11022.1">Version 1</related-article><custom-meta-group><custom-meta><meta-name>recommendation</meta-name><meta-value>approve</meta-value></custom-meta></custom-meta-group></front-stub><body><p>It's quite difficult to knock out a useful software tool for Oxford Nanopore devices before they change the protocol, or release their own tool that does similar things. Scott Gigante has done an admirable job in this regard by developing and publishing a much-needed tool within the space of time between two updates of the MinKNOW software (v1.4 -&gt; v1.5). While the newest version of MinKNOW no longer produces event data by default in the FAST5 files (substantially reducing file sizes), Scott's tool will still be useful for existing file sets and event-called files in the future.</p><p>
<bold>Manuscript</bold>
</p><p> The manuscript is sufficiently verbose for a short software release publication: explaining modes of operation, demonstrating differences in file compression in different modes, and showing processing speed on different datasets.</p><p>
<bold>Title / abstract</bold>
</p><p> The title and abstract sufficiently summarise the manuscript</p><p>
<bold>Introduction</bold>
<list list-type="bullet"><list-item><p>"ONT'" -&gt; "ONT's"</p></list-item><list-item><p>"The drastic increase... the limiting factor in uptake of the technology" -- cite, alter, or remove. My experience is that storage space is only an issue for *existing* users of the technology, not people deciding whether or not to use the MinION.</p></list-item></list>
<bold>Operation</bold>
<list list-type="bullet"><list-item><p>At least one running example in the 'Execution' section would be useful, similar to the Usage section of the pypi repository. Something like this:</p><p> 'picopore --mode lossless --prefix shrunk '</p></list-item></list>
<bold>Discussion</bold>
<list list-type="bullet"><list-item><p>The introduction suggests ONT's internal runs are approaching 2M reads, yet the discussion suggests 0.5M reads per run. This is the difference between real-time processing and almost a week of waiting for processing to finish.</p></list-item><list-item><p>The discussion mentions future potential capabilities for basecalling software, but not Picopore itself. Are there any planned updates on the horizon?</p></list-item></list>
<bold>Software testing</bold>
</p><p> The current version of Picopore (installed by
<italic>pip</italic> on 2017-Mar-17) had a few minor issues on my system that would prevent most users from being able to run the software. Once these issues were dealt with, Picopore was able to substantially reduce the file size of two FAST5 files with wildly different internal structures, while retaining important base call and raw signal information.</p><p>
<bold>Installation</bold>
</p><p> The program appeared to install fine on my Debian Linux desktop by running '
<italic>pip install picopore</italic>', as per the manuscript instructions. Unfortunately there was a problem with module import when showing the help dialog:</p><p> &#160;&#160;&#160; $ picopore -h</p><p> &#160;&#160;&#160; Traceback (most recent call last):</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/bin/picopore", line 7, in</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; from picopore.__main__ import main</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 22, in</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; from picopore.parse_args import parseArgs, checkSure</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/parse_args.py", line 20, in</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; from builtins import input</p><p> &#160;&#160;&#160; ImportError: No module named builtins</p><p> Commenting out the offending line in 'parse_args.py' fixed this error.</p><p>
<bold>Use of other data</bold>
</p><p> Instead of using the provided data, I did a stress test of sorts on Picopore by running it on two files which were put in subdirectories of a parent directory:
<list list-type="order"><list-item><p>A 2kb R7.3 tomato read produced by me in March 2016 (channel 342, read 13) [
<ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/403459#.WND398_yjcs">David Eccles' read</ext-link>]</p></list-item><list-item><p>A 771kb R9.4 E. coli read produced by Nick Loman and Josh Quick in March 2017 [
<ext-link ext-link-type="uri" xlink:href="https://github.com/nickloman/massive-nanopore-silliness">Nick Loman &amp; Josh Quick's read</ext-link>]</p></list-item></list>
<bold>Equivalence testing</bold>
</p><p> It is appreciated that Picopore includes a test for equivalence to make sure information is retained. Picopore was able to recursively descend through the directories, but the deep-lossless equivalence test reported failure for both of these sequences. In the case of the second file, it appears that the only failure was a missing //Picopore directory (which should probably be excluded from the failure modes):</p><p>
<bold>- Equivalence test 1</bold>
</p><p> &#160;&#160;&#160; $ picopore --prefix pico_ -t 10 --test --mode deep-lossless tested_picopore</p><p> &#160;&#160;&#160; Performing deep lossless compression on 2 files...</p><p> &#160;&#160;&#160; No conversion path for dtype: dtype(' &#160;&#160;&#160; Complete.</p><p> &#160;&#160;&#160; Original size:&#160;&#160; 67048849</p><p> &#160;&#160;&#160; Compressed size: 66616200</p><p> &#160;&#160;&#160; Checking equivalence of /home/gringer/bioinf/reviews/tested_picopore/1/lambda_TEDxWellington_DavidEccles_3637_1_ch342_read13_strand.fast5 (file 1) and /home/gringer/bioinf/reviews/tested_picopore/1/picopore.test.lambda_TEDxWellington_DavidEccles_3637_1_ch342_read13_strand.fast5 (file 2)...</p><p> &#160;&#160;&#160; Failure: //Analyses missing from file 2</p><p> &#160;&#160;&#160; Failure: //Raw missing from file 2</p><p> &#160;&#160;&#160; Failure: //Sequences missing from file 2</p><p> &#160;&#160;&#160; Failure: //UniqueGlobalKey missing from file 2</p><p> &#160;&#160;&#160; Failure: //Picopore missing from file 1</p><p> &#160;&#160;&#160; Traceback (most recent call last):</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/bin/picopore", line 11, in</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; sys.exit(main())</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 80, in main</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; runTest(args)</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 63, in runTest</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; checkEquivalent(f, compressedFile)</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/test.py", line 72, in checkEquivalent</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; recursiveCheckEquivalent(file1, file2, group.name)</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/test.py", line 56, in recursiveCheckEquivalent</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; recursiveCheckEquivalent(file1, file2, "/".join([name, key]))</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/test.py", line 50, in recursiveCheckEquivalent</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; if not attr2[key] == value:</p><p> &#160;&#160;&#160; ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()</p><p>
<bold>- Equivalence test 2</bold>
</p><p> &#160;&#160;&#160; $ picopore --prefix pico_ -t 10 --test --mode deep-lossless tested_picopore/2</p><p> &#160;&#160;&#160; Performing deep lossless compression on 1 files...</p><p> &#160;&#160;&#160; No conversion path for dtype: dtype(' &#160;&#160;&#160; Complete.</p><p> &#160;&#160;&#160; Original size:&#160;&#160; 65686831</p><p> &#160;&#160;&#160; Compressed size: 65688039</p><p> &#160;&#160;&#160; Checking equivalence of /home/gringer/bioinf/reviews/tested_picopore/2/loman_771kb_ch181_read4882_strand.fast5 (file 1) and /home/gringer/bioinf/reviews/tested_picopore/2/picopore.test.loman_771kb_ch181_read4882_strand.fast5 (file 2)...</p><p> &#160;&#160;&#160; Failure: //Picopore missing from file 1</p><p> &#160;&#160;&#160; Complete.</p><p>
<bold>Confirmation dialog</bold>
</p><p> The confirmation of writing files is also a great idea, but produces an error when both responses are given. I wonder if this is due to python version incompatibilities (and my attempted prior bugfix):</p><p>
<bold>- Confirmation test 1</bold>
</p><p> &#160;&#160;&#160; $ picopore --prefix pico_ -t 10 --mode raw tested_picopore</p><p> &#160;&#160;&#160; Performing raw compression with FASTQ and no summary on 2 files...</p><p> &#160;&#160;&#160; Are you sure? (yes|no): no</p><p> &#160;&#160;&#160; Traceback (most recent call last):</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/bin/picopore", line 11, in</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; sys.exit(main())</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 84, in main</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; run(args.revert, args.mode, args.input, args.y, args.threads, args.group, args.prefix, args.fastq, args.summary)</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 34, in run</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; if y or checkSure():</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/parse_args.py", line 109, in checkSure</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; response = input("Are you sure? (yes|no): ")</p><p> &#160;&#160;&#160;&#160;&#160; File "", line 1, in</p><p> &#160;&#160;&#160; NameError: name 'no' is not defined</p><p>
<bold>- Confirmation test 2</bold>
</p><p> &#160;&#160;&#160; $ picopore --prefix pico_ -t 10 --mode raw tested_picopore</p><p> &#160;&#160;&#160; Performing raw compression with FASTQ and no summary on 2 files...</p><p> &#160;&#160;&#160; Are you sure? (yes|no): yes</p><p> &#160;&#160;&#160; Traceback (most recent call last):</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/bin/picopore", line 11, in</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; sys.exit(main())</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 84, in main</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; run(args.revert, args.mode, args.input, args.y, args.threads, args.group, args.prefix, args.fastq, args.summary)</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/__main__.py", line 34, in run</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; if y or checkSure():</p><p> &#160;&#160;&#160;&#160;&#160; File "/usr/local/lib/python2.7/dist-packages/picopore/parse_args.py", line 109, in checkSure</p><p> &#160;&#160;&#160;&#160;&#160;&#160;&#160; response = input("Are you sure? (yes|no): ")</p><p> &#160;&#160;&#160;&#160;&#160; File "", line 1, in</p><p> &#160;&#160;&#160; NameError: name 'yes' is not defined</p><p> The 'input' function in my version of python does an evaluation after reading input; replacing 'input(...)' with 'raw_input(...)' fixed this error.</p><p> After these errors were fixed enough to allow the code to proceed, Picopore was able to successfully strip out event data (in 'raw' mode) from both the R7.3 and R9.4 FAST5 files, while retaining called FASTQ sequences and raw signal (i.e. it did what it said on the box). File sizes were reduced from 1.3MB down to 577kB for the R7.3 file, and 63Mb down to 9.8MB for the R9.4 file.</p><p> Picopore also retained the 'Model' section from the R7.3 FAST5 files, indicating that it probably does a blacklist removal of known analysis components and retains unknown things in the file hierarchy; this should ensure that Picopore will be reasonably forward-compatible for future file format changes even without updates.</p><p>
<bold>Threaded mode</bold>
</p><p> I tried to run Picopore on the toy dataset in single-threaded mode, broke out of it because it was taking too long, then restarted in threaded mode and realised I wanted to stop
<italic>that</italic> as well [Picopore leaves temporary files of a predictable name in the working directories that are not deleted on failure, and I had not deleted them between runs]. Unfortunately, when running Picopore in threaded mode, I was not able to break out of the running program (and needed to kill it using another console).</p><p>
<bold>Equivalence check on included dataset</bold>
</p><p> Running the equivalence check in
<italic>lossless</italic> mode on the provided toy dataset produced no errors. No additional testing was done on the toy dataset.</p><p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p></body><sub-article id="comment2626" article-type="response"><front-stub><contrib-group><contrib contrib-type="author"><name><surname>Gigante</surname><given-names>Scott</given-names></name><aff>Walter &amp; Eliza Hall Institute of Medical Research, Australia</aff></contrib></contrib-group><author-notes><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>No competing interests were disclosed.</p></fn></author-notes><pub-date pub-type="epub"><day>10</day><month>4</month><year>2017</year></pub-date></front-stub><body><p>Dear Dr. Eccles,</p><p> Thank you for your review.</p><p> I have amended the manuscript according to your suggested revisions.</p><p> You note that an equivalent to Picopore's
<italic>raw</italic>&#160;compression is now the default behaviour for MinKNOW v1.5. I will continue to examine the output from the latest version of MinKNOW to find new mechanisms for size reduction; however, in the short term, I anticipate that Picopore's major use cases will be to reduce the size of older datasets, and to reduce the size of datasets produced by power users who continue to use MinKNOW with event data enabled.</p><p> Thank you also for your extensive testing of Picopore. The errors you pointed out have been resolved in the latest version of Picopore, available on Pypi, Bioconda and Github.</p><p> Thank you once again for your comments.</p><p> Kind regards,</p><p> Scott Gigante</p></body></sub-article></sub-article><sub-article id="report20761" article-type="peer-review"><front-stub><article-id pub-id-type="doi">10.5256/f1000research.11886.r20761</article-id><title-group><article-title>Referee response for version 1</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Loose</surname><given-names>Matthew William</given-names></name><xref ref-type="aff" rid="r20761a1">1</xref><role>Referee</role></contrib><aff id="r20761a1">
<label>1</label>School of Life Sciences, University of Nottingham, Nottingham, UK</aff></contrib-group><author-notes><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>No competing interests were disclosed.</p></fn></author-notes><pub-date pub-type="epub"><day>20</day><month>3</month><year>2017</year></pub-date><related-article id="d35e1769" related-article-type="peer-reviewed-article" ext-link-type="doi" xlink:href="10.12688/f1000research.11022.1">Version 1</related-article><custom-meta-group><custom-meta><meta-name>recommendation</meta-name><meta-value>approve</meta-value></custom-meta></custom-meta-group></front-stub><body><p>Picopore is a well written package that installs quickly and easily, has clear guidance on its use and addresses a relevant issue in Nanopore sequencing at this time.</p><p> The tools function as described (certainly on OSX).</p><p> I have some reservations about reporting speed in terms of reads/s. I would like to see metrics which take in to account the number of bases being processed per unit time as I suspect the alternative compression options will perform differently by this metric.&#160;</p><p> I also have some reservations about the use of some modes of picopore compression. Users will need to think carefully about the application of modes which are not immediately compatible with existing tool chains. Given recent announcements from Nanopore with respect to provision of off line base calling I suspect a better long term storage of data will be as simple raw files with an associated fastq.gz.</p><p>I have read this submission. I believe that I have an appropriate level of expertise to confirm that it is of an acceptable scientific standard.</p></body><sub-article id="comment2625" article-type="response"><front-stub><contrib-group><contrib contrib-type="author"><name><surname>Gigante</surname><given-names>Scott</given-names></name><aff>Walter &amp; Eliza Hall Institute of Medical Research, Australia</aff></contrib></contrib-group><author-notes><fn fn-type="COI-statement"><p>
<bold>Competing interests: </bold>No competing interests were disclosed.</p></fn></author-notes><pub-date pub-type="epub"><day>10</day><month>4</month><year>2017</year></pub-date></front-stub><body><p>Dear Dr. Loose,</p><p> Thank you for your review.</p><p> I would like to note that since the compression modes were tested all on the same dataset of a total of 160 files across four runs, the number of bases is fixed, with a total of 1.7 Mb in each instance. Thus, the comparison of speeds and sizes between compression modes will be equivalent by either metric. However, I agree that bases/s is a more useful metric than reads/s in comparing results between different protocols, and have included this in my analyses.</p><p> In regards to your recommended mode of long term storage, this is indeed my expectation and is Picopore&#8217;s recommended mode for end-users. Picopore&#8217;s
<italic>raw</italic> mode stores by default only the raw signal and the FASTQ, which is compressed using HDF5&#8217;s built-in GZIP compression. Picopore&#8217;s
<italic>lossless</italic> and
<italic>deep-lossless</italic> modes are aimed at developers who wish to retain the event data for active use or long-term storage respectively; I acknowledge that these use cases are only suitable for a particular subgroup of users.</p><p> Thank you once again for your comments.</p><p> Kind regards,</p><p> Scott Gigante</p></body></sub-article></sub-article></article>