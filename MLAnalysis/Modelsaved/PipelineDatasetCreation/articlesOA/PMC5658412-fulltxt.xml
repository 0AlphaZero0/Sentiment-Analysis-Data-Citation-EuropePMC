<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">Sci Rep</journal-id><journal-id journal-id-type="iso-abbrev">Sci Rep</journal-id><journal-title-group><journal-title>Scientific Reports</journal-title></journal-title-group><issn pub-type="epub">2045-2322</issn><publisher><publisher-name>Nature Publishing Group UK</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">5658412</article-id><article-id pub-id-type="publisher-id">14400</article-id><article-id pub-id-type="doi">10.1038/s41598-017-14400-1</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>UPS-indel: a Universal Positioning System for Indels</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0001-6263-631X</contrib-id><name><surname>Hasan</surname><given-names>Mohammad Shabbir</given-names></name><address><email>shabbir5@vt.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author"><name><surname>Wu</surname><given-names>Xiaowei</given-names></name><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author"><name><surname>Watson</surname><given-names>Layne T.</given-names></name><xref ref-type="aff" rid="Aff1">1</xref><xref ref-type="aff" rid="Aff3">3</xref><xref ref-type="aff" rid="Aff4">4</xref></contrib><contrib contrib-type="author" corresp="yes"><name><surname>Zhang</surname><given-names>Liqing</given-names></name><address><email>lqzhang@vt.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0694 4940</institution-id><institution-id institution-id-type="GRID">grid.438526.e</institution-id><institution>Department of Computer Science, </institution><institution>Virginia Tech, </institution></institution-wrap>Blacksburg, VA 24061 USA </aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0694 4940</institution-id><institution-id institution-id-type="GRID">grid.438526.e</institution-id><institution>Department of Statistics, </institution><institution>Virginia Tech, </institution></institution-wrap>Blacksburg, VA 24061 USA </aff><aff id="Aff3"><label>3</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0694 4940</institution-id><institution-id institution-id-type="GRID">grid.438526.e</institution-id><institution>Department of Mathematics, </institution><institution>Virginia Tech, </institution></institution-wrap>Blacksburg, VA 24061 USA </aff><aff id="Aff4"><label>4</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0001 0694 4940</institution-id><institution-id institution-id-type="GRID">grid.438526.e</institution-id><institution>Department of Aerospace and Ocean Engineering, </institution><institution>Virginia Tech, </institution></institution-wrap>Blacksburg, VA 24061 USA </aff></contrib-group><pub-date pub-type="epub"><day>26</day><month>10</month><year>2017</year></pub-date><pub-date pub-type="pmc-release"><day>26</day><month>10</month><year>2017</year></pub-date><pub-date pub-type="collection"><year>2017</year></pub-date><volume>7</volume><elocation-id>14106</elocation-id><history><date date-type="received"><day>12</day><month>5</month><year>2017</year></date><date date-type="accepted"><day>9</day><month>10</month><year>2017</year></date></history><permissions><copyright-statement>&#169; The Author(s) 2017</copyright-statement><license license-type="OpenAccess"><license-p>
<bold>Open Access</bold> This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The images or other third party material in this article are included in the article&#8217;s Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the article&#8217;s Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this license, visit <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>.</license-p></license></permissions><abstract id="Abs1"><p id="Par1">Storing biologically equivalent indels as distinct entries in databases causes data redundancy, and misleads downstream analysis. It is thus desirable to have a unified system for identifying and representing equivalent indels. Moreover, a unified system is also desirable to compare the indel calling results produced by different tools. This paper describes UPS-indel, a utility tool that creates a universal positioning system for indels so that equivalent indels can be uniquely determined by their coordinates in the new system, which also can be used to compare different indel calling results. UPS-indel identifies 15% redundant indels in dbSNP, 29% in COSMIC coding, and 13% in COSMIC noncoding datasets across all human chromosomes, higher than previously reported. Comparing the performance of UPS-indel with existing variant normalization tools vt normalize, BCFtools, and GATK LeftAlignAndTrimVariants shows that UPS-indel is able to identify 456,352 more redundant indels in dbSNP; 2,118 more in COSMIC coding, and 553 more in COSMIC noncoding indel dataset in addition to the ones reported jointly by these tools. Moreover, comparing UPS-indel to state-of-the-art approaches for indel call set comparison demonstrates its clear superiority in finding common indels among call sets. UPS-indel is theoretically proven to find all equivalent indels, and thus exhaustive.</p></abstract><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#169; The Author(s) 2017</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1" sec-type="introduction"><title>Introduction</title><p id="Par2">Indel stands for insertion or deletion of bases in a DNA sequence. As the second most common form of genetic variation, indels play an important role in genome and protein evolution. Due to artificial factors such as sequencing errors, ambiguous alignment of the reads, inconsistent ways of representing the same variant by different tools, the same mutation may be recognized as distinct variations occurring at different locations<sup><xref ref-type="bibr" rid="CR1">1</xref>&#8211;<xref ref-type="bibr" rid="CR3">3</xref></sup>. For example, consider a reference sequence AGGAAAGAAAGAAAGAAAGAG ranging from position 100285630 to 100285650 and two indels stored in dbSNP, rs147659011 (GAAA/+) and rs60376183 (AAGA/+), annotated to this region with positions 100285632 and 100285650, respectively. Although these indel mutations may indeed occur at different positions, they are biologically equivalent because they result in the same altered sequence AGGAAAGAAAGAAAGAAAGAAAGAG. Supplementary Table&#160;<xref rid="MOESM1" ref-type="media">1</xref> shows another example of redundant insertion and deletion in dbSNP. Since many databases such as dbSNP, Database of Genomic Variants (DGV), and Ensembl combine indels resulting from large-scale studies, similar cases often exist in those databases, leading to a nonnegligible problem of data redundancy. In fact, about 10%<sup><xref ref-type="bibr" rid="CR4">4</xref></sup> of the human indels stored in dbSNP and 18%<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> in Ensembl are redundant. Resolving the indel redundancy in major databases is important for subsequent genetics research. Nevertheless, this problem has not been given the attention it deserves.</p><p id="Par3">Numerous approaches have been developed for systematic comparison of indels to determine equivalence and hence solve the redundancy problem. The &#8220;strict matching&#8221; approach matches two indels if they share the same position, reference, and alternate alleles in two different entries in the VCF file. However, as demonstrated in ref.<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>, this approach fails to find equivalent indels that are not identical. The &#8220;distance based approach&#8221; treats two indels as equivalent if both have the same length and occur within a certain distance such as &#177;5&#8201;bp<sup><xref ref-type="bibr" rid="CR5">5</xref></sup> or &#177;25&#8201;bp<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>. However, this approach introduces false positives when neighboring indels are not equivalent<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> and misses equivalent indels that are farther apart than the distance cutoff. Clearly, selection of an optimal distance cutoff is a tradeoff of the two types of errors: smaller distance cutoffs result in a decreased false positive rate but an increased false negative rate.</p><p id="Par4">To address the limitations of the two aforementioned approaches, the more widely used &#8220;normalization&#8221; approach attempts to solve the indel redundancy problem by left (or right) normalization, i.e., consistently shifting the start position of an indel to the left (or right) as long as the resulting sequence is the same as the one generated by the original mutation<sup><xref ref-type="bibr" rid="CR7">7</xref></sup>. Tools using this type of variant normalization include vt normalize<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, BCFtools<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>, and GATK LeftAlignAndTrimVariants<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>. These tools usually take a VCF file as input, output another VCF file with canonical VCF entries for the indels after normalization, and then perform &#8220;strict matching&#8221; to find equivalent indels with exactly the same canonical representation. The normalization approach generally performs well in identifying equivalent indels, but as shown in the result section, fails to normalize complex variants.</p><p id="Par5">The positions of indels may get changed after left/right normalization, potentially misleading downstream analysis. For example, the deletion rs536379477 resides in the exon of the transcript ENST00000590192.1, but the equivalent deletion rs41436444 is in the intron of the same transcript. Therefore reporting these two indels with the same normalized position might lead to missing significant insight into genetic diseases or phenotypes of interest. Since the exact positions of most indel variations are not known, it is thus best to represent the indel of interest with a range of positions, within which equivalent indels can occur, rather than as a single normalized position. A similar idea was proposed by Krawitz <italic>et al</italic>.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup>.</p><p id="Par6">This paper proposes UPS-indel, a universal positioning system for indels, whereby every indel variant is represented by a range of positions within which all equivalent indels can occur. This representation is added to the VCF file resulting in a UVCF file containing not only the original indel calling results, but also the complete representation of all equivalent indels. The advantage of adding this column of information to the existing VCF file is (1) the original VCF file structure is unchanged so the UVCF file is still compatible with many downstream programs, (2) the UPS-indel notation facilitates the comparison of indels from different VCF files, (3) for equivalent indels that overlap both coding and noncoding regions, having the range column in the indel calling output would allow a downstream indel annotation system to consider the range rather than a single position, possibly annotating both a coding and noncoding variant. In summary, this work extends the previous work of Krawitz <italic>et al</italic>.<sup><xref ref-type="bibr" rid="CR10">10</xref></sup> and Assmus <italic>et al</italic>.<sup><xref ref-type="bibr" rid="CR1">1</xref></sup> by a new coordinate system Universal Positioning System (UPS), a rigorous mathematical proof that all (deletion and insertion) equivalent indels are found, the handling of complex variants, and a simple modification of an input VCF file to produce an output UVCF file containing the indel equivalence information. Results show that UPS-indel identifies more redundant indels than the existing approaches, also enables a comparison between indel calling results produced by different indel callers, and performs better than other state-of-the-art approaches for finding indels in common among call sets.</p></sec><sec id="Sec2" sec-type="materials|methods"><title>Materials and Methods</title><p id="Par7">This section defines some terms frequently used in this paper.</p><sec id="Sec3"><title>Alternate Sequence</title><p id="Par8">A sequence that is produced by introducing a specific indel to the reference sequence at a specific position. This is also known as the <italic>mutant sequence</italic>.</p><p id="Par9">Let <italic>R</italic> be the reference sequence and <italic>p</italic> be either an insertion or a deletion of a given length that occurs at a given position in the reference sequence. The alternate sequence for insertion is denoted by <italic>R</italic>&#8242;<sub><italic>I</italic></sub>&#8201;=&#8201;<italic>R</italic>&#8201;+&#8201;<italic>p</italic> and for deletion by <italic>R</italic>&#8242;<sub><italic>D</italic></sub>&#8201;=&#8201;<italic>R</italic> &#8722; <italic>p</italic>.</p></sec><sec id="Sec4"><title>Equivalent Indels</title><p id="Par10">Two indels are considered equivalent if and only if they produce the same alternate sequence. Note that equivalent indels must be of the same type (insertion and deletion) and same length.</p></sec><sec id="Sec5"><title>Redundant Indels</title><p id="Par11">Equivalent indels that are reported as distinct entries in a VCF file are defined as redundant indels.</p></sec><sec id="Sec6"><title>Region of Equivalence</title><p id="Par12">This is defined as the range of positions in the reference sequence where equivalent indels occur.</p></sec><sec id="Sec7"><title>Cyclic Permutation</title><p id="Par13">A permutation (<italic>y</italic>
<sub><italic>0</italic></sub>, <italic>y</italic>
<sub>1</sub>, <italic>y</italic>
<sub>2</sub>, &#8230;, <italic>y</italic>
<sub>n&#8722;1</sub>)&#8201;=&#8201;<italic>f</italic>(<italic>x</italic>
<sub><italic>0</italic></sub>, <italic>x</italic>
<sub>1</sub>, <italic>x</italic>
<sub>2</sub>, &#8230;, <italic>x</italic>
<sub>n&#8722;1</sub>) where <italic>y</italic>
<sub><italic>i</italic></sub>&#8201;=&#8201;<italic>x</italic>
<sub>(<italic>i</italic>+<italic>k</italic>)<italic>mod</italic>&#8201;
<italic>n</italic></sub> for 0&#8201;&#8804;&#8201;<italic>i</italic>&#8201;&#8804;&#8201;<italic>n</italic>&#8201;
<italic>&#8722;</italic>&#8201;1, <italic>k</italic> can be positive (left cyclic) or negative (right cyclic). For example: for a string &#8220;ATCG&#8221;, the left cyclic permutations are TCGA, CGAT, and GATC; the right cyclic permutations of this string are GATC, CGAT, and TCGA.</p><p id="Par14">Table&#160;<xref rid="Tab1" ref-type="table">1</xref> shows an example of equivalent indels. Observe that all equivalent indels are cyclic permutations of each other (e.g., a cyclic permutation of CT is TC and cyclic permutations of TGT are GTT and TTG) and equivalence continues until there is a mismatch (see Supplementary Table&#160;<xref rid="MOESM1" ref-type="media">2</xref>). This observation leads to the following theorem.<table-wrap id="Tab1"><label>Table 1</label><caption><p>An example of equivalent indels.</p></caption></table-wrap>
</p><p id="Par15">
<bold>Theorem 1:</bold> All equivalent indels in the region of equivalence are cyclic permutations of each other.</p><p id="Par16">
<bold>Proof:</bold> Consider two equivalent indels <italic>d</italic>
<sub><italic>1</italic></sub> and <italic>d</italic>
<sub><italic>2</italic></sub> and the equivalence region <italic>R</italic> they define.</p><p id="Par17">For insertion within <italic>R</italic>, the alternate sequences are</p><p id="Par18">
<italic>d</italic>
<sub><italic>1</italic></sub>
<italic>S</italic>&#8201;=&#8201;<italic>Sd</italic>
<sub><italic>2</italic></sub>
</p><p id="Par19">for some nonempty <italic>S</italic>. For deletion within <italic>R</italic>, the alternate (possibly empty) sequence is <italic>S</italic> starting with <italic>d</italic>
<sub><italic>1</italic></sub>
<italic>S</italic>&#8201;=&#8201;<italic>Sd</italic>
<sub><italic>2</italic></sub>.</p><p id="Par20">
<bold>Case 1</bold>. For <italic>|S</italic>|&#8201;&lt;&#8201;<italic>|d</italic>
<sub><italic>1</italic></sub>|, <italic>d</italic>
<sub><italic>1</italic></sub>&#8201;=&#8201;<italic>SX</italic> for nonempty <italic>X</italic> and <italic>d</italic>
<sub><italic>1</italic></sub>
<italic>S</italic>&#8201;=&#8201;<italic>SXS</italic>&#8201;=&#8201;<italic>Sd</italic>
<sub><italic>2</italic></sub> implies <italic>d</italic>
<sub><italic>2</italic></sub>&#8201;=&#8201;<italic>XS</italic> is a cyclic permutation of <italic>d</italic>
<sub><italic>1</italic></sub>&#8201;=&#8201;<italic>SX</italic>.</p><p id="Par21">
<bold>Case 2</bold>. For <italic>|S</italic>|&#8201;=&#8201;<italic>|d</italic>
<sub><italic>1</italic></sub>|, <italic>d</italic>
<sub><italic>1</italic></sub>&#8201;=&#8201;<italic>d</italic>
<sub><italic>2</italic></sub>&#8201;=&#8201;<italic>S</italic>.</p><p id="Par22">
<bold>Case 3</bold>. For <italic>|S</italic>|&#8201;&gt;&#8201;<italic>|d</italic>
<sub><italic>1</italic></sub>|, <italic>S</italic>&#8201;=&#8201;<italic>d</italic>
<sub><italic>1</italic></sub>
<italic>X</italic> for nonempty <italic>X</italic> with |<italic>X</italic>|&#8201;&lt;&#8201;<italic>|S</italic>|, and <italic>d</italic>
<sub><italic>1</italic></sub>
<italic>d</italic>
<sub><italic>1</italic></sub>
<italic>X</italic>&#8201;=&#8201;<italic>d</italic>
<sub><italic>1</italic></sub>
<italic>S</italic>&#8201;=&#8201;<italic>Sd</italic>
<sub><italic>2</italic></sub>&#8201;=&#8201;<italic>d</italic>
<sub><italic>1</italic></sub>
<italic>Xd</italic>
<sub><italic>2</italic></sub> implies <italic>d</italic>
<sub><italic>1</italic></sub>
<italic>X</italic>&#8201;=&#8201;<italic>Xd</italic>
<sub><italic>2</italic></sub>. Repeating this argument for <italic>d</italic>
<sub><italic>1</italic></sub>
<italic>X</italic>&#8201;=&#8201;<italic>Xd</italic>
<sub><italic>2</italic></sub> eventually reduces <italic>X</italic> to one of the previous two cases.</p><p id="Par23">Another case for deletion is when <italic>R</italic> is periodic with period |<italic>d</italic>
<sub><italic>1</italic></sub>|, having the form</p><p id="Par24">
<italic>R</italic>&#8201;=&#8201;<italic>d</italic>
<sub><italic>1</italic></sub>
<italic>d</italic>
<sub><italic>1</italic></sub>&#8230;&#8230;.. <italic>d</italic>
<sub><italic>1</italic></sub> (<italic>d</italic>
<sub><italic>1</italic></sub>)<sub>1</sub> where (<italic>d</italic>
<sub><italic>1</italic></sub>)<sub>1</sub> is the first symbol of <italic>d</italic>
<sub><italic>1</italic></sub>. Then every consecutive subsequence <italic>d</italic>
<sub><italic>2</italic></sub> of <italic>R</italic> with |<italic>d</italic>
<sub><italic>1</italic></sub>|&#8201;=&#8201;|<italic>d</italic>
<sub><italic>2</italic></sub>| is an equivalent deletion, and <italic>d</italic>
<sub><italic>2</italic></sub> is a cyclic permutation of <italic>d</italic>
<sub><italic>1</italic></sub>. <bold>(Q.E.D)</bold>.</p><p id="Par25">
<bold>Corollary</bold>. For <italic>|S</italic>|&#8201;&gt;&#8201;<italic>|d</italic>
<sub><italic>1</italic></sub>|, <italic>S</italic> must have the form <italic>d</italic>
<sub><italic>1</italic></sub>
<italic>d</italic>
<sub><italic>1</italic></sub>&#8230;&#8230;.*&#8230;&#8230; <italic>d</italic>
<sub><italic>2</italic></sub>
<italic>d</italic>
<sub><italic>2</italic></sub> with an equal number of <italic>d</italic>
<sub><italic>1</italic></sub>s and <italic>d</italic>
<sub>2</sub>s.</p><p id="Par26">Figure&#160;<xref rid="Fig1" ref-type="fig">1</xref> illustrates Theorem 1 with two examples. Based on the theorem, an algorithm called UPS-indel (see Table&#160;<xref rid="Tab2" ref-type="table">2</xref>) exhaustively increases the range of equivalence as far as possible in both left and right directions from a given indel position. Finally for each indel in the VCF file, the algorithm reports its range of equivalence, which is called the Universal Positioning System coordinate (UPS-coordinate). Once indels are represented by their UPS-coordinates, identifying redundant indels becomes a trivial task of string comparison (e.g., Fig.&#160;<xref rid="Fig2" ref-type="fig">2(A)</xref>, comparison across the 8<sup>th</sup> column). Note that since UPS-indel implements Theorem 1, which characterizes indels within an equivalence region, UPS-indel is exhaustive, finding all equivalent indels.<fig id="Fig1"><label>Figure 1</label><caption><p>Illustration of two cases of Theorem 1. (A): |<italic>d</italic>
<sub><italic>1</italic></sub>|&#8201;&gt;&#8201;|<italic>S</italic>|, (B): |<italic>d</italic>
<sub><italic>1</italic></sub>|&#8201;&lt;&#8201;|<italic>S</italic>|.</p></caption><graphic xlink:href="41598_2017_14400_Fig1_HTML" id="d29e1186"/></fig>
<table-wrap id="Tab2"><label>Table 2</label><caption><p>UPS-indel algorithm.</p></caption></table-wrap>
<fig id="Fig2"><label>Figure 2</label><caption><p>Different utilities of UPS-indel. (A)UVCF format, (B) redundant indel list, and (C) comparing two uvcf files.</p></caption><graphic xlink:href="41598_2017_14400_Fig2_HTML" id="d29e1347"/></fig>
</p><p id="Par27">Note that &#8220;left&#8221; and &#8220;right&#8221; cyclic permutations are equivalent &#8211; there is no difference. In line 2 of the UPS-indel algorithm (Table&#160;<xref rid="Tab2" ref-type="table">2</xref>), while extracting the &#8220;pattern&#8221; from the entries of the RFE and ALT columns of the input VCF file, UPS-indel performs horizontal decompositions of the complex variants and assigns the indel part as the value of pattern. For example, suppose in the REF column of a VCF entry there is an allele &#8220;ATAA&#8221; and in the ALT column there is an allele &#8220;AG&#8221;. In this case, UPS-indel performs horizontal decompositions of the complex variants to produce two separate entries (AT&#8201;&#8594;&#8201;AG and AA&#8201;&#8594;*meaning that there is a deletion of AA).</p><p id="Par28">UPS-indel is written in C++ and can run on Linux, Windows, or Mac operating systems that have a C++ compiler. The command line version of UPS-indel is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/shabbir005/ups-indel">https://github.com/shabbir005/ups-indel</ext-link>. UPS-indel uses SeqAn, an open source C++ library containing efficient algorithms and data structures to analyze large genome sequences<sup><xref ref-type="bibr" rid="CR11">11</xref></sup>. The input to UPS-indel is a reference chromosome sequence, a VCF file containing a list of indels, an output file name, and a flag to enable/disable horizontal decomposition, for example,</p><p id="Par29">./ups_indel example/chr1.fa example/chr1.vcf example/chr1.uvcf &#8211;hd=true.</p><p id="Par30">This command line produces an output file named chr1.uvcf, containing the UPS-coordinates of all the indels in chr1.vcf when horizontal decomposition is enabled. Figure&#160;<xref rid="Fig2" ref-type="fig">2(A)</xref> shows an example UVCF file.</p><p id="Par31">The UVCF file keeps the same content/format as the VCF file, with an additional column that contains the indel&#8217;s UPS-coordinate information. The interpretation of the UPS-coordinate follows:<list list-type="bullet"><list-item><p id="Par32">Symbols&#8201;+&#8201;and &#8722; denote insertion and deletion, respectively, followed by the base pairs inserted/deleted from the reference, and the UPS-coordinate (in square brackets).</p></list-item><list-item><p id="Par33">The UPS-coordinate contains a range of positions in the square brackets representing the region of equivalence for the indel. For example, the UPS-coordinate&#8201;+&#8201;CTTC [62298 &#8722; 62302] means there is an insertion of CTTC at position 62298, and the same alternate sequence can be produced by inserting TTCC at position 62299, or TCCT at position 62300, and so on.</p></list-item></list>
</p><p id="Par34">Once indels are represented by the coordinates produced by UPS-indel, one can easily identify redundant indels within one indel call set or multiple indel call sets. For example, the following command line</p><p id="Par35">./ups_generate_redundant_indel_list example/chr1.uvcf example/redundant_indel_list.txt</p><p id="Par36">produces a list of indel groups containing dbSNP IDs of redundant indels (Fig.&#160;<xref rid="Fig2" ref-type="fig">2(B)</xref>).</p><p id="Par37">UPS-indel groups all redundant indels together. For example, consider a group [rs34748242, rs59148039] with the UVCF entry shown in Table&#160;<xref rid="Tab3" ref-type="table">3</xref>. These two indels belong to the same indel type (insertion), have same base pairs inserted (TG), and share the same UPS-coordinate and hence they are considered as equivalent.<table-wrap id="Tab3"><label>Table 3</label><caption><p>UVCF file for redundant indels.</p></caption></table-wrap>
</p><p id="Par38">UPS-indel can compare multiple indel call sets. This utility is particularly useful for generating a high-confidence indel call set by taking the intersection of the results of different indel callers<sup><xref ref-type="bibr" rid="CR12">12</xref></sup>, or merging the indel calling results from different tools for a consensus variant caller<sup><xref ref-type="bibr" rid="CR13">13</xref></sup>, or comparing indel call sets generated by different indel callers to determine their relative recall, precision, and accuracy, and to understand the source of their dissimilarities. To use this utility of UPS-indel, after converting two VCF files to UVCF files, one can use the following command to get the comparison result (Fig.&#160;<xref rid="Fig2" ref-type="fig">2(C)</xref>), which contains useful statistics for downstream analysis:./ups_compare_uvcf_files example/sample1.uvcf example/sample2.uvcf example/comparison_result.txt</p><p id="Par39">A utility for UPS-indel can produce a filtered UVCF file after removing redundant indels. The following command, for example, can get the filtered UVCF file named out_filtered.uvcf containing nonredundant indels:</p><p id="Par40">java GenerateFilteredUVCFFileAfterRemovingRedundantIndel example/out.uvcf example/redundant_indel_list.txt</p><p id="Par41">All of the above mentioned utilities of UPS-indel are also included in the web version available at <ext-link ext-link-type="uri" xlink:href="http://bench.cs.vt.edu/ups-indel/">http://bench.cs.vt.edu/ups-indel/</ext-link> (Fig.&#160;<xref rid="Fig3" ref-type="fig">3</xref>).<fig id="Fig3"><label>Figure 3</label><caption><p>Main user interface of UPS-indel.</p></caption><graphic xlink:href="41598_2017_14400_Fig3_HTML" id="d29e1526"/></fig>
</p><p id="Par42">UPS-indel is compared with other existing tools that also find equivalent indels through variant normalization. These tools include vt normalize (version 0.5)<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>, BCFtools (version 1.3)<sup><xref ref-type="bibr" rid="CR8">8</xref></sup>, and GATK LeftAlignAndTrimVariants (version 3.5)<sup><xref ref-type="bibr" rid="CR9">9</xref></sup>. Like UPS-indel, all of these tools take a VCF file and the reference genome as input and produce the normalized position of the indels in the VCF file. Another tool Vindel<sup><xref ref-type="bibr" rid="CR4">4</xref></sup> also finds equivalent indels using a heuristic approach, but was not included in the comparison as it uses a flat file as input instead of a VCF file.</p><p id="Par43">A VCF file of dbSNP (version 142, GRCh37p13) and the GRCh37 reference genome were used as the inputs to these tools. The VCF file contains both SNPs and indels, and VCFtools<sup><xref ref-type="bibr" rid="CR14">14</xref></sup> (Version 0.1.14) is used to extract indels from the VCF file. The comparison was extended to the COSMIC dataset as well.</p><p id="Par44">There are other tools that could also be considered for comparison. Both VarMatch<sup><xref ref-type="bibr" rid="CR3">3</xref></sup> and RTGTools<sup><xref ref-type="bibr" rid="CR15">15</xref></sup> use a branch and bound algorithm to search for equivalent indels. They are not suitable for processing population-scale indel call sets such as dbSNP and COSMIC because densely packed indels in such datasets make the search space too large to be processed by a branch and bound algorithm<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. READDI<sup><xref ref-type="bibr" rid="CR16">16</xref></sup> considers repeat-induced ambiguities as well as tool-induced inaccuracies while searching for equivalent deletions using the longest common extension algorithm. This tool is limited to finding deletions only, and hence not included in the comparison for the dbSNP and COSMIC datasets. Nevertheless, in this study a smaller dataset is used to compare UPS-indel with VarMatch (Version available on April 5, 2017), RTGTools (Version 3.7.1), and READDI (Version available on April 5, 2017).</p></sec></sec><sec id="Sec8" sec-type="results"><title>Results and Discussion</title><sec id="Sec9"><title>Finding equivalent indels in the dbSNP dataset</title><p id="Par45">The input VCF file contains about 8.9 million indels from the human genome. For this input, UPS-indel produces the UVCF file and the other three tools, vt normalize, BCFtools, and GATK LeftAlignAndTrimVariants, generate the normalized VCF file. These three tools perform left normalization of indels and output a left normalized representation. Therefore, for these three tools, two indels are equivalent if and only if they satisfy the following conditions:<list list-type="order"><list-item><p id="Par46">Both indels are of the same type (insertion or deletion).</p></list-item><list-item><p id="Par47">Both indels share the same pattern after normalization: [value of the REF column in the normalized VCF file &#8211; value of the ALT column in the normalized VCF file &#8211; value of the POS column in the normalized VCF file]. Note that one might think that considering the position should suffice, because after normalization, equivalent indels should have the same position in the VCF file. However, the example in Table&#160;<xref rid="Tab4" ref-type="table">4</xref> shows that indels rs371246544 and rs71724031 have the same normalized position but are not equivalent.<table-wrap id="Tab4"><label>Table 4</label><caption><p>An example explaining why considering only normalized position does not suffice for identifying redundant indels for vt normalize and BCFtools.</p></caption></table-wrap>
</p></list-item></list>
<disp-formula id="Equ1"><alternatives><tex-math id="M1">\documentclass[12pt]{minimal}
				\usepackage{amsmath}
				\usepackage{wasysym} 
				\usepackage{amsfonts} 
				\usepackage{amssymb} 
				\usepackage{amsbsy}
				\usepackage{mathrsfs}
				\usepackage{upgreek}
				\setlength{\oddsidemargin}{-69pt}
				\begin{document}$$\begin{array}{c}{\rm{The}}\,{\rm{comparison}}\,{\rm{is}}\,{\rm{based}}\,{\rm{on}}\,{\rm{the}}\,{\rm{criterion}}:{\rm{the}}\,{\rm{redundant}}\,{\rm{indel}}\,{\rm{ratio}}\,=\\ \frac{total\,number\,of\,redundant\,indels-total\,number\,of\,redundant\,indel\,groups}{total\,number\,of\,indels}\end{array}$$\end{document}</tex-math><mml:math id="M2" display="block"><mml:mtable columnalign="left"><mml:mtr><mml:mtd><mml:mi mathvariant="normal">The</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">comparison</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">is</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">based</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">on</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">the</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">criterion</mml:mi><mml:mo>:</mml:mo><mml:mspace width="-.25em"/><mml:mi mathvariant="normal">the</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">redundant</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">indel</mml:mi><mml:mspace width=".25em"/><mml:mi mathvariant="normal">ratio</mml:mi><mml:mspace width=".25em"/><mml:mo>=</mml:mo></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mfrac><mml:mrow><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mspace width=".25em"/><mml:mi>n</mml:mi><mml:mi>u</mml:mi><mml:mi>m</mml:mi><mml:mi>b</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mspace width=".25em"/><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mspace width=".25em"/><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mspace width=".25em"/><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>l</mml:mi><mml:mi>s</mml:mi><mml:mo>&#8722;</mml:mo><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mspace width=".25em"/><mml:mi>n</mml:mi><mml:mi>u</mml:mi><mml:mi>m</mml:mi><mml:mi>b</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mspace width=".25em"/><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mspace width=".25em"/><mml:mi>r</mml:mi><mml:mi>e</mml:mi><mml:mi>d</mml:mi><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mi>a</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mspace width=".25em"/><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>l</mml:mi><mml:mspace width=".25em"/><mml:mi>g</mml:mi><mml:mi>r</mml:mi><mml:mi>o</mml:mi><mml:mi>u</mml:mi><mml:mi>p</mml:mi><mml:mi>s</mml:mi></mml:mrow><mml:mrow><mml:mi>t</mml:mi><mml:mi>o</mml:mi><mml:mi>t</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mspace width=".25em"/><mml:mi>n</mml:mi><mml:mi>u</mml:mi><mml:mi>m</mml:mi><mml:mi>b</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mspace width=".25em"/><mml:mi>o</mml:mi><mml:mi>f</mml:mi><mml:mspace width=".25em"/><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>d</mml:mi><mml:mi>e</mml:mi><mml:mi>l</mml:mi><mml:mi>s</mml:mi></mml:mrow></mml:mfrac></mml:mtd></mml:mtr></mml:mtable></mml:math><graphic xlink:href="41598_2017_14400_Article_Equ1.gif" position="anchor"/></alternatives></disp-formula>where the numerator is the total number of redundant indels reported since only one indel from each redundant indel group should be reported in the output and the remaining should be considered as redundant.</p><p id="Par48">Figure&#160;<xref rid="Fig4" ref-type="fig">4</xref> shows the comparison of the redundant indel ratios reported by UPS-indel, vt normalize, BCFtools, and GATK LeftAlignAndTrimVariants for indels in the dbSNP dataset. For the entire human genome, UPS-indel identified ~15% redundant indels (see Supplementary Table&#160;<xref rid="MOESM1" ref-type="media">3</xref> and Supplementary Figure&#160;<xref rid="MOESM1" ref-type="media">1</xref> for chromosome-wise comparison), as compared to 11.82% by vt normalize, 11.82% by BCFtools, and 11.81% by GATK LeftAlignAndTrimVariants. At the chromosome level, UPS-indel identified about 3% more redundant indels than the other three tools.<fig id="Fig4"><label>Figure 4</label><caption><p>Comparison among the tools based on redundant indel ratio for the dbSNP dataset.</p></caption><graphic xlink:href="41598_2017_14400_Fig4_HTML" id="d29e1960"/></fig>
</p><p id="Par49">Examining the sets of redundant indels detected by UPS-indel and the other tools shows that vt normalize and BCFtools produce exactly the same results for all chromosomes. Moreover, all the redundant indels detected by vt normalize, BCFtools, and GATK LeftAlignAndTrimVariants are also detected by UPS-indel, as shown in Fig.&#160;<xref rid="Fig5" ref-type="fig">5</xref>. Further, for all chromosomes, UPS-indel identified a total of 456,352 more redundant indels than the other tools. As proved in the methods, UPS-indel identifies all the redundant indels, the comparison result shows that the other three tools are not exhaustive in finding all the redundant indels.<fig id="Fig5"><label>Figure 5</label><caption><p>Venn diagram to compare the number of redundant indels detected by UPS-indel and other tools. (Venn Diagrams are generated using the R package VennDiagram<sup><xref ref-type="bibr" rid="CR25">25</xref></sup>.)</p></caption><graphic xlink:href="41598_2017_14400_Fig5_HTML" id="d29e1979"/></fig>
</p><p id="Par50">Why are several indels found as redundant by UPS-indel but not by other tools? An investigation shows that these equivalent indels are missed by the other tools because, due to the computation time limit, they cannot exhaustively search every cyclic permutation at every feasible position as is done by UPS-indel. For example, long multiallelic indels are not considered by default for normalization. Had the tools considered these indels separately, they would have been able to find an equivalent indel located at a different position. For this situation, UPS-indel splits the VCF entry into multiple entries by default and considers each of the indels separately while finding redundant indels. Table&#160;<xref rid="Tab5" ref-type="table">5</xref> provides such an example.<table-wrap id="Tab5"><label>Table 5</label><caption><p>Example of multiallelic insertion type indels missed by other tools but detected as redundant by UPS-indel.</p></caption></table-wrap>
</p><p id="Par51">For the indel shown in Table&#160;<xref rid="Tab5" ref-type="table">5</xref> (panel A), no normalization was done by vt normalize, BCFtools, or GATK LeftAlignAndTrimVariants. UPS-indel splits the entry into three indels and finds the UPS-coordinate for each of them separately (Table&#160;<xref rid="Tab5" ref-type="table">5</xref>, panel B). Splitting the VCF entry and considering the indels separately, UPS-indel managed to find another indel equivalent to one of the indels (Table&#160;<xref rid="Tab5" ref-type="table">5</xref>, panel C). Therefore UPS-indel reports indels with id rs374587598 and rs60022176 as redundant.</p><p id="Par52">The example in Table&#160;<xref rid="Tab5" ref-type="table">5</xref> is for insertion; an example for deletion is illustrated in Table&#160;<xref rid="Tab6" ref-type="table">6</xref>.<table-wrap id="Tab6"><label>Table 6</label><caption><p>Example of multiallelic deletion type indels missed by other tools but detected as redundant by UPS-indel.</p></caption></table-wrap>
</p><p id="Par53">In addition to the scenario mentioned above, GATK LeftAlignAndTrimVariants does not normalize any of the multiallelic indels regardless of the size which is also mentioned in ref.<sup><xref ref-type="bibr" rid="CR2">2</xref></sup>. Table&#160;<xref rid="Tab7" ref-type="table">7</xref> shows an example of this occurrence explaining why GATKLeftAlignAndTrimVariants finds fewer number of redundant indels than vt normalize and BCFtools.<table-wrap id="Tab7"><label>Table 7</label><caption><p>Example of a multiallelic indel that is normalized by vt normalize and BCFtools but not by GATKLeftAlignAndTrim.</p></caption></table-wrap>
</p><p id="Par54">One might think that decomposing multiallelic indels into several biallelic indels produces the same results as UPS-indel for the normalization tools. To check this, the &#8220;decompose&#8221; utility of vt was used to perform a vertical decomposition of multiallelic indels into biallelic indels. Applying vt normalize to the decomposed indels could not find equivalent indels for complex variants, whereas UPS-indel is able to find the equivalent indels. Table&#160;<xref rid="Tab8" ref-type="table">8</xref> shows an example of this occurrence. Since vt normalize and BCFtools produce exactly the same results, these complex variants are missed by BCFtools as well.<table-wrap id="Tab8"><label>Table 8</label><caption><p>Example of a complex variant that is missed by vt normalize but detected as redundant by UPS-indel.</p></caption></table-wrap>
</p><p id="Par55">In the example shown in Table&#160;<xref rid="Tab8" ref-type="table">8</xref>, VCF entries for the indels with ids rs369694942 and rs373243812 remain the same in the input and the output for vt normalize (Panel A), i.e., no normalization is done. Here the second indel (rs373243812) is a complex variant containing both a SNP (A&#8201;&#8594;&#8201;G) and a deletion of length three (AAA), and is ignored by vt normalize. However, UPS-indel performs a horizontal decomposition of the complex variant to produce two separate entries (AA&#8201;&#8594;&#8201;AG and AAA&#8201;&#8594;*) and finds the equivalent indel with id rs369694942 having a deletion of length three (AAA) in the UPS-coordinate 2273132 to 2273147 (Panel B).</p><p id="Par56">As defined in ref.<sup><xref ref-type="bibr" rid="CR17">17</xref></sup>, complex variants come in two forms: (1) MNP and (2) clumped indel. In MNP, (1) the lengths of the reference and alternate sequences are greater than one and (2) the nucleotides involved in the two sequences differ. In clumped indel, on the other hand, there is a clumping of nearby variants and the sequences need not involve different base pairs. Table&#160;<xref rid="Tab9" ref-type="table">9</xref> shows an example of MNP and clumped indel found in dbSNP (version 142).<table-wrap id="Tab9"><label>Table 9</label><caption><p>An example of the two types of complex variant.</p></caption></table-wrap>
</p><p id="Par57">UPS-indel decomposes complex variants based on the best predicted outcome using the Needleman-Wunsch algorithm. This approach was used by Li <italic>et al</italic>.<sup><xref ref-type="bibr" rid="CR18">18</xref></sup> to decompose complex variants into individual events.</p></sec><sec id="Sec10"><title>Finding equivalent indels in the COSMIC dataset</title><p id="Par58">UPS-indel was used to find redundant indels in the COSMIC (Catalogue Of Somatic Mutations In Cancer) dataset, the world&#8217;s most comprehensive resource for exploring the impact of somatic mutations in human cancer<sup><xref ref-type="bibr" rid="CR19">19</xref></sup>. With data collected for more than 2,500 human cancers, this archive describes millions of coding mutations, noncoding mutations, and other gene expression variants across the human genome.</p><p id="Par59">For all chromosomes in the COSMIC dataset, UPS-indel identified 28.17% and 13.11% redundant indels in the COSMIC coding and noncoding indel datasets, respectively, which are higher than the redundant indel ratios reported by the other tools. Figure&#160;<xref rid="Fig6" ref-type="fig">6</xref> shows the comparison of the redundant indel ratios reported by UPS-indel, vt normalize, BCFtools, and GATK LeftAlignAndTrimVariants for both the COSMIC coding and noncoding datasets. Comparisons for chromosome-wise redundant indel ratios among the tools are given in Supplementary Materials (See Table&#160;<xref rid="Tab4" ref-type="table">4</xref> and Fig.&#160;<xref rid="Fig2" ref-type="fig">2</xref> for COSMIC coding and Table&#160;<xref rid="Tab5" ref-type="table">5</xref> and Fig.&#160;<xref rid="Fig3" ref-type="fig">3</xref> for noncoding indels).<fig id="Fig6"><label>Figure 6</label><caption><p>Comparison of redundant indel ratio for (<bold>A</bold>) COSMIC coding and (<bold>B</bold>) COSMIC noncoding indels.</p></caption><graphic xlink:href="41598_2017_14400_Fig6_HTML" id="d29e2911"/></fig>
</p><p id="Par60">Similarly, examining the sets of redundant indels identified by the tools, Fig.&#160;<xref rid="Fig7" ref-type="fig">7</xref> shows that for both the COSMIC coding and noncoding indels, UPS-indel identified all the redundant indels detected by the other tools. In addition to that, for the whole genome, 2,118 (Fig.&#160;<xref rid="Fig6" ref-type="fig">6A</xref>) and 553 (Fig.&#160;<xref rid="Fig6" ref-type="fig">6B</xref>) unique redundant indels for COSMIC coding and noncoding indels, respectively, are detected by UPS-indel but missed by other tools.<fig id="Fig7"><label>Figure 7</label><caption><p>Venn diagram to compare the number of redundant indels detected by UPS-indel and other tools in (<bold>A</bold>) COSMIC coding and (<bold>B</bold>) COSMIC noncoding indel datasets.</p></caption><graphic xlink:href="41598_2017_14400_Fig7_HTML" id="d29e2938"/></fig>
</p><p id="Par61">As for dbSNP, the reason why some COSMIC coding and noncoding indels were considered as redundant by UPS-indel but missed by other tools is that, in the normalized VCF for these other tools, redundant indels must contain the same pattern: [value of the REF column in the normalized VCF file &#8211; value of the ALT column in the normalized VCF file &#8211; value of the POS column in the normalized VCF file]. The reason for this pattern match restriction was given earlier. In Table&#160;<xref rid="Tab10" ref-type="table">10</xref>, all tools except UPS-indel missed the indel with id COSM5068028 in the redundant indel group consisting of indels with id COSM3732389 and id COSM5348791, because of not having the same pattern. Therefore it might be assumed that only normalized position should be considered to group them together. However, then the indel with id COSM3685916 would be placed in the same group, although it is a deletion type indel whereas the others are insertion type indels, and also the resultant sequences are different. UPS-indel groups the indels correctly by placing indels with ids COSM5068028, COSM3732389, and COSM5348791 in the same redundant indel group as they have the same base pair inserted, have the same region of equivalence, and also are of the same indel type.<table-wrap id="Tab10"><label>Table 10</label><caption><p>Example of COSMIC indel that is missed by other tools but detected as redundant by UPS-indel.</p></caption></table-wrap>
</p><p id="Par62">GATKLeftAlignAndTrimVariants found fewer redundant indels than other tools because GATKLeftAlignAndTrimVariants does not consider very large indels for normalization. For example, the indels with ids COSM5196837 and COSM5066846, which are deletions of length 371&#8201;bps and 222&#8201;bps, respectively, are not considered by GATKLeftAlignAndTrimVariants for normalization. The reason is that GATK LeftAlignAndTrimVariants uses 200&#8201;bps as the default size of the sliding window on the reference (the parameter&#8211;reference_window_stop) while left aligning the alleles which is smaller than the length of the missed deletions.</p><p id="Par63">These tools are also compared in terms of average running time taken to process the whole genome VCF file of dbSNP (version 142, size 16.7GB) for normalization (by vt normalize, BCFtools, and GATKLeftAlignAndTrimVariants) or for generating the UPS-coordinate (by UPS-indel). All tools were run on a desktop computer having an Intel Core i7-2600 CPU with eight cores (at 3.40&#8201;GHz) and 16GB of RAM. Among these tools vt normalize is the fastest, taking 12&#8201;minutes 27&#8201;seconds, followed by BCFtools (12&#8201;minutes 35&#8201;seconds), UPS-indel (17&#8201;minutes 10&#8201;seconds), and GATK LeftAlignAndTrimVariants (21&#8201;minutes 55&#8201;seconds). Since UPS-indel searches for equivalent indels exhaustively and is theoretically rigorous, the computation time is a little higher than that for other heuristic normalization tools such as vt normalize and BCFtools.</p></sec><sec id="Sec11"><title>Evaluating UPS-indel&#8217;s performance in comparing different indel call sets</title><p id="Par64">In genomic research related to indel calling, an important step in downstream analysis is to compare multiple indel call sets for (1) generating a highly accurate benchmark indel call set by taking the intersection of multiple call sets as done by Zook <italic>et al</italic>.<sup><xref ref-type="bibr" rid="CR12">12</xref></sup> for the sample NA12878, (2) merging the call sets of different indel callers in a consensus caller as done by Trubetskoy <italic>et al</italic>.<sup><xref ref-type="bibr" rid="CR13">13</xref></sup> for exome data, and (3) evaluating the accuracy of a newly proposed indel calling tool by comparing its indel call set with the benchmark call set. Comparing different indel call sets is also a common step in studies comparing the performance of different indel callers as done in refs<sup><xref ref-type="bibr" rid="CR5">5</xref>,<xref ref-type="bibr" rid="CR20">20</xref>,<xref ref-type="bibr" rid="CR21">21</xref></sup>. Different indel callers having different representations of the same indel complicates the comparison of different indel call sets. In addition to strict matching of indels, as mentioned earlier, a na&#239;ve but previously commonly used approach to compare multiple indel calling results is based on a simple distance criterion, that is, indels are considered to be equivalent if they are within a distance threshold (e.g.,&#8201;&#177;&#8201;5&#8201;bp or&#8201;&#177;&#8201;25&#8201;bp). For example, the original 1000 Genomes project used&#8201;&#177;&#8201;25&#8201;bp to compare multiple indel calling results<sup><xref ref-type="bibr" rid="CR6">6</xref></sup>. To illustrate the advantage of using a UVCF file instead of a distance criterion or normalized VCF for comparing multiple VCF files, the alignment file for chromosome 11 of a single sample (HG00851) was picked up from the 1000 Genomes project and five indel callers: Dindel<sup><xref ref-type="bibr" rid="CR22">22</xref></sup> (Version 1.0.1), GATK Unified Genotyper<sup><xref ref-type="bibr" rid="CR9">9</xref></sup> (Version 3.4), GATK Haplotype Caller (Version 3.4), Platypus<sup><xref ref-type="bibr" rid="CR23">23</xref></sup> (Version 0.7.9.1), and Pindel<sup><xref ref-type="bibr" rid="CR24">24</xref></sup> (Version 0.2.5) were used to produce VCF files for indels. The resultant VCF files were compared to determine the number of common indels from these five tools using three different approaches, namely a distance based approach, comparing the VCF files normalized by vt normalize and GATK LeftAlignAndTrimVariants, and comparing the UVCF files produced by UPS-indel. For the distance based approach, two indels are considered equivalent if (1) they belong to the same indel type (either both are insertion type or both are deletion type), (2) have the same base pairs inserted/deleted, and (3) are in close proximity (within&#8201;&#177;&#8201;5&#8201;bps from each other). For the normalized VCF files and UVCF files, the same approach was used as discussed earlier for finding redundant indels.</p><p id="Par65">First the VCF files produced by the five indel calling tools were compared to find overlap among them to determine the number of common indels using the distance based approach. In the second step, the VCF files of the five indel calling tools were normalized using vt normalize and GATK LeftAlignAndTrimVariants separately. For this sample, both normalization tools produced the same normalized VCF files. The normalized VCF files of five indel calling tools were compared to determine the common number of indels. Finally, UPS-indel was used to produce the UVCF files for the five indel calling tools and these UVCF files were compared to determine the common number of indels.</p><p id="Par66">The result shows that the distance based approach found 584 indels in common from the five indel calling tools while 5,514 and 5,575 common indels were found by the normalized VCF and UPS-indel UVCF approaches, respectively. This demonstrates the better suitability of UPS-indel, compared to distance based or existing normalization based approaches, for comparing multiple VCF files. Further investigation revealed that indels that are missed by the normalization tools are complex variants that are skipped by normalization tools but processed by UPS-indel. Note that this small number (61) of common indels identified by UPS-indel, but missed by the normalization tools, is based on a single chromosome of a single sample only, and much better performance of UPS-indel would be expected for the whole genome, as observed for the dbSNP and COSMIC datasets.</p><p id="Par67">As mentioned earlier, the tools VarMatch<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>, RTG Tools<sup><xref ref-type="bibr" rid="CR15">15</xref></sup>, and READDI<sup><xref ref-type="bibr" rid="CR16">16</xref></sup> are also used for comparing indel call sets. However, VarMatch and RTG Tools, which use a branch and bound algorithm, are not suitable for population-scale indel call sets like dbSNP and COSMIC due to densely packed indels in those call sets<sup><xref ref-type="bibr" rid="CR3">3</xref></sup>. READDI processes deletions only. These tools are compared with UPS-indel (using the deletion call set of Platypus containing 14,438 deletions for chromosome 11 of the above mentioned single sample from the 1000 Genomes project as the baseline) on the deletion call sets of Dindel, GATK Unified Genotyper, GATK Haplotype Caller, and Pindel as the query call set to check overlap with the baseline. Table&#160;<xref rid="Tab11" ref-type="table">11</xref> shows the comparison for finding the number of true positives.<table-wrap id="Tab11"><label>Table 11</label><caption><p>Comparison between VarMatch, RTG Tools, READDI, and UPS-indel based on the number of true positives found between the baseline and query call sets from chromosome 11 of an individual.</p></caption></table-wrap>
</p><p id="Par68">Table&#160;<xref rid="Tab11" ref-type="table">11</xref> shows that in all cases except for Pindel, UPS-indel finds more common indels than the state-of-the-art tools when comparing multiple indel call sets. These tools are heuristic and therefore ignore indels that violate a particular heuristic criterion. For example, READDI searches for equivalent indels in an indel&#8217;s neighboring region defined by the neighborhood size, and RTG Tools uses a cutoff strategy when the search space is too large. UPS-indel, on the other hand, exhaustively searches for and finds all equivalent indels, thus finds more common indels than the aforementioned tools. Why there are true positives identified by RTG Tools but missed by UPS-indel is because the current version of UPS-indel doesn&#8217;t consider haplotypes formed by the combination of neighboring indels. Consider the following example in Table&#160;<xref rid="Tab12" ref-type="table">12</xref>.<table-wrap id="Tab12"><label>Table 12</label><caption><p>A combination of variants identified by RTG Tools but missed by UPS-indel.</p></caption></table-wrap>
</p><p id="Par69">In the Table&#160;<xref rid="Tab12" ref-type="table">12</xref> example, D3 is equivalent to D1D2. UPS-indel doesn&#8217;t consider the combination of D1 and D2 but rather considers them separately. Therefore, UPS-indel is not able to discover the aforementioned equivalence of the resultant haplotypes. This explains why UPS-indel missed 57 out of 9,893 deletions (where the deletions in a combination were separated by at most 45&#8201;bps) in the Pindel call set that are identified as equivalent by RTG Tools as shown in Table&#160;<xref rid="Tab11" ref-type="table">11</xref>. Nevertheless there are 103 indels that are found as true positive by UPS-indel but missed by RTG Tools.</p></sec></sec><sec id="Sec12" sec-type="conclusion"><title>Conclusion</title><p id="Par70">This paper describes UPS-indel, a user friendly tool that creates a universal positioning system called UPS-coordinates for all indels listed in a VCF file, and exhaustively finds all equivalent indels. The UPS-coordinate is a range of positions where all indels equivalent to a specific indel can occur. Since equivalent indels produce the same mutant sequence and thus have the same biological effect, reporting them as separate indels causes data redundancy and may artificially inflate the statistics of indel variations. Under the proposed universal positioning system, all equivalent indels have the same UPS-coordinate which avoids possible annotation ambiguity. Therefore, by checking the UPS-coordinate, one can easily filter out redundant indels from variant databases. UPS-indel is robust enough to handle complex variants and is able to detect more redundant indels than the currently existing approaches. UPS-indel could be widely used for easy and accurate systematic comparison of indels generated by different indel calling programs or deposited in databases. By eliminating the indel redundancy issue, this work offers the community the proposed universal positioning system to represent indels (so as to avoid ambiguity), which can greatly improve various downstream genomic analyses related to indels.</p><sec id="Sec13"><title>Availability of data and materials</title><p id="Par71">The latest version of dbSNP VCF file can be found here: <ext-link ext-link-type="uri" xlink:href="ftp://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606/VCF/">ftp://ftp.ncbi.nlm.nih.gov/snp/organisms/human_9606/VCF/</ext-link>. VCF file for the COSMIC coding mutation is available at <ext-link ext-link-type="uri" xlink:href="http://grch37-cancer.sanger.ac.uk/cosmic/files?data=/files/grch37/cosmic/v78/CosmicCodingMuts.vcf.gz">http://grch37-cancer.sanger.ac.uk/cosmic/files?data=/files/grch37/cosmic/v78/CosmicCodingMuts.vcf.gz</ext-link> and noncoding mutation dataset is available at <ext-link ext-link-type="uri" xlink:href="http://grch37-cancer.sanger.ac.uk/cosmic/files?data=/files/grch37/cosmic/v78/CosmicNonCodingVariants.vcf.gz">http://grch37-cancer.sanger.ac.uk/cosmic/files?data=/files/grch37/cosmic/v78/CosmicNonCodingVariants.vcf.gz</ext-link>. All of these VCF files contain SNPs, Indels, and other types of genetic variants. To extract only indels, we used VCFtools which is available at <ext-link ext-link-type="uri" xlink:href="http://vcftools.sourceforge.net/">http://vcftools.sourceforge.net/</ext-link>. The command line version of UPS-indel is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/shabbir005/ups-indel">https://github.com/shabbir005/ups-indel</ext-link> with the instruction of how to install and use UPS-indel.</p></sec></sec><sec sec-type="supplementary-material"><title>Electronic supplementary material</title><sec id="Sec14"><p>
<supplementary-material content-type="local-data" id="MOESM1"><media xlink:href="41598_2017_14400_MOESM1_ESM.pdf"><caption><p>Supplementary Materials</p></caption></media></supplementary-material>
</p></sec></sec></body><back><fn-group><fn><p><bold>Electronic supplementary material</bold></p><p>
<bold>Supplementary information</bold> accompanies this paper at 10.1038/s41598-017-14400-1.</p></fn><fn><p>
<bold>Publisher's note:</bold> Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></fn></fn-group><ack><title>Acknowledgements</title><p>The authors thank anonymous reviewers, R. Lim from Memorial Sloan Kettering Cancer Centre, and S. Tithi and V. Vijayan from Virginia Tech for their constructive comments and suggestions. This material is based on research sponsored by Air Force Research Laboratory under agreement number FA8650-09-2-3938. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Air Force Research Laboratory or the U.S. Government. Publication of this article was funded by the Virginia Tech&#8217;s Open Access Subvention Fund.</p></ack><notes notes-type="author-contribution"><title>Author Contributions</title><p>M.S.H. developed the software and conducted the computational experiments. M.S.H., X.W. and L.Z. designed and analysed the experiments. L.W. did the mathematical validation. L.Z. planned and supervised the experimental design. M.S.H., X.W. L.W. and L.Z. wrote the manuscript with input from all authors. All of the authors have read and approved the final manuscript.</p></notes><notes notes-type="COI-statement"><sec id="FPar1"><title>Competing Interests</title><p id="Par72">The authors declare that they have no competing interests.</p></sec></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Assmus</surname><given-names>J</given-names></name><name><surname>Kleffe</surname><given-names>J</given-names></name><name><surname>Schmitt</surname><given-names>AO</given-names></name><name><surname>Brockmann</surname><given-names>GA</given-names></name></person-group><article-title>Equivalent indels&#8211;ambiguous functional classes and redundancy in databases</article-title><source>PLoS One</source><year>2013</year><volume>8</volume><fpage>e62803</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0062803</pub-id><?supplied-pmid 23658777?><pub-id pub-id-type="pmid">23658777</pub-id></element-citation></ref><ref id="CR2"><label>2.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tan</surname><given-names>A</given-names></name><name><surname>Abecasis</surname><given-names>GR</given-names></name><name><surname>Kang</surname><given-names>HM</given-names></name></person-group><article-title>Unified representation of genetic variants</article-title><source>Bioinformatics</source><year>2015</year><volume>31</volume><fpage>2202</fpage><lpage>2204</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btv112</pub-id><?supplied-pmid 25701572?><pub-id pub-id-type="pmid">25701572</pub-id></element-citation></ref><ref id="CR3"><label>3.</label><mixed-citation publication-type="other">Sun, C. &amp; Medvedev, P. VarMatch: robust matching of small variant datasets using flexible scoring schemes. <italic>Bioinformatics</italic>, btw797 (2016).</mixed-citation></ref><ref id="CR4"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Z</given-names></name><name><surname>Wu</surname><given-names>X</given-names></name><name><surname>He</surname><given-names>B</given-names></name><name><surname>Zhang</surname><given-names>L</given-names></name></person-group><article-title>Vindel: a simple pipeline for checking indel redundancy</article-title><source>BMC Bioinformatics</source><year>2014</year><volume>15</volume><fpage>359</fpage><pub-id pub-id-type="doi">10.1186/s12859-014-0359-1</pub-id><?supplied-pmid 25407965?><pub-id pub-id-type="pmid">25407965</pub-id></element-citation></ref><ref id="CR5"><label>5.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hasan</surname><given-names>MS</given-names></name><name><surname>Wu</surname><given-names>X</given-names></name><name><surname>Zhang</surname><given-names>L</given-names></name></person-group><article-title>Performance evaluation of indel calling tools using real short-read data</article-title><source>Human Genomics</source><year>2015</year><volume>9</volume><fpage>1</fpage><lpage>14</lpage><pub-id pub-id-type="doi">10.1186/s40246-015-0042-2</pub-id><pub-id pub-id-type="pmid">25563503</pub-id></element-citation></ref><ref id="CR6"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Consortium</surname><given-names>TGP</given-names></name></person-group><article-title>A map of human genome variation from population-scale sequencing</article-title><source>Nature</source><year>2010</year><volume>467</volume><fpage>1061</fpage><lpage>1073</lpage><pub-id pub-id-type="doi">10.1038/nature09534</pub-id><pub-id pub-id-type="pmid">20981092</pub-id></element-citation></ref><ref id="CR7"><label>7.</label><mixed-citation publication-type="other">Fang, H. <italic>et al</italic>. Indel variant analysis of short-read sequencing data with Scalpel. <italic>bioRxiv</italic>, 028050 (2015).</mixed-citation></ref><ref id="CR8"><label>8.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name><etal/></person-group><article-title>The sequence alignment/map format and SAMtools</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>2078</fpage><lpage>2079</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id><?supplied-pmid 19505943?><pub-id pub-id-type="pmid">19505943</pub-id></element-citation></ref><ref id="CR9"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>DePristo</surname><given-names>MA</given-names></name><etal/></person-group><article-title>A framework for variation discovery and genotyping using next-generation DNA sequencing data</article-title><source>Nature Genetics</source><year>2011</year><volume>43</volume><fpage>491</fpage><lpage>498</lpage><pub-id pub-id-type="doi">10.1038/ng.806</pub-id><?supplied-pmid 21478889?><pub-id pub-id-type="pmid">21478889</pub-id></element-citation></ref><ref id="CR10"><label>10.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Krawitz</surname><given-names>P</given-names></name><etal/></person-group><article-title>Microindel detection in short-read sequence data</article-title><source>Bioinformatics</source><year>2010</year><volume>26</volume><fpage>722</fpage><lpage>729</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btq027</pub-id><?supplied-pmid 20144947?><pub-id pub-id-type="pmid">20144947</pub-id></element-citation></ref><ref id="CR11"><label>11.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>D&#246;ring</surname><given-names>A</given-names></name><name><surname>Weese</surname><given-names>D</given-names></name><name><surname>Rausch</surname><given-names>T</given-names></name><name><surname>Reinert</surname><given-names>K</given-names></name></person-group><article-title>SeqAn an efficient, generic C++ library for sequence analysis</article-title><source>BMC Bioinformatics</source><year>2008</year><volume>9</volume><fpage>11</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-9-11</pub-id><?supplied-pmid 18184432?><pub-id pub-id-type="pmid">18184432</pub-id></element-citation></ref><ref id="CR12"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zook</surname><given-names>JM</given-names></name><etal/></person-group><article-title>Integrating human sequence data sets provides a resource of benchmark SNP and indel genotype calls</article-title><source>Nature Biotechnology</source><year>2014</year><volume>32</volume><fpage>246</fpage><lpage>251</lpage><pub-id pub-id-type="doi">10.1038/nbt.2835</pub-id><?supplied-pmid 24531798?><pub-id pub-id-type="pmid">24531798</pub-id></element-citation></ref><ref id="CR13"><label>13.</label><mixed-citation publication-type="other">Trubetskoy, V. <italic>et al</italic>. Consensus Genotyper for Exome Sequencing (CGES): improving the quality of exome variant genotypes. <italic>Bioinformatics</italic>, btu591 (2014).</mixed-citation></ref><ref id="CR14"><label>14.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Danecek</surname><given-names>P</given-names></name><etal/></person-group><article-title>The variant call format and VCFtools</article-title><source>Bioinformatics</source><year>2011</year><volume>27</volume><fpage>2156</fpage><lpage>2158</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btr330</pub-id><?supplied-pmid 21653522?><pub-id pub-id-type="pmid">21653522</pub-id></element-citation></ref><ref id="CR15"><label>15.</label><mixed-citation publication-type="other">Cleary, J. G. <italic>et al</italic>. Comparing Variant Call Files for Performance Benchmarking of Next-Generation Sequencing Variant Calling Pipelines. <italic>bioRxiv</italic>, 023754 (2015).</mixed-citation></ref><ref id="CR16"><label>16.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wittler</surname><given-names>R</given-names></name><name><surname>Marschall</surname><given-names>T</given-names></name><name><surname>Sch&#246;nhuth</surname><given-names>A</given-names></name><name><surname>M&#228;kinen</surname><given-names>V</given-names></name></person-group><article-title>Repeat-and error-aware comparison of deletions</article-title><source>Bioinformatics</source><year>2015</year><volume>31</volume><fpage>2947</fpage><lpage>2954</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btv304</pub-id><?supplied-pmid 25979471?><pub-id pub-id-type="pmid">25979471</pub-id></element-citation></ref><ref id="CR17"><label>17.</label><mixed-citation publication-type="other">V<italic>ariant Classification</italic>, <ext-link ext-link-type="uri" xlink:href="http://genome.sph.umich.edu/wiki/Variant_classification">http://genome.sph.umich.edu/wiki/Variant_classification</ext-link> (2014).</mixed-citation></ref><ref id="CR18"><label>18.</label><mixed-citation publication-type="other">Li, H. Towards better understanding of artifacts in variant calling from high-coverage samples. <italic>Bioinformatics</italic>, btu356 (2014).</mixed-citation></ref><ref id="CR19"><label>19.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Forbes</surname><given-names>SA</given-names></name><etal/></person-group><article-title>COSMIC: exploring the world&#8217;s knowledge of somatic mutations in human cancer</article-title><source>Nucleic Acids Research</source><year>2015</year><volume>43</volume><fpage>D805</fpage><lpage>D811</lpage><pub-id pub-id-type="doi">10.1093/nar/gku1075</pub-id><?supplied-pmid 25355519?><pub-id pub-id-type="pmid">25355519</pub-id></element-citation></ref><ref id="CR20"><label>20.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Neuman</surname><given-names>JA</given-names></name><name><surname>Isakov</surname><given-names>O</given-names></name><name><surname>Shomron</surname><given-names>N</given-names></name></person-group><article-title>Analysis of insertion&#8211;deletion from deep-sequencing data: software evaluation for optimal detection</article-title><source>Briefings in Bioinformatics</source><year>2013</year><volume>14</volume><fpage>46</fpage><lpage>55</lpage><pub-id pub-id-type="doi">10.1093/bib/bbs013</pub-id><?supplied-pmid 22707752?><pub-id pub-id-type="pmid">22707752</pub-id></element-citation></ref><ref id="CR21"><label>21.</label><mixed-citation publication-type="other">Highnam, G. <italic>et al</italic>. An analytical framework for optimizing variant discovery from personal genomes. <italic>Nature Communications</italic><bold>6</bold> (2015).</mixed-citation></ref><ref id="CR22"><label>22.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Albers</surname><given-names>CA</given-names></name><etal/></person-group><article-title>Dindel: accurate indel calls from short-read data</article-title><source>Genome research</source><year>2011</year><volume>21</volume><fpage>961</fpage><lpage>973</lpage><pub-id pub-id-type="doi">10.1101/gr.112326.110</pub-id><?supplied-pmid 20980555?><pub-id pub-id-type="pmid">20980555</pub-id></element-citation></ref><ref id="CR23"><label>23.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rimmer</surname><given-names>A</given-names></name><etal/></person-group><article-title>Integrating mapping-, assembly-and haplotype-based approaches for calling variants in clinical sequencing applications</article-title><source>Nature genetics</source><year>2014</year><volume>46</volume><fpage>912</fpage><lpage>918</lpage><pub-id pub-id-type="doi">10.1038/ng.3036</pub-id><?supplied-pmid 25017105?><pub-id pub-id-type="pmid">25017105</pub-id></element-citation></ref><ref id="CR24"><label>24.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ye</surname><given-names>K</given-names></name><name><surname>Schulz</surname><given-names>MH</given-names></name><name><surname>Long</surname><given-names>Q</given-names></name><name><surname>Apweiler</surname><given-names>R</given-names></name><name><surname>Ning</surname><given-names>Z</given-names></name></person-group><article-title>Pindel: a pattern growth approach to detect break points of large deletions and medium sized insertions from paired-end short reads</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>2865</fpage><lpage>2871</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp394</pub-id><?supplied-pmid 19561018?><pub-id pub-id-type="pmid">19561018</pub-id></element-citation></ref><ref id="CR25"><label>25.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>H</given-names></name><name><surname>Boutros</surname><given-names>PC</given-names></name></person-group><article-title>VennDiagram: a package for the generation of highly-customizable Venn and Euler diagrams in R</article-title><source>BMC Bioinformatics</source><year>2011</year><volume>12</volume><fpage>1</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-12-1</pub-id><pub-id pub-id-type="pmid">21199577</pub-id></element-citation></ref></ref-list></back></article>