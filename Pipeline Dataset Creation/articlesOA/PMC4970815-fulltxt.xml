<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN" "JATS-archivearticle1.dtd"> 
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName JATS-journalpublishing1.dtd?><?SourceDTD.Version 39.96?><?ConverterInfo.XSLTName jp2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">PLoS One</journal-id><journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="pmc">plosone</journal-id><journal-title-group><journal-title>PLoS ONE</journal-title></journal-title-group><issn pub-type="epub">1932-6203</issn><publisher><publisher-name>Public Library of Science</publisher-name><publisher-loc>San Francisco, CA USA</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">4970815</article-id><article-id pub-id-type="pmid">27482905</article-id><article-id pub-id-type="publisher-id">PONE-D-15-39908</article-id><article-id pub-id-type="doi">10.1371/journal.pone.0157338</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and Analysis Methods</subject><subj-group><subject>Database and Informatics Methods</subject><subj-group><subject>Biological Databases</subject><subj-group><subject>Sequence Databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Molecular Biology</subject><subj-group><subject>Molecular Biology Techniques</subject><subj-group><subject>Sequencing Techniques</subject><subj-group><subject>Sequence Analysis</subject><subj-group><subject>Sequence Databases</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and Analysis Methods</subject><subj-group><subject>Molecular Biology Techniques</subject><subj-group><subject>Sequencing Techniques</subject><subj-group><subject>Sequence Analysis</subject><subj-group><subject>Sequence Databases</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and Analysis Methods</subject><subj-group><subject>Database and Informatics Methods</subject><subj-group><subject>Database Searching</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive Science</subject><subj-group><subject>Cognition</subject><subj-group><subject>Memory</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and Memory</subject><subj-group><subject>Memory</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and Analysis Methods</subject><subj-group><subject>Database and Informatics Methods</subject><subj-group><subject>Database Searching</subject><subj-group><subject>Sequence Similarity Searching</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied mathematics</subject><subj-group><subject>Algorithms</subject><subj-group><subject>BLAST algorithm</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Simulation and modeling</subject><subj-group><subject>Algorithms</subject><subj-group><subject>BLAST algorithm</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject><subj-group><subject>Software-aided sequence analysis</subject><subj-group><subject>BLAST algorithm</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical Sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Optimization</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and Information Sciences</subject><subj-group><subject>Computer Architecture</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and Life Sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Metagenomics</subject></subj-group></subj-group></subj-group></subj-group></article-categories><title-group><article-title>GPU-Acceleration of Sequence Homology Searches with Database Subsequence Clustering</article-title><alt-title alt-title-type="running-head">GPU-Acceleration of Sequence Homology Searches</alt-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Suzuki</surname><given-names>Shuji</given-names></name><xref ref-type="aff" rid="aff001"><sup>1</sup></xref><xref ref-type="aff" rid="aff002"><sup>2</sup></xref></contrib><contrib contrib-type="author"><name><surname>Kakuta</surname><given-names>Masanori</given-names></name><xref ref-type="aff" rid="aff001"><sup>1</sup></xref></contrib><contrib contrib-type="author"><name><surname>Ishida</surname><given-names>Takashi</given-names></name><xref ref-type="aff" rid="aff001"><sup>1</sup></xref><xref ref-type="aff" rid="aff002"><sup>2</sup></xref></contrib><contrib contrib-type="author"><name><surname>Akiyama</surname><given-names>Yutaka</given-names></name><xref ref-type="aff" rid="aff001"><sup>1</sup></xref><xref ref-type="aff" rid="aff002"><sup>2</sup></xref><xref ref-type="corresp" rid="cor001">*</xref></contrib></contrib-group><aff id="aff001">
<label>1</label>
<addr-line>Graduate School of Information Science and Engineering, Tokyo Institute of Technology, Meguro-ku, Tokyo, Japan</addr-line>
</aff><aff id="aff002">
<label>2</label>
<addr-line>Education Academy of Computational Life Sciences (ACLS), Tokyo Institute of Technology, Meguro-ku, Tokyo, Japan</addr-line>
</aff><contrib-group><contrib contrib-type="editor"><name><surname>von Haeseler</surname><given-names>Arndt</given-names></name><role>Editor</role><xref ref-type="aff" rid="edit1"/></contrib></contrib-group><aff id="edit1">
<addr-line>Max F. Perutz Laboratories, AUSTRIA</addr-line>
</aff><author-notes><fn fn-type="COI-statement" id="coi001"><p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p></fn><fn fn-type="con"><p>
<list list-type="simple"><list-item><p><bold>Conceived and designed the experiments:</bold> SS MK TI YA.</p></list-item><list-item><p><bold>Performed the experiments:</bold> SS.</p></list-item><list-item><p><bold>Analyzed the data:</bold> SS.</p></list-item><list-item><p><bold>Contributed reagents/materials/analysis tools:</bold> SS MK.</p></list-item><list-item><p><bold>Wrote the paper:</bold> SS MK TI YA.</p></list-item></list>
</p></fn><corresp id="cor001">* E-mail: <email>akiyama@cs.titech.ac.jp</email></corresp></author-notes><pub-date pub-type="collection"><year>2016</year></pub-date><pub-date pub-type="epub"><day>2</day><month>8</month><year>2016</year></pub-date><volume>11</volume><issue>8</issue><elocation-id>e0157338</elocation-id><history><date date-type="received"><day>9</day><month>9</month><year>2015</year></date><date date-type="accepted"><day>27</day><month>5</month><year>2016</year></date></history><permissions><copyright-statement>&#x000a9; 2016 Suzuki et al</copyright-statement><copyright-year>2016</copyright-year><copyright-holder>Suzuki et al</copyright-holder><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><self-uri content-type="pdf" xlink:href="pone.0157338.pdf"/><abstract><p>Sequence homology searches are used in various fields and require large amounts of computation time, especially for metagenomic analysis, owing to the large number of queries and the database size. To accelerate computing analyses, graphics processing units (GPUs) are widely used as a low-cost, high-performance computing platform. Therefore, we mapped the time-consuming steps involved in GHOSTZ, which is a state-of-the-art homology search algorithm for protein sequences, onto a GPU and implemented it as GHOSTZ-GPU. In addition, we optimized memory access for GPU calculations and for communication between the CPU and GPU. As per results of the evaluation test involving metagenomic data, GHOSTZ-GPU with 12 CPU threads and 1 GPU was approximately 3.0- to 4.1-fold faster than GHOSTZ with 12 CPU threads. Moreover, GHOSTZ-GPU with 12 CPU threads and 3 GPUs was approximately 5.8- to 7.7-fold faster than GHOSTZ with 12 CPU threads.</p></abstract><funding-group><award-group id="award001"><funding-source><institution-wrap><institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100001691</institution-id><institution>Japan Society for the Promotion of Science</institution></institution-wrap></funding-source><award-id>248766</award-id><principal-award-recipient><name><surname>Suzuki</surname><given-names>Shuji</given-names></name></principal-award-recipient></award-group><award-group id="award002"><funding-source><institution>MEXT SPIRE Supercomputational Life Science</institution></funding-source><principal-award-recipient><name><surname>Akiyama</surname><given-names>Yutaka</given-names></name></principal-award-recipient></award-group><award-group id="award003"><funding-source><institution>National Cancer Center</institution></funding-source><principal-award-recipient><name><surname>Akiyama</surname><given-names>Yutaka</given-names></name></principal-award-recipient></award-group><funding-statement>This work was supported by a Grant-in-Aid for the Japan Society for the Promotion of Science Fellows (Grant number 248766) to SS, the Strategic Programs for Innovative Research Field 1 Supercomputational Life Science of the Ministry of Education, Culture, Sports, Science and Technology of Japan to YA, and Cancer Research Development funding from the National Cancer Center of Japan to YA.</funding-statement></funding-group><counts><fig-count count="13"/><table-count count="5"/><page-count count="22"/></counts><custom-meta-group><custom-meta id="data-availability"><meta-name>Data Availability</meta-name><meta-value>Sequencing data of soil metagenome and marine metagenome are available from International Nucleotide Sequence Database Collaboration partners (DDBJ (<ext-link ext-link-type="uri" xlink:href="http://www.ddbj.nig.ac.jp/">http://www.ddbj.nig.ac.jp/</ext-link>), EMBL-EBI (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/">https://www.ebi.ac.uk/</ext-link>), and NCBI (<ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/)">http://www.ncbi.nlm.nih.gov/)</ext-link>) with accession numbers SRR407548 and ERR315856. Sequencing data of human metagenome is available from HMP-DACC (<ext-link ext-link-type="uri" xlink:href="http://hmpdacc.org/">http://hmpdacc.org/</ext-link>) with accession number SRS011098.</meta-value></custom-meta></custom-meta-group></article-meta><notes><title>Data Availability</title><p>Sequencing data of soil metagenome and marine metagenome are available from International Nucleotide Sequence Database Collaboration partners (DDBJ (<ext-link ext-link-type="uri" xlink:href="http://www.ddbj.nig.ac.jp/">http://www.ddbj.nig.ac.jp/</ext-link>), EMBL-EBI (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/">https://www.ebi.ac.uk/</ext-link>), and NCBI (<ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/)">http://www.ncbi.nlm.nih.gov/)</ext-link>) with accession numbers SRR407548 and ERR315856. Sequencing data of human metagenome is available from HMP-DACC (<ext-link ext-link-type="uri" xlink:href="http://hmpdacc.org/">http://hmpdacc.org/</ext-link>) with accession number SRS011098.</p></notes></front><body><sec sec-type="intro" id="sec001"><title>Introduction</title><p>Sequence homology search is widely used in bioinformatics. This method is needed to identify evolutionary relations among sequences. It can also be used to estimate possible functions and structures of DNA and proteins. Nonetheless, sequence homology searches have become a major bottleneck of such analyses, especially metagenomic analyses, because of the increasing number of queries and database size.</p><p>In a metagenomic analysis, environmental samples frequently include DNA sequences from several species, and the reference database often does not contain closely related homologous sequences. Therefore, a sequence homology search is used to identify novel genes in these samples. In a typical metagenomic analysis, reads are translated into protein-coding sequences and assigned to protein families by means of a homology search in publicly available databases such as the Kyoto Encyclopedia of Genes and Genomes (KEGG) [<xref rid="pone.0157338.ref001" ref-type="bibr">1</xref>, <xref rid="pone.0157338.ref002" ref-type="bibr">2</xref>], COG [<xref rid="pone.0157338.ref003" ref-type="bibr">3</xref>, <xref rid="pone.0157338.ref004" ref-type="bibr">4</xref>] and Pfam [<xref rid="pone.0157338.ref005" ref-type="bibr">5</xref>]. The BLASTX software [<xref rid="pone.0157338.ref006" ref-type="bibr">6</xref>, <xref rid="pone.0157338.ref007" ref-type="bibr">7</xref>] is commonly used for such binning and classification searches. To identify homologs that may not have high identity of nucleotide sequences, BLASTX translates nucleotide sequences into protein sequences because such sequences are often more similar than the original nucleotide sequences [<xref rid="pone.0157338.ref008" ref-type="bibr">8</xref>, <xref rid="pone.0157338.ref009" ref-type="bibr">9</xref>]. Nonetheless, the search speed of BLASTX is insufficient for analysis of large quantities of sequence data now available. For instance, sequence homology searches for metagenomic data produced by HiSeq2500, which is one of the latest DNA sequencers, require approximately 100,000 days with BLASTX on a single workstation containing 12 CPU cores.</p><p>Developers of several homology search tools currently available, such as RAPSearch [<xref rid="pone.0157338.ref010" ref-type="bibr">10</xref>, <xref rid="pone.0157338.ref011" ref-type="bibr">11</xref>], GHOSTX [<xref rid="pone.0157338.ref012" ref-type="bibr">12</xref>], GHOSTZ [<xref rid="pone.0157338.ref013" ref-type="bibr">13</xref>], and DIAMOND[<xref rid="pone.0157338.ref014" ref-type="bibr">14</xref>], claim that their tools search faster than BLASTX, without a significant decrease in search sensitivity. GHOSTZ is one of the fastest homology search tools. It uses the database subsequence clustering method. This method clusters similar subsequences from a database to perform an efficient seed search and ungapped extension by reducing the number of alignment candidates on the basis of triangle inequality. GHOSTZ achieved a 2-fold increase in speed, without a substantial decrease in search sensitivity, as compared to GHOSTZ without the database subsequence clustering method. Originally, GHOSTZ was approximately 2.2&#x02013;2.8 times faster than RAPSearch and approximately 185&#x02013;261 times faster than BLASTX. Nevertheless, the sequencing technology has since improved and bigger sequence data can now be obtained. Therefore, the speed of homology searches needs a further increase to facilitate efficient metagenomic analysis.</p><p>To accelerate computing analyses, graphics processing units (GPUs) are widely used as a low-cost high-performance computing platform. Among top-level supercomputers worldwide, several systems incorporate multiple CPU cores and GPUs within a node, as in TSUBAME 2.5 of the Tokyo Institute of Technology. GPUs have greater computational power and memory bandwidth than CPUs do. Recently, several bioinformatic tools have been enhanced by means of GPUs [<xref rid="pone.0157338.ref015" ref-type="bibr">15</xref>&#x02013;<xref rid="pone.0157338.ref017" ref-type="bibr">17</xref>].</p><p>Several tools for sequence homology searches on the basis of GPUs have also been developed. They are roughly classified into 2 types: implementation of the Smith-Waterman algorithm [<xref rid="pone.0157338.ref018" ref-type="bibr">18</xref>] and a seed-and-extend algorithm such as BLAST. GPU accelerated Smith-Waterman algorithms [<xref rid="pone.0157338.ref019" ref-type="bibr">19</xref>&#x02013;<xref rid="pone.0157338.ref021" ref-type="bibr">21</xref>] and seed-and-extend algorithms for DNA sequences [<xref rid="pone.0157338.ref022" ref-type="bibr">22</xref>, <xref rid="pone.0157338.ref023" ref-type="bibr">23</xref>] were several times faster than those of implementation for CPU with multiple CPU cores. SW#db [<xref rid="pone.0157338.ref020" ref-type="bibr">20</xref>] is one of the GPU-based Smith-Waterman algorithms, and showed that when it is based on 1 GPU, it works 4- to 5-fold faster than does SSEARCH [<xref rid="pone.0157338.ref024" ref-type="bibr">24</xref>], which is a CPU-based Smith-Waterman algorithm, with 4 CPU cores. G-BLASTN [<xref rid="pone.0157338.ref022" ref-type="bibr">22</xref>] is one of the GPU-based BLAST with 1 GPU achieves 7.2-fold acceleration relative to the MEGABLAST mode of NCBI-BLAST [<xref rid="pone.0157338.ref025" ref-type="bibr">25</xref>] with 4 CPU cores and 1.6-fold acceleration relative to the BLASTN mode of NCBI-BLAST with 4 CPU cores. On the other hand, GPU accelerated seed-and-extend algorithms for protein sequences, such as GPU-BLAST [<xref rid="pone.0157338.ref026" ref-type="bibr">26</xref>] and CUDA-BLASTP[<xref rid="pone.0157338.ref027" ref-type="bibr">27</xref>], achieved limited success. GPU-BLAST [<xref rid="pone.0157338.ref026" ref-type="bibr">26</xref>] and CUDA-BLASTP[<xref rid="pone.0157338.ref027" ref-type="bibr">27</xref>] with 1 GPU achieve 6-fold and 5- to 6-fold acceleration, respectively, relative to the BLASTP mode of NCBI-BLAST with a single CPU core. These results mean that the acceleration of GPU-BLAST or CUDA-BLASTP with 1 GPU is estimated to be less than 1.5-fold as compared to NCBI-BLAST with a single CPU socket with 4 CPU cores. Therefore, mapping an algorithm of a protein sequence homology search onto GPUs is still a challenging task. In addition, faster algorithms of protein sequence homology searches than BLAST have not yet been mapped onto GPUs.</p><p>In this study, we mapped the GHOSTZ algorithm onto GPUs to accelerate sequence homology searches. This task was more challenging than GPU implementation of BLASTX because GHOSTZ is faster than BLASTX. We introduced several speed-up methods in addition to simple GPU mapping of the algorithm. To accelerate a sequence homology search on GPUs, we optimized access of the data in the GPU memory. Moreover, we reduced the waiting time for synchronization to attain full use of a computing environment by setting up GHOSTZ-GPU to reduce inactive threads in gapped extension and to use asynchronous execution on CPU and GPU. GHOSTZ-GPU was implemented in C++ and CUDA 6.0. It is distributed under the BSD 2-clause license and is available for download at <ext-link ext-link-type="uri" xlink:href="https://github.com/akiyamalab/ghostz-gpu">https://github.com/akiyamalab/ghostz-gpu</ext-link>.</p></sec><sec sec-type="materials|methods" id="sec002"><title>Methods</title><sec id="sec003"><title>GHOSTZ</title><p>The workflow of GHOSTZ is shown in <xref ref-type="fig" rid="pone.0157338.g001">Fig 1</xref>. The GHOSTZ protocol consists of 5 main steps: seed search, similarity filtering, ungapped extension, chain filtering, and gapped extension. To accelerate the sequence homology search with the GHOSTZ algorithm, subsequences are extracted from database sequences and similar subsequences are clustered during preprocessing for the sequence homology search. Subsequently, hash tables are constructed containing indexes for the subsequences within database sequences. GHOSTZ uses the hash tables to select seeds for the alignments from representative sequences in the clusters. In the sequence homology search, the seed search process selects seeds that are subsequences of database sequences similar to those of the query sequence. Similarity filtering is then performed to reduce the number of seeds, whereby the distance between a query subsequence and the cluster representative is calculated, and the lower bounds of the distance between the query subsequence and other members of the cluster are computed on the basis of triangle inequality. If the computed lower bound is lower than or equal to the distance threshold, then the seed is taken to the next step, that is, the ungapped extension, to assess the homology between the query and the member sequences of the cluster. Finally, chain filtering is used to bring similar extended seeds together, and gapped extension is performed to obtain an alignment from the extended seed that contains gaps.</p><fig id="pone.0157338.g001" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g001</object-id><label>Fig 1</label><caption><title>The workflow of GHOSTZ.</title></caption><graphic xlink:href="pone.0157338.g001"/></fig><p>The GHOSTZ system has several limitations. <xref rid="pone.0157338.t001" ref-type="table">Table 1</xref> shows the ratio of calculation time for each step of GHOSTZ. The ungapped-extension step requires most (44.3%) of the total calculation time. Nonetheless, mapping of an ungapped extension onto GPUs by itself is insufficient for improvement of the search speed. This is because other calculations also require considerable time, for example, gapped extension and the distance calculation, which is a subprocess of similarity filtering.</p><table-wrap id="pone.0157338.t001" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.t001</object-id><label>Table 1</label><caption><title>Average and standard deviation of computation time of each component of a GHOSTZ calculation with 1 CPU thread.</title></caption><alternatives><graphic id="pone.0157338.t001g" xlink:href="pone.0157338.t001"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="left" rowspan="1" colspan="1"/><th align="left" rowspan="1" colspan="1">CPU Time (sec.)</th><th align="left" rowspan="1" colspan="1">Ratio (%)</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">Distance calculation</td><td align="left" rowspan="1" colspan="1">1340.7 &#x000b1; 45.7</td><td align="left" rowspan="1" colspan="1">3.2 &#x000b1; 0.0</td></tr><tr><td align="left" rowspan="1" colspan="1">Ungapped Extension</td><td align="left" rowspan="1" colspan="1">18554.8 &#x000b1; 695.8</td><td align="left" rowspan="1" colspan="1">44.3 &#x000b1; 0.1</td></tr><tr><td align="left" rowspan="1" colspan="1">Gapped Extension</td><td align="left" rowspan="1" colspan="1">17191.5 &#x000b1; 672.7</td><td align="left" rowspan="1" colspan="1">41.1 &#x000b1; 0.2</td></tr><tr><td align="left" rowspan="1" colspan="1">Others</td><td align="left" rowspan="1" colspan="1">4772.6 &#x000b1; 116.5</td><td align="left" rowspan="1" colspan="1">11.4 &#x000b1; 0.3</td></tr><tr><td align="left" rowspan="1" colspan="1">Total</td><td align="left" rowspan="1" colspan="1">41859.6 &#x000b1; 1499.1</td><td align="left" rowspan="1" colspan="1">100.0 &#x000b1; 0.0</td></tr></tbody></table></alternatives><table-wrap-foot><fn id="t001fn001"><p>This profile was obtained from the calculation involving 1,000,000 short DNA reads in metagenomic sequences of a soil microbiome (accession number SRR407548, read length 150 bp) as queries and KEGG GENES (as of May 2013) as the database. The reads were randomly selected from dataset SRR407548. The profile was obtained on a workstation with a single CPU core of 2.93 GHz (Intel Xeon 5670 processor) and 54 GB of memory. GHOSTZ was compiled by means of GCC (version 4.3.4) with the -O3 optimization option. To obtain a profile, the functions of distance calculation, ungapped extension, and gapped extension were not in-lined. This experiment was repeated 5 times.</p></fn></table-wrap-foot></table-wrap></sec><sec id="sec004"><title>GPU Implementation Overview</title><p>To improve the search speed of GHOSTZ with GPUs, the mapping of the steps, including distance calculation, ungapped extension, and gapped extension, onto GPUs is evidently crucial for achievement of effective acceleration. Therefore, we mapped these steps onto GPUs. Current computing systems often have multiple CPU cores and multiple GPUs in a computing node. Therefore, we focused on a computing node with multiple CPU cores and multiple GPUs. For the GPU implementation, we used NVIDIA&#x02019;s CUDA 6.0.</p><p>The CUDA software contains a function (performed on a GPU) called a kernel. It represents the operations to be launched by a single CPU thread and is invoked as a set of concurrently executed GPU threads. These threads are organized in a hierarchy consisting of thread blocks and grids. A thread block is a set of concurrent threads, and a grid is a set of independent thread blocks. The kernel uses several types of memory, such as global memory, local memory, shared memory, and registers. Global memory is used for communication between a CPU and GPU. Local memory stores local variables of a thread when a register is not used. Although global and local memory are larger than other memory types in the GPU, access to them is slow. Therefore, it is important for GPU calculations to reduce the number of accesses to these memory types, often via the use of shared memory, to which the access is faster than to either global or local memory. Shared memory is also used to communicate among threads in a block. However, it is smaller than either global or local memory. Therefore, it is used as a software cache.</p><p>Simply mapping the distance calculation, ungapped extension, and gapped extension onto a GPU is insufficient for acceleration of GHOSTZ. It involves a number of accesses to global memory, the large inactive threads in a GPU, and the lengthy computation time of other CPU calculations. Therefore, we applied 4 main optimizations: memory access for sequence data, memory access for dynamic programing (DP) matrices and load balancing in gapped extension, asynchronous execution on the CPU and GPU, and addition of a special thread for loading the database.</p></sec><sec id="sec005"><title>Optimization of the Distance Calculation</title><p>The distance calculation is a part of similarity filtering. Distance calculations are independent of each other. Therefore, these calculations can be performed within different GPU threads. Nevertheless, when each thread executes a different task in a block, the memory access for the query or database sequence is random. These memory accesses take a long computational time. Therefore, it is important to utilize efficiency of the GPU to reduce the number of random accesses to global memory for sequence data. We use 2 approaches to reduce the number of random accesses: &#x0201c;vectorized memory access&#x0201d; and &#x0201c;group memory access&#x0201d;.</p><p>A character in a protein sequence is represented by 5 bits in GHOSTZ-GPU because the alphabet size for a protein is 20. Therefore, an 8-bit memory module is sufficient for each character in the sequence. On the other hand, if 8 bits are used for character access, then a large number of accesses to global memory are required for the protein sequence. To solve this problem, vectorized load instruction (64- or 128-bit access) is often used to reduce the number of global memory accesses and is called &#x0201c;vectorized memory access&#x0201d; in CUDA programming. When we use this memory access method, the accessed data have to be assigned to a consecutive region in global memory. Suppose <italic>w</italic> is the number of characters to be accessed once and <italic>l</italic> is the length of the sequence for calculation. With this memory access, the number of accesses to global memory is &#x02308;(<italic>l</italic> + <italic>w</italic> &#x02212; 1)/<italic>w</italic>&#x02309;. In GHOSTZ-GPU, the sequence data are allocated to consecutive regions in global memory. The sequences in a database are connected with inserted delimiters to transform them into a long single sequence. Query sequences are connected in the same manner as database sequences are. Therefore, GHOSTZ-GPU can use vectorized memory access for sequence data. GHOSTZ-GPU uses 64-bit access to protein sequences. In distance calculations, the length of the sequence used <italic>l</italic> is 10. In the GPU, the bit size of a character is 5. Therefore, when GHSOTZ-GPU uses 64-bit memory access, <italic>w</italic> is 12. In this case, the number of memory accesses for sequence data is 2.</p><p>Moreover, we propose &#x0201c;group memory access&#x0201d; to speed up global memory access. For group memory access, we subdivided threads in a block into small groups. Then, the threads in a group load the data with communication among them. The threads in a group access one consecutive region at a time in global memory. These memory accesses are merged into a single transaction in a GPU, called coalesced memory access, which is used when threads in a block access the same region in global memory. With coalesced memory access for sequence data, the number of memory accesses for sequence data is reduced. The threads that have the same group ID are combined into 1 group. The group ID is calculated as follows. If <italic>i</italic><sub><italic>thread</italic></sub> is the thread ID and <italic>N</italic><sub><italic>member</italic></sub> is the number of threads in a group, then let us assume that <italic>i</italic><sub><italic>group</italic></sub> = &#x0230a;<italic>i</italic><sub><italic>thread</italic></sub>/<italic>N</italic><sub><italic>member</italic></sub>&#x0230b; is the group ID of the thread <italic>i</italic><sub><italic>thread</italic></sub>. Examples of memory access with and without group memory access are shown in <xref ref-type="fig" rid="pone.0157338.g002">Fig 2</xref>. For group memory access, we used shared memory to temporarily store sequence data and for communication among threads in a group. The number of accesses to global memory decreases with the use of this memory. In the distance calculation, the number of threads in a group <italic>N</italic><sub><italic>member</italic></sub> is 2. <italic>l</italic> and <italic>w</italic> have the same value as with vectorized memory access. In this case, the minimal number of memory accesses with group memory access is only 1.</p><fig id="pone.0157338.g002" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g002</object-id><label>Fig 2</label><caption><title>Examples of sequence data accesses.</title><p>A) An example of sequence data accesses without group memory access. B) An example of sequence data accesses with group memory access.</p></caption><graphic xlink:href="pone.0157338.g002"/></fig><p>Moreover, the distance calculation also has memory access to global memory for the positions of seeds. In addition, the memory access for the postion of a seed is required for coalesced memory access to reduce the number of global memory accesses. The positions of a seed are a query position and database position. We use the structure of array for the positions of seeds to use coalesced memory access for these data. The structure of an array is often used for coalesced memory access in the structure of GPU computing.</p><p>
<xref ref-type="fig" rid="pone.0157338.g003">Fig 3</xref> shows a pseudocode for distance calculation. The subsequences are loaded into shared memory from global memory with vectorized memory access and group memory access (lines 14 and 15 in <xref ref-type="fig" rid="pone.0157338.g003">Fig 3</xref>). After that, the distance between the query subsequence and database subsequence is calculated.</p><fig id="pone.0157338.g003" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g003</object-id><label>Fig 3</label><caption><title>The pseudocode of distance calculation.</title></caption><graphic xlink:href="pone.0157338.g003"/></fig><p>Using these optimizations, we reduced the number of global memory accesses.</p></sec><sec id="sec006"><title>Optimization of Ungapped Extension</title><p>Most of homology search algorithms perform ungapped extension before gapped extension to reduce the number of candidates because gapped extension generally requires a lot of computation time. Because ungapped extensions are independent of each other, these calculations can also be performed in different GPU threads.</p><p>Ungapped extension requires a number of memory accesses for sequence data and the positions of seeds. We use vectorized memory access, group memory access, and the structure of an array for the positions of seeds during ungapped extension, as in distance calculation. On the other hand, the use of group memory access to all sequence data leads to performance degradation because the lengths of extensions vary (X-dropoff [<xref rid="pone.0157338.ref006" ref-type="bibr">6</xref>, <xref rid="pone.0157338.ref007" ref-type="bibr">7</xref>] is used [<xref rid="pone.0157338.ref013" ref-type="bibr">13</xref>] for extensions). The threads that finish ungapped extensions wait for the other threads. Thus, we use group memory access only for the first memory access for each sequence. The number of members in a group is 4. If more memory accesses are required, GHOSTZ-GPU uses only vectorized memory access for the remaining sequence data.</p><p>
<xref ref-type="fig" rid="pone.0157338.g004">Fig 4</xref> shows a pseudocode for ungapped extension of the rightward on a GPU. Ungapped extension of the leftward on a GPU is almost the same as ungapped extension of the rightward on a GPU. The subsequences are loaded into shared memory from global memory with vectorized memory access and group memory access (lines 15 and 16 in <xref ref-type="fig" rid="pone.0157338.g004">Fig 4</xref>). Then, the ungapped-extension score between the query subsequence and database subsequence is calculated. If the ungapped extension is not terminated in line 17 of <xref ref-type="fig" rid="pone.0157338.g004">Fig 4</xref>, then the ungapped extension is continued until its termination (lines 23&#x02013;30 in <xref ref-type="fig" rid="pone.0157338.g004">Fig 4</xref>). The lengths of this loop are different for every seed. Thus, group memory access is not used in this loop (lines 24 and 25 in <xref ref-type="fig" rid="pone.0157338.g004">Fig 4</xref>).</p><fig id="pone.0157338.g004" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g004</object-id><label>Fig 4</label><caption><title>The pseudocode of ungapped extension.</title></caption><graphic xlink:href="pone.0157338.g004"/></fig></sec><sec id="sec007"><title>Optimization of Gapped Extension</title><p>During gapped extension, the seeds are extended with gaps. Gapped extensions are independent of each other. Therefore, these calculations can be performed in different GPU threads. There are 2 main reasons why gapped extension increases computation time in a GPU calculation: the access to global memory and branch divergence.</p><p>Gapped extension mainly involves memory accesses for sequence data, the positions of seeds, and the DP matrix. Memory accesses of gapped extensions for sequence data and the positions of seeds are also optimized in the same manner as for ungapped extensions. <xref ref-type="fig" rid="pone.0157338.g005">Fig 5</xref> shows a pseudocode for gapped extension of the rightward on a GPU. Gapped extension of the leftward on a GPU is almost the same as gapped extension of the rightward on the GPU. The subsequences are loaded from global memory with vectorized memory access and group memory access (lines 15 and 19 in <xref ref-type="fig" rid="pone.0157338.g005">Fig 5</xref>). The remaining sequence data are loaded with vectorized memory access (lines 17 and 25 in <xref ref-type="fig" rid="pone.0157338.g005">Fig 5</xref>). After loading the sequence data, we calculate the score from these sequence data. If the gapped extension is not terminated in line 21 of <xref ref-type="fig" rid="pone.0157338.g005">Fig 5</xref>, then the gapped extension is continued until the termination (lines 24&#x02013;29 in <xref ref-type="fig" rid="pone.0157338.g005">Fig 5</xref>).</p><fig id="pone.0157338.g005" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g005</object-id><label>Fig 5</label><caption><title>The pseudocode of gapped extension.</title></caption><graphic xlink:href="pone.0157338.g005"/></fig><p>In addition, memory accesses for the DP matrix in gap extensions also require a lengthy computation time. Each cell in the DP matrix is computed by other cells, and the greatest value of a cell is termed &#x0201c;the score&#x0201d; in gapped extension. When we calculate a gapped-alignment score only, we do not need to store all data in the DP matrix. Thus, GHOSTZ-GPU stores only 1 column of the DP matrix in local memory of the GPU in the same way as BLAST does [<xref rid="pone.0157338.ref007" ref-type="bibr">7</xref>]. The length of a column in the DP matrix depends on the query length, which is generally shorter than the database sequence in current metagenomic analyses. Local memory in a GPU is slower than a register or shared memory. For acceleration of the gapped-extension process, we have to reduce the number of accesses to local memory. This task is accomplished by adding another loop to those used to calculate gapped extension and by recruiting shared memory for this loop. The calculation workflows of GHOSTZ and GHOSTZ-GPU during gapped extension are shown in <xref ref-type="fig" rid="pone.0157338.g006">Fig 6</xref>. The loop length <italic>k</italic> in GHOSTZ-GPU is 4. This loop requires additional memory access for this loop. Nevertheless, the required data for this loop can be assigned to shared memory. Therefore, the memory accesses for this loop are quick. The shared memory during gapped extension is reused as in group memory access. Thus, the additional shared memory allocations for this loop are not needed. With this optimization, the search results with GHOSTZ-GPU may be different from those with GHOSTZ. The gapped extension is terminated when the score drops by more than <italic>X</italic> below the maximal score previously seen. Thus, the difference in the calculation order for filling the cells in the DP matrix may shift the terminated cells when X-dropoff is used. Nonetheless, the alignments are not changed when they have a high score. This is because the alignment paths rarely pass though the cell near a terminated one. Therefore, we believe that the search results are influenced by this optimization only slightly.</p><fig id="pone.0157338.g006" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g006</object-id><label>Fig 6</label><caption><title>Examples of gapped extension on a GPU.</title><p>A) An example of accesses for sequence data in GHOSTZ. B) An example of gapped extension with the short loop.</p></caption><graphic xlink:href="pone.0157338.g006"/></fig><p>Moreover, it is important to decrease branch divergence to reduce the computation time of gapped extension. Several threads in a block in the GPU execute the same instruction at any given moment, leading to branch divergence. For instance, when some threads in a block run an &#x0201c;if&#x0201d; statement, threads split in two for the branch, and the GPU causes all paths to be executed sequentially, even though each thread executes only one of the paths. On the other hand, when the threads run a &#x0201c;while&#x0201d; statement, the threads wait for execution of another thread to end. Branch divergence causes an increase in computation time and the number of inactive GPU threads. Therefore, there is a need to reduce branch divergence. We used the DP matrix to calculate the score of gapped extension, and the primary cause of the problem was the difference in size of the DP matrix among gapped extensions. The order of calculations for cells in GHOSTZ-GPU gapped extension is shown in <xref ref-type="fig" rid="pone.0157338.g006">Fig 6B</xref>. The loop for query length is an inner one during gapped extension. Therefore, the query length has a greater influence on branch divergence than the database sequence length does. For better load balancing, GHOSTZ-GPU sorts seeds by query length and then assigns a seed to a GPU thread successively. With this approach, the lengths of inner loops in gapped extensions are sorted in GHOSTZ-GPU.xtensions are sorted in GHOSTZ-GPU.</p></sec><sec id="sec008"><title>Asynchronous Execution on a CPU and GPU</title><p>To make full use of a computing environment with GPUs, an overlap between CPU and GPU calculations is necessary. GHOSTZ-GPU divides a process with a CPU and GPU into 2 main phases. The first phase consists of a seed search and similarity filtering. The second phase consists of chain filtering and gapped extension. CPU threads calculate data independently in each phase. To create an overlap between CPU and GPU calculations, the double-buffering technique is used for CPU and GPU types of memory. Two buffers are used as input and output to store results of the GPU calculations. Because of this method, the waiting time for synchronization of the CPU and GPU is reduced. Moreover, the computation time of memory copying between a CPU and GPU is hidden by the CPU and GPU calculations.</p><p>The first phase is shown in <xref ref-type="fig" rid="pone.0157338.g007">Fig 7</xref>. GHOSTZ uses 3 tables, <italic>B</italic><sub><italic>e</italic></sub>, <italic>B</italic><sub><italic>r</italic></sub>, and <italic>B</italic><sub><italic>m</italic></sub> for a seed search. <italic>B</italic><sub><italic>e</italic></sub> is a hash table for the representatives of clusters where the cluster contains only 1 member. <italic>B</italic><sub><italic>r</italic></sub> is a hash table for a representative of a cluster (not stored in <italic>B</italic><sub><italic>e</italic></sub>). <italic>B</italic><sub><italic>m</italic></sub> is a table for members of clusters. As shown in <xref ref-type="fig" rid="pone.0157338.g007">Fig 7</xref>, a seed search is performed against <italic>B</italic><sub><italic>r</italic></sub> for distance calculation. Then, distances for similarity filtering are calculated on the GPU. The seed search against hash table is performed on the CPU simultaneously with this GPU calculation because this seed search is independent of similarity filtering. If the distance calculation is finished on the GPU, ungapped-extension calculation on the GPU is initiated. Once the seed search against <italic>B</italic><sub><italic>e</italic></sub> on the CPU is completed, the seed search and similarity filtering for hash tables <italic>B</italic><sub><italic>r</italic></sub> and <italic>B</italic><sub><italic>m</italic></sub> are performed on the CPU. After that, seeds from tables <italic>B</italic><sub><italic>r</italic></sub> and <italic>B</italic><sub><italic>m</italic></sub> are built, and ungapped extension for these seeds is performed. This phase is continued until the process for all subsequences of queries is completed.</p><fig id="pone.0157338.g007" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g007</object-id><label>Fig 7</label><caption><title>The workflow of the first phase in GHOSTZ-GPU.</title></caption><graphic xlink:href="pone.0157338.g007"/></fig><p>The second phase is shown in <xref ref-type="fig" rid="pone.0157338.g008">Fig 8</xref>. Chain filtering is performed on the CPU. If the memory is full, then seeds are sorted by query length for alignment, and then gapped extension is performed using these seeds. This phase continues until the process for all seeds is completed.</p><fig id="pone.0157338.g008" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g008</object-id><label>Fig 8</label><caption><title>The workflow of the second phase of GHOSTZ-GPU.</title></caption><graphic xlink:href="pone.0157338.g008"/></fig><p>If multiple GPUs are used, then they are individually used by CPU threads. Each GPU is assigned to almost the same number of CPU threads. Each CPU thread has different global memory in the GPU. Because GPUs do not require communication among one another with this approach, GHOSTZ-GPU utilizes multiple GPUs effectively.</p></sec><sec id="sec009"><title>Optimization of Loading a Database</title><p>Loading a database, including indexes, represents a larger fraction of the computation time in GHOSTZ-GPU than in GHOSTZ because a sequence homology search is faster with a GPU calculation. GHOSTZ-GPU uses a special CPU thread to hide the latency of loading the database from threads for a sequence homology search. In GHOSTZ and GHOSTZ-GPU, a database is divided into several chunks to reduce working memory. The default chunk size is 1 GB. These tools sequentially search each database chunk and merge its results with the results of previous chunk searches. In GHOSTZ-GPU, the chunks are loaded sequentially by a special thread. <xref ref-type="fig" rid="pone.0157338.g009">Fig 9</xref> shows the workflow with this thread. While the other threads perform the sequence homology searches against a database chunk, this thread loads the next database chunk. Due to this approach, the computation time of loading the database is hidden during the sequence homology search.</p><fig id="pone.0157338.g009" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g009</object-id><label>Fig 9</label><caption><title>The workflow for loading of a database thread.</title></caption><graphic xlink:href="pone.0157338.g009"/></fig></sec></sec><sec sec-type="results" id="sec010"><title>Results</title><sec id="sec011"><title>Datasets and Computing Environment</title><p>We used the same dataset as Suzuki <italic>et al.</italic>[<xref rid="pone.0157338.ref013" ref-type="bibr">13</xref>] did for evaluation. We used amino acid sequences from the KEGG GENES database (as of May 2013). This database contains approximately 10 million protein sequences, which comprise a total of approximately 3.6 billion residues. For the query sequences, we used 3 datasets: metagenomic sequences of a soil microbiome (accession number SRR407548, read length 150 bp), metagenomic sequences of a human microbiome (accession number SRS011098, read length 101 bp), and metagenomic sequences of a marine microbiome (accession number ERR315856, read length 104 bp). SRR407548 and ERR315856 were obtained from the DNA Data Bank of Japan (DDBJ) Sequence Read Archive. SRS011098 was obtained from the web site of the Data Analysis and Coordination Center for the Human Microbiome Project (<ext-link ext-link-type="uri" xlink:href="http://www.hmpdacc.org/">http://www.hmpdacc.org/</ext-link>). We used the whole metagenomic shotgun sequencing data from dataset SRS011098. To evaluate the computation time, 1,000,000 randomly selected short DNA reads were used for all datasets. Each experiment was repeated 5 times, but we used only 10,000 randomly selected short DNA reads and used each tool once to evaluate the search sensitivity levels because of the computational costs. All the calculations were conducted on the TSUBAME 2.5 supercomputing system, Tokyo Institute of Technology, Japan. We used this node in all experiments, which consists of two 2.93-GHz Intel Xeon 5670 processors (6 cores), 54-GB memory, 3 NVIDIA Tesla K20Xes, and SUSE Linux Enterprise Server 11 Service Pack 3.</p><p>The parameters of GHOSTZ and GHOSTZ-GPU were set to default values. To execute GHOSTZ and GHOSTZ-GPU, similar sequences were arranged close to each other in the database file based on the results of CD-HIT [<xref rid="pone.0157338.ref028" ref-type="bibr">28</xref>] before construction of database indexes.</p></sec><sec id="sec012"><title>Evaluation of the Acceleration by GPUs</title><p>To evaluate acceleration by GPUs and the relation between the number of GPUs and the acceleration, we ran GHOSTZ-GPU and GHOSTZ with their default options, except for the multithreading option. We used 1,000,000 randomly selected short DNA reads from dataset SRR407548 as queries in this evaluation. <xref ref-type="fig" rid="pone.0157338.g010">Fig 10</xref> shows the averages and standard deviations of the computation time for each program with 1, 2, 4, 8, or 12 CPU threads and 1, 2, or 3 GPUs. According to the figure, GHOSTZ and GHOSTZ-GPU with 12 CPU threads show the best performance. In addition, GHOSTZ-GPU showed acceleration of approximately 4.1, 6.2, and 7.7-fold when we used 12 CPU threads with 1, 2, or 3 GPUs, respectively, as compared to GHOSTZ with 12 CPU threads.</p><fig id="pone.0157338.g010" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g010</object-id><label>Fig 10</label><caption><title>Computation time with multithreading of a CPU and multiple GPUs.</title></caption><graphic xlink:href="pone.0157338.g010"/></fig></sec><sec id="sec013"><title>Evaluation of the Acceleration of Each Component by a GPU</title><p>For this purpose, we ran GHOSTZ-GPU and GHOSTZ with their default options. We used the same dataset as in <xref rid="pone.0157338.t001" ref-type="table">Table 1</xref>. <xref rid="pone.0157338.t002" ref-type="table">Table 2</xref> shows the averages and standard deviations of computation time for each step of GHOSTZ with 1 CPU thread and GHOSTZ-GPU with 1 CPU thread and 1 GPU. With a GPU, we found that distance calculation, ungapped extension, and gapped extension in GHOSTZ-GPU were accelerated by the factor of 28.7, 33.3, or 36.6, respectively, relative to GHOSTZ.</p><table-wrap id="pone.0157338.t002" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.t002</object-id><label>Table 2</label><caption><title>Averages and standard deviations of computation time for each step of GHOSTZ-GPU and GHOSTZ calculations.</title></caption><alternatives><graphic id="pone.0157338.t002g" xlink:href="pone.0157338.t002"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="left" rowspan="1" colspan="1"/><th align="left" rowspan="1" colspan="1">GHOSTZ (sec.)</th><th align="left" rowspan="1" colspan="1">GHOSTZ-GPU (sec.)</th><th align="left" rowspan="1" colspan="1">Acceleration Ratio</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">Distance calculation</td><td align="left" rowspan="1" colspan="1">1340.7 &#x000b1; 45.7</td><td align="left" rowspan="1" colspan="1">46.8 &#x000b1; 0.1</td><td align="left" rowspan="1" colspan="1">28.7 &#x000b1; 1.0</td></tr><tr><td align="left" rowspan="1" colspan="1">Ungapped Extension</td><td align="left" rowspan="1" colspan="1">18554.8 &#x000b1; 695.8</td><td align="left" rowspan="1" colspan="1">557.5 &#x000b1; 4.6</td><td align="left" rowspan="1" colspan="1">33.3 &#x000b1; 1.4</td></tr><tr><td align="left" rowspan="1" colspan="1">Gapped Extension</td><td align="left" rowspan="1" colspan="1">17191.5 &#x000b1; 672.7</td><td align="left" rowspan="1" colspan="1">469.1 &#x000b1; 0.4</td><td align="left" rowspan="1" colspan="1">36.6 &#x000b1; 1.4</td></tr></tbody></table></alternatives><table-wrap-foot><fn id="t002fn001"><p>This profile was obtained from the calculation involving short DNA reads in metagenomic sequences of the soil microbiome (SRR407548) as queries and KEGG GENES as a database. To obtain a profile for GHOSTZ, the functions of distance calculation, ungapped extension, and gapped extension were not in-lined. To obtain a profile for GHOSTZ-GPU, the computation time of memory copy between CPU and GPU was excluded. This is because this process is hidden by CPU and GPU calculations during asynchronous execution on a CPU and GPU.</p></fn></table-wrap-foot></table-wrap></sec><sec id="sec014"><title>Evaluation of Search Sensitivity</title><p>To evaluate the search sensitivity of GHOSTZ-GPU, we ran GHOSTZ-GPU, GHOSTZ, RAPSearch (version 2.12), and DIAMOND (version 0.7.9). The sensitivity of the homology search for the different query sequences was estimated using the search results obtained by the Smith-Waterman local alignment algorithm implemented in SSEARCH [<xref rid="pone.0157338.ref024" ref-type="bibr">24</xref>] as the correct results. Because the Smith-Waterman algorithm is based on the dynamic programming algorithm and does not use any heuristics, it returns an optimal local alignment. The performance was estimated in terms of the fraction of the results that corresponded to the correct result. A search result was considered correct when the subject sequence with the highest score in SSEARCH was the same as the subject sequence obtained by each tool. We used only 10,000 randomly selected short DNA reads from SRR407548, SRS011098, and ERR315856 as queries and used each tool once during this evaluation for comparison with the results of SSEARCH. This is because the latter requires a lengthy computational time for large query datasets. To evaluate the software, we executed the RAPSearch program with 2 cases. One involved the default options, and the other involved command line options &#x0201c;-a T&#x0201d;, which instructed the program to perform a fast search [we called it RAPSearch (fast)]. We executed the DIAMOND program with 2 cases. One involved the &#x0201c;-c 1&#x0201d; [we called it DIAMOND (fast)], and the other involved command line options &#x0201c;-c 1 --sensitive&#x0201d; [we called it DIAMOND (sensitive)]. &#x0201c;-c&#x0201d; instructed the program to change the number of chunks for processing the seed index. &#x0201c;--sensitive&#x0201d; instructed the program to perform a sensitive search.</p><p>The results for SRR407548, SRS011098, and ERR315856 are shown in Figs <xref ref-type="fig" rid="pone.0157338.g011">11</xref>, <xref ref-type="fig" rid="pone.0157338.g012">12</xref> and <xref ref-type="fig" rid="pone.0157338.g013">13</xref>. These figures indicate that the search sensitivity of GHOSTZ-GPU was almost equal to that of GHOSTZ. Because it is difficult to compare many plots involving the results obtained with different parameters, we used single-value search sensitivity, which is calculated as the ratio of correct queries to all queries whose E-values &#x0003c;1.0 &#x000d7; <italic>E</italic><sup>&#x02212;5</sup> because the hits that have a high E-value are unreliable and not used in practice. For instance, Trunbaugh <italic>et al.</italic> used hits with E values less than 1.0 &#x000d7; <italic>E</italic><sup>&#x02212;5</sup>[<xref rid="pone.0157338.ref008" ref-type="bibr">8</xref>], and Kurokawa <italic>et al.</italic> used hits with E values less than 1.0 &#x000d7; <italic>E</italic><sup>&#x02212;8</sup>[<xref rid="pone.0157338.ref009" ref-type="bibr">9</xref>]. <xref rid="pone.0157338.t003" ref-type="table">Table 3</xref> shows search sensitivity for each program. The search sensitivity of GHOSTZ-GPU for SRR407548 was almost equal to that of GHOSTZ, RAPSearch, and DIAMOND (sensitive) and higher than that of RAPSearch (fast) and DIAMOND (fast). The search sensitivity values of GHOSTZ-GPU for SRS011098 and ERR315856 were almost equal to those of GHOSTZ and RAPSearch and higher than those of RAPSearch (fast), DIAMOND (fast), and DIAMOND (sensitive).</p><fig id="pone.0157338.g011" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g011</object-id><label>Fig 11</label><caption><title>Search sensitivity of different search methods.</title><p>Searches of SRR407548 sequences against the KEGG GENES database.</p></caption><graphic xlink:href="pone.0157338.g011"/></fig><fig id="pone.0157338.g012" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g012</object-id><label>Fig 12</label><caption><title>Search sensitivity of different search methods.</title><p>Searches of SRS011098 sequences against the KEGG GENES database.</p></caption><graphic xlink:href="pone.0157338.g012"/></fig><fig id="pone.0157338.g013" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.g013</object-id><label>Fig 13</label><caption><title>Search sensitivity of different search methods.</title><p>Searches of ERR315856 sequences against the KEGG GENES database.</p></caption><graphic xlink:href="pone.0157338.g013"/></fig><table-wrap id="pone.0157338.t003" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.t003</object-id><label>Table 3</label><caption><title>Search sensitivity for SRR407548, SRS011098, and ERR315856.</title></caption><alternatives><graphic id="pone.0157338.t003g" xlink:href="pone.0157338.t003"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="left" rowspan="1" colspan="1"/><th align="left" rowspan="1" colspan="1">SRR407548</th><th align="left" rowspan="1" colspan="1">SRS011098</th><th align="left" rowspan="1" colspan="1">ERR315856</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">GHOSTZ-GPU</td><td align="char" char="." rowspan="1" colspan="1">0.86</td><td align="char" char="." rowspan="1" colspan="1">0.98</td><td align="char" char="." rowspan="1" colspan="1">0.97</td></tr><tr><td align="left" rowspan="1" colspan="1">GHOSTZ</td><td align="char" char="." rowspan="1" colspan="1">0.86</td><td align="char" char="." rowspan="1" colspan="1">0.98</td><td align="char" char="." rowspan="1" colspan="1">0.97</td></tr><tr><td align="left" rowspan="1" colspan="1">RAPSearch</td><td align="char" char="." rowspan="1" colspan="1">0.89</td><td align="char" char="." rowspan="1" colspan="1">0.98</td><td align="char" char="." rowspan="1" colspan="1">0.97</td></tr><tr><td align="left" rowspan="1" colspan="1">RAPSearch (fast)</td><td align="char" char="." rowspan="1" colspan="1">0.62</td><td align="char" char="." rowspan="1" colspan="1">0.93</td><td align="char" char="." rowspan="1" colspan="1">0.88</td></tr><tr><td align="left" rowspan="1" colspan="1">DIAMOND (fast)</td><td align="char" char="." rowspan="1" colspan="1">0.72</td><td align="char" char="." rowspan="1" colspan="1">0.78</td><td align="char" char="." rowspan="1" colspan="1">0.90</td></tr><tr><td align="left" rowspan="1" colspan="1">DIAMOND (sensitive)</td><td align="char" char="." rowspan="1" colspan="1">0.88</td><td align="char" char="." rowspan="1" colspan="1">0.79</td><td align="char" char="." rowspan="1" colspan="1">0.93</td></tr></tbody></table></alternatives><table-wrap-foot><fn id="t003fn001"><p>The search sensitivity is calculated as the ratio of correct queries with the E-values &#x0003c; 10<sup>5</sup>.</p></fn></table-wrap-foot></table-wrap><p>Moreover, we compared the subject sequences that had the highest score in the results of GHOSTZ-GPU with those of GHOSTZ. The results of GHOSTZ-GPU were different from those of GHOSTZ. This difference is caused by the difference in the calculation order for filling the cells in the DP matrix during gapped extension. However, the difference between them is only 2&#x02013;4 queries. Therefore, we believe that GHOSTZ-GPU has sufficient search sensitivity for most of metagenomic applications.</p></sec><sec id="sec015"><title>Evaluation of Computation Time</title><p>To further evaluate GHOSTZ-GPU, we compared its computation time with that of GHOSTZ, RAPSearch, and DIAMOND. Optimization of loading the database is also effective for GHOSTZ; therefore, we applied this optimization to GHOSTZ. We evaluated these tools using 1,000,000 randomly selected short DNA reads from datasets SRR407548, SRS011098, and ERR315856 and from the KEGG GENES database. These software packages were used with the same commands that were used to analyze search sensitivity.</p><p>The averages and standard deviations of computation time of the tested methods for SRR407548, SRS011098, and ERR315856 are shown in <xref rid="pone.0157338.t004" ref-type="table">Table 4</xref>. GHOSTZ-GPU with 1 GPU was approximately 3.0&#x02013;4.1, 3.1&#x02013;3.9, 12.1&#x02013;19.0, and 0.9&#x02013;2.0 times faster than GHOSTZ (original), GHOSTZ (+ loading database thread), RAPSearch, and DIAMOND (sensitive) with 12 CPU threads, respectively. Moreover, GHOSTZ-GPU with 3 GPUs was approximately 5.8&#x02013;7.7, 6.0&#x02013;7.4, 21.6&#x02013;35.9, and 1.6&#x02013;3.8 times faster than GHOSTZ (original), GHOSTZ (+ loading database thread), RAPSearch, and DIAMOND (sensitive) with 12 CPU threads, respectively. GHOSTZ-GPU with 3 GPUs was slower than RAPSearch (fast) with 12 CPU threads on ERR315856 and slower than DIAMOND (fast) with 12 CPU threads on all the data. Nevertheless, the sensitivity of RAPSearch (fast) and DIAMOND (fast) was clearly worse than that of GHOSTZ-GPU. Thus, GHOSTZ-GPU shows the best performance when high sensitivity is required.</p><table-wrap id="pone.0157338.t004" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.t004</object-id><label>Table 4</label><caption><title>Averages and standard deviations of computation time for datasets SRR407548, SRS011098, and ERR315856.</title></caption><alternatives><graphic id="pone.0157338.t004g" xlink:href="pone.0157338.t004"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="left" rowspan="1" colspan="1"/><th align="left" rowspan="1" colspan="1">SRR407548 (sec.)</th><th align="left" rowspan="1" colspan="1">SRS011098 (sec.)</th><th align="left" rowspan="1" colspan="1">ERR315856 (sec.)</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">GHOSTZ-GPU (1 GPU)</td><td align="left" rowspan="1" colspan="1">1038.2 &#x000b1; 47.4</td><td align="left" rowspan="1" colspan="1">730.8 &#x000b1; 35.7</td><td align="left" rowspan="1" colspan="1">1025.3 &#x000b1; 42.8</td></tr><tr><td align="left" rowspan="1" colspan="1">GHOSTZ-GPU (2 GPUs)</td><td align="left" rowspan="1" colspan="1">682.4 &#x000b1; 56.6</td><td align="left" rowspan="1" colspan="1">500.9 &#x000b1; 70.7</td><td align="left" rowspan="1" colspan="1">701.6 &#x000b1; 56.6</td></tr><tr><td align="left" rowspan="1" colspan="1">GHOSTZ-GPU (3 GPUs)</td><td align="left" rowspan="1" colspan="1">551.5 &#x000b1; 34.4</td><td align="left" rowspan="1" colspan="1">375.2 &#x000b1; 10.2</td><td align="left" rowspan="1" colspan="1">574.8 &#x000b1; 17.6</td></tr><tr><td align="left" rowspan="1" colspan="1">GHOSTZ (+ loading database thread)</td><td align="left" rowspan="1" colspan="1">4051.6 &#x000b1; 110.5</td><td align="left" rowspan="1" colspan="1">2249.8 &#x000b1; 34.1</td><td align="left" rowspan="1" colspan="1">3533.8 &#x000b1; 96.0</td></tr><tr><td align="left" rowspan="1" colspan="1">GHOSTZ (original)</td><td align="left" rowspan="1" colspan="1">4231.8 &#x000b1; 159.7</td><td align="left" rowspan="1" colspan="1">2178.3 &#x000b1; 11.0</td><td align="left" rowspan="1" colspan="1">3560.2 &#x000b1; 52.1</td></tr><tr><td align="left" rowspan="1" colspan="1">RAPSearch</td><td align="left" rowspan="1" colspan="1">19781.2 &#x000b1; 2349.6</td><td align="left" rowspan="1" colspan="1">9075.8 &#x000b1; 101.4</td><td align="left" rowspan="1" colspan="1">12379.2 &#x000b1; 192.9</td></tr><tr><td align="left" rowspan="1" colspan="1">RAPSearch (fast)</td><td align="left" rowspan="1" colspan="1">996.4 &#x000b1; 13.2</td><td align="left" rowspan="1" colspan="1">654.8 &#x000b1; 5.9</td><td align="left" rowspan="1" colspan="1">993.1 &#x000b1; 31.6</td></tr><tr><td align="left" rowspan="1" colspan="1">DIAMOND (fast)</td><td align="left" rowspan="1" colspan="1">479.3 &#x000b1; 55.2</td><td align="left" rowspan="1" colspan="1">275.6 &#x000b1; 74.8</td><td align="left" rowspan="1" colspan="1">279.0 &#x000b1; 6.7</td></tr><tr><td align="left" rowspan="1" colspan="1">DIAMOND (sensitive)</td><td align="left" rowspan="1" colspan="1">2071.7 &#x000b1; 4.7</td><td align="left" rowspan="1" colspan="1">713.6 &#x000b1; 1.9</td><td align="left" rowspan="1" colspan="1">931.5 &#x000b1; 18.0</td></tr></tbody></table></alternatives><table-wrap-foot><fn id="t004fn001"><p>We assessed each tool with 12 CPU threads.</p></fn></table-wrap-foot></table-wrap></sec><sec id="sec016"><title>Evaluation of Optimizations for GPU calculations</title><p>To further evaluate GHOSTZ-GPU, we evaluated key optimizations: asynchronous execution on a CPU and GPU, addition of a thread to loading of a database, group memory access, and load balancing of gapped extension. We performed GHOSTZ with 12 CPU threads and GHOSTZ-GPU with 12 CPU threads and 3 GPUs. We ran GHOSTZ-GPU with and without each optimization. We used 1,000,000 randomly selected short DNA reads from SRR407548 against the KEGG GENES database. The acceleration ratios with these optimizations relative to GHOSTZ without the thread for loading a database are shown in <xref rid="pone.0157338.t005" ref-type="table">Table 5</xref>. Each optimization was found to accelerate GHOSTZ-GPU. Asynchronous execution on a CPU and GPU and addition of a thread to the loading of a database yielded the greatest increase in computation speed. Therefore, these optimizations are important for accelerating a search for protein sequence homology using a GPU.</p><table-wrap id="pone.0157338.t005" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0157338.t005</object-id><label>Table 5</label><caption><title>Averages and standard deviations of computation time and acceleration ratio for each optimization of GHOSTZ-GPU.</title></caption><alternatives><graphic id="pone.0157338.t005g" xlink:href="pone.0157338.t005"/><table frame="box" rules="all" border="0"><colgroup span="1"><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/><col align="left" valign="middle" span="1"/></colgroup><thead><tr><th align="left" rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">Computation time (sec.)</th><th align="center" rowspan="1" colspan="1">Acceleration ratio of each optimization</th><th align="center" rowspan="1" colspan="1">Cumulative acceleration ratio</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">GHOSTZ</td><td align="left" rowspan="1" colspan="1">4051.6 &#x000b1; 110.5</td><td align="left" rowspan="1" colspan="1">1.0 &#x000b1; 0.0</td><td align="left" rowspan="1" colspan="1">1.0 &#x000b1; 0.0</td></tr><tr><td align="left" rowspan="1" colspan="1">+ GPU</td><td align="left" rowspan="1" colspan="1">993.9 &#x000b1; 21.5</td><td align="left" rowspan="1" colspan="1">4.1 &#x000b1; 0.2</td><td align="left" rowspan="1" colspan="1">4.1 &#x000b1; 0.2</td></tr><tr><td align="left" rowspan="1" colspan="1">+ Asynchronous execution</td><td align="left" rowspan="1" colspan="1">705.9 &#x000b1; 38.7</td><td align="left" rowspan="1" colspan="1">1.4 &#x000b1; 0.1</td><td align="left" rowspan="1" colspan="1">5.8 &#x000b1; 0.4</td></tr><tr><td align="left" rowspan="1" colspan="1">+ Loading database</td><td align="left" rowspan="1" colspan="1">655.7 &#x000b1; 11.9</td><td align="left" rowspan="1" colspan="1">1.1 &#x000b1; 0.1</td><td align="left" rowspan="1" colspan="1">6.2 &#x000b1; 0.2</td></tr><tr><td align="left" rowspan="1" colspan="1">+ Group memory access</td><td align="left" rowspan="1" colspan="1">618.7 &#x000b1; 45.0</td><td align="left" rowspan="1" colspan="1">1.1 &#x000b1; 0.1</td><td align="left" rowspan="1" colspan="1">6.6 &#x000b1; 0.5</td></tr><tr><td align="left" rowspan="1" colspan="1">+ Load balancing</td><td align="left" rowspan="1" colspan="1">551.5 &#x000b1; 34.4</td><td align="left" rowspan="1" colspan="1">1.1 &#x000b1; 0.1</td><td align="left" rowspan="1" colspan="1">7.4 &#x000b1; 0.4</td></tr></tbody></table></alternatives><table-wrap-foot><fn id="t005fn001"><p>We performed GHOSTZ-GPU with and without optimizations. The acceleration in processing speed is shown as the ratio of the time used for GHOSTZ-GPU with an optimization relative to the time used for GHOSTZ-GPU with previous optimization and GHOSTZ.</p></fn></table-wrap-foot></table-wrap></sec></sec><sec sec-type="conclusions" id="sec017"><title>Discussion</title><p>In this study, we mapped distance calculation, ungapped extension, and gapped extension of GHOSTZ onto a GPU. GHOSTZ-GPU with 2 GPUs is approximately 6 times faster than GHOSTZ with 2 CPU sockets. The accelerated GPU-BLAST and CUDA-BLASTP with 1 GPU are estimated to be equivalent to twice NCBI-BLAST with a single CPU socket or less [<xref rid="pone.0157338.ref026" ref-type="bibr">26</xref>, <xref rid="pone.0157338.ref027" ref-type="bibr">27</xref>]. Therefore, GHOSTZ-GPU showed a greater increase in speed than GPU-based BLAST tools. One of the reasons for acceleration of calculations with GPUs is the use of seed search in GHOSTZ. BLAST searches consist of 3 main steps: a seed search, ungapped extension, and gapped extension; the bottleneck in BLAST is the seed search. Therefore, the seed search is mapped onto a GPU in these tools. On the other hand, a seed search in BLAST requires several random memory accesses. Random memory access decreases computing speed on a GPU. Accordingly, this step does not utilize sufficient computing resources of GPUs. A seed search by means of other tools also requires random memory access. In contrast, in GHOSTZ, a seed search does not take much computation time, and GHSOTZ is one of the fastest tools for searches for protein sequence homology. Thus, GHOSTZ-GPU showed a significant increase in speed. If we run a distance calculation, ungapped extension, and gapped extension in GHOSTZ on GPUs, the remaining steps become new bottlenecks. For a CPU calculation in GHOSTZ-GPU, the most time-consuming step is the seed search. Nonetheless, this step overlaps with distance calculation and ungapped extension on GPUs. Therefore, the true computation time of the seed search was hidden by that of distance calculation and of ungapped extension on GPUs. Nevertheless, the file I/O in a database accounts for a greater fraction of the computing time for GHOSTZ-GPU. Therefore, GHOSTZ-GPU should be executed with a large amount of queries concurrently to optimize the performance. On the other hand, a greater amount of memory is required than that for execution of a small number of queries. When we used 1,000,000 randomly selected short DNA reads from SRR407548 and the KEGG GENES database, GHOSTZ-GPU required approximately 50 GB of CPU memory for the homology search proper. Thus, the memory size of current typical computing systems may be insufficient for GHOSTZ-GPU. For instance, a node in Titan, which is a supercomputer at the Oak Ridge National Laboratory, has only 32 GB of memory. Therefore, big query data cannot be analyzed by GHOSTZ-GPU at once on this computing system. On the other hand, computer systems with larger memory, e.g., TSUBAME 2.5, are under development and the memory size is increasing. Therefore, GHOSTZ-GPU should soon be available in common computing environments.</p><p>GHOSTZ-GPU is developed for homology search of metagenome short reads, but it would be more valuable if it can be used for general protein sequence homology search. To check the point, we compared the sensitivity of GHOSTZ-GPU, RAPSearch, DIAMOND to BLASTP mode of NCBI-BLAST (2.2.28+) using proteins sequences as queries. We employed a method used in a research by Boratyn et al. [<xref rid="pone.0157338.ref020" ref-type="bibr">20</xref>] to evaluate the performance of remote homologue detection of sequence homology search tools. We used ASTRAL40 subset (version 2.06) [<xref rid="pone.0157338.ref029" ref-type="bibr">29</xref>] of the Structural Classification of Proteins (SCOP) [<xref rid="pone.0157338.ref030" ref-type="bibr">30</xref>] database in this evaluation. <xref ref-type="supplementary-material" rid="pone.0157338.s001">S1 Fig</xref> shows the curves denoting the number of true positives vs. the number of false positives for each tool. The performances of all metagenome homology search tools, GHOSTZ-GPU, RAPSearch and DIAMOND, are clearly less than that of BLAST in general protein sequence homology search, while the tools are much faster than BLAST and has enough search sensitivity for metagenome short reads. The lower search sensitivity of those tools would mainly come from the longer seed length than BLAST. The results indicate that the search sensitivity of GHOSTZ-GPU is insufficient for remote homologue detection, and thus the use of GHOSTZ-GPU is limited in homology search of general protein sequences.</p><p>In summary, we developed a GPU version of GHOSTZ, which is the fastest tool for searches for protein sequence homology. Several calculations, distance calculation, ungapped extension, and gapped extension, are bottlenecks in GHOSTZ. We mapped these processes onto GPUs and optimized memory access in the GPU calculation. GHOSTZ-GPU with 12 CPU threads and 1 GPU retains sufficient search sensitivity for practical analyses and is 3.0&#x02013;4.1 times faster than GHOSTZ with 12 CPU threads. Moreover, GHOSTZ-GPU with 12 CPU threads and 3 GPUs maintains sufficient search sensitivity for practical analyses and is 5.8&#x02013;7.7 times faster than GHOSTZ with 12 CPU threads. GHOSTZ-GPU on 12 CPU cores and 3 GPUs is estimated to achieve an 1073- to 2010-fold increase in processing speed relative to BLASTX on 12 CPU cores because GHOSTZ was estimated to be approximately 185- to 261-fold faster than BLASTX. If we use GHOSTZ-GPU to analyze the data produced by HiSeq2500 and stored in the KEGG GENES database and approximately 50&#x02013;100 nodes on TSUBAME 2.5 in metagenomic analysis, the required time is estimated to be only 1 day. On the basis of these estimates, we could perform metagenomic analysis of all data produced by the latest DNA sequencer in real time. At present, the sequencing technology continues to be improved, and the size of sequence data is on the rise. GHOSTZ-GPU and computers with GPUs could be a suitable alternative.</p></sec><sec sec-type="supplementary-material" id="sec018"><title>Supporting Information</title><supplementary-material content-type="local-data" id="pone.0157338.s001"><label>S1 Fig</label><caption><title>Number of true positives vs number of false positives for different search methods on the ASTRAL.</title><p>The query set was created by sorting the SCOP domains in a lexicographic order and selecting even numbered sequences without queries that are the sole member of the superfamily in ASTRAL 40. In the evaluation, self-hits were ignored. If a hit of a search belongs to the same SCOP superfamily of the query, it was considered as a true positive. And if a hit belongs to the different SCOP fold of the query, it was considered as a false positive. The gapped extension of GHOSTZ-GPU was performed on CPU because gapped extension of GHOSTZ-GPU is designed for short sequence and the size of GPU memory is insufficient for sequences in ASTRAL 40.</p><p>(PDF)</p></caption><media xlink:href="pone.0157338.s001.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material></sec></body><back><ack><p>The authors thank Prof. Ken Kurokawa and Dr. Takuji Yamada for their helpful discussion on metagenomic analysis. The authors also thank Mr. Brent Oster, Mr. Marc Hamilton, Mr. Mark Berger, Mr. Nuno Subtil, Mr. Jonathan Cohen, and Mr. Jacopo Pantaleoni at NVIDIA Corporation for providing us with an excellent research environment, insightful comments, and suggestions for this study.</p></ack><ref-list><title>References</title><ref id="pone.0157338.ref001"><label>1</label><mixed-citation publication-type="journal">
<name><surname>Kanehisa</surname><given-names>M</given-names></name>, <name><surname>Goto</surname><given-names>S</given-names></name>. <article-title>KEGG: Kyoto Encyclopedia of Genes and Genomes</article-title>. <source>Nucleic Acids Research</source>. <year>2000</year>;<volume>28</volume>(<issue>1</issue>):<fpage>27</fpage>&#x02013;<lpage>30</lpage>. <pub-id pub-id-type="doi">10.1093/nar/28.1.27</pub-id>
<?supplied-pmid 10592173?><pub-id pub-id-type="pmid">10592173</pub-id></mixed-citation></ref><ref id="pone.0157338.ref002"><label>2</label><mixed-citation publication-type="journal">
<name><surname>Kanehisa</surname><given-names>M</given-names></name>, <name><surname>Goto</surname><given-names>S</given-names></name>, <name><surname>Sato</surname><given-names>Y</given-names></name>, <name><surname>Furumichi</surname><given-names>M</given-names></name>, <name><surname>Tanabe</surname><given-names>M</given-names></name>. <article-title>KEGG for integration and interpretation of large-scale molecular data sets</article-title>. <source>Nucleic Acids Research</source>. <year>2012</year>;<volume>40</volume>(<issue>D1</issue>):<fpage>D109</fpage>&#x02013;<lpage>D114</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkr988</pub-id>
<?supplied-pmid 22080510?><pub-id pub-id-type="pmid">22080510</pub-id></mixed-citation></ref><ref id="pone.0157338.ref003"><label>3</label><mixed-citation publication-type="journal">
<name><surname>Tatusov</surname><given-names>RL</given-names></name>, <name><surname>Koonin</surname><given-names>EV</given-names></name>, <name><surname>Lipman</surname><given-names>DJ</given-names></name>. <article-title>A Genomic Perspective on Protein Families</article-title>. <source>Science</source>. <year>1997</year>;<volume>278</volume>(<issue>5338</issue>):<fpage>631</fpage>&#x02013;<lpage>637</lpage>. <pub-id pub-id-type="doi">10.1126/science.278.5338.631</pub-id>
<?supplied-pmid 9381173?><pub-id pub-id-type="pmid">9381173</pub-id></mixed-citation></ref><ref id="pone.0157338.ref004"><label>4</label><mixed-citation publication-type="journal">
<name><surname>Tatusov</surname><given-names>R</given-names></name>, <name><surname>Fedorova</surname><given-names>N</given-names></name>, <name><surname>Jackson</surname><given-names>J</given-names></name>, <name><surname>Jacobs</surname><given-names>A</given-names></name>, <name><surname>Kiryutin</surname><given-names>B</given-names></name>, <name><surname>Koonin</surname><given-names>E</given-names></name>, <etal>et al</etal>
<article-title>The COG database: an updated version includes eukaryotes</article-title>. <source>BMC Bioinformatics</source>. <year>2003</year>;<volume>4</volume>(<issue>1</issue>):<fpage>41</fpage>
<pub-id pub-id-type="doi">10.1186/1471-2105-4-41</pub-id>
<?supplied-pmid 12969510?><pub-id pub-id-type="pmid">12969510</pub-id></mixed-citation></ref><ref id="pone.0157338.ref005"><label>5</label><mixed-citation publication-type="journal">
<name><surname>Finn</surname><given-names>RD</given-names></name>, <name><surname>Mistry</surname><given-names>J</given-names></name>, <name><surname>Tate</surname><given-names>J</given-names></name>, <name><surname>Coggill</surname><given-names>P</given-names></name>, <name><surname>Heger</surname><given-names>A</given-names></name>, <name><surname>Pollington</surname><given-names>JE</given-names></name>, <etal>et al</etal>
<article-title>The Pfam protein families database</article-title>. <source>Nucleic Acids Research</source>. <year>2010</year>;<volume>38</volume>(<issue>suppl 1</issue>):<fpage>D211</fpage>&#x02013;<lpage>D222</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkp985</pub-id>
<?supplied-pmid 19920124?><pub-id pub-id-type="pmid">19920124</pub-id></mixed-citation></ref><ref id="pone.0157338.ref006"><label>6</label><mixed-citation publication-type="journal">
<name><surname>Altschul</surname><given-names>SF</given-names></name>, <name><surname>Gish</surname><given-names>W</given-names></name>, <name><surname>Miller</surname><given-names>W</given-names></name>, <name><surname>Myers</surname><given-names>EW</given-names></name>, <name><surname>Lipman</surname><given-names>DJ</given-names></name>. <article-title>Basic local alignment search tool</article-title>. <source>Journal of Molecular Biology</source>. <year>1990</year>;<volume>215</volume>(<issue>3)</issue>:<fpage>403</fpage>&#x02013;<lpage>410</lpage>. <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id>
<?supplied-pmid 2231712?><pub-id pub-id-type="pmid">2231712</pub-id></mixed-citation></ref><ref id="pone.0157338.ref007"><label>7</label><mixed-citation publication-type="journal">
<name><surname>Altschul</surname><given-names>SF</given-names></name>, <name><surname>Madden</surname><given-names>TL</given-names></name>, <name><surname>Sch&#x000e4;ffer</surname><given-names>AA</given-names></name>, <name><surname>Zhang</surname><given-names>J</given-names></name>, <name><surname>Zhang</surname><given-names>Z</given-names></name>, <name><surname>Miller</surname><given-names>W</given-names></name>, <etal>et al</etal>
<article-title>Gapped BLAST and PSI-BLAST: a new generation of protein database search programs</article-title>. <source>Nucleic Acids Research</source>. <year>1997</year>;<volume>25</volume>(<issue>17</issue>):<fpage>3389</fpage>&#x02013;<lpage>3402</lpage>. <pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id>
<?supplied-pmid 9254694?><pub-id pub-id-type="pmid">9254694</pub-id></mixed-citation></ref><ref id="pone.0157338.ref008"><label>8</label><mixed-citation publication-type="journal">
<name><surname>Turnbaugh</surname><given-names>PJ</given-names></name>, <name><surname>Ley</surname><given-names>RE</given-names></name>, <name><surname>Mahowald</surname><given-names>MA</given-names></name>, <name><surname>Magrini</surname><given-names>V</given-names></name>, <name><surname>Mardis</surname><given-names>ER</given-names></name>, <name><surname>Gordon</surname><given-names>JI</given-names></name>. <article-title>An obesity-associated gut microbiome with increased capacity for energy harvest</article-title>. <source>Nature</source>. <year>2006</year>;<volume>444</volume>(<issue>7122</issue>):<fpage>1027</fpage>&#x02013;<lpage>131</lpage>. <pub-id pub-id-type="doi">10.1038/nature05414</pub-id>
<?supplied-pmid 17183312?><pub-id pub-id-type="pmid">17183312</pub-id></mixed-citation></ref><ref id="pone.0157338.ref009"><label>9</label><mixed-citation publication-type="journal">
<name><surname>Kurokawa</surname><given-names>K</given-names></name>, <name><surname>Itoh</surname><given-names>T</given-names></name>, <name><surname>Kuwahara</surname><given-names>T</given-names></name>, <name><surname>Oshima</surname><given-names>K</given-names></name>, <name><surname>Toh</surname><given-names>H</given-names></name>, <name><surname>Toyoda</surname><given-names>A</given-names></name>, <etal>et al</etal>
<article-title>Comparative Metagenomics Revealed Commonly Enriched Gene Sets in Human Gut Microbiomes</article-title>. <source>DNA Research</source>. <year>2007</year>;<volume>14</volume>(<issue>4</issue>):<fpage>169</fpage>&#x02013;<lpage>181</lpage>. <pub-id pub-id-type="doi">10.1093/dnares/dsm018</pub-id>
<?supplied-pmid 17916580?><pub-id pub-id-type="pmid">17916580</pub-id></mixed-citation></ref><ref id="pone.0157338.ref010"><label>10</label><mixed-citation publication-type="journal">
<name><surname>Ye</surname><given-names>Y</given-names></name>, <name><surname>Choi</surname><given-names>JH</given-names></name>, <name><surname>Tang</surname><given-names>H</given-names></name>. <article-title>RAPSearch: a fast protein similarity search tool for short reads</article-title>. <source>BMC Bioinformatics</source>. <year>2011</year>;<volume>12</volume>(<issue>1</issue>):<fpage>159</fpage>
<pub-id pub-id-type="doi">10.1186/1471-2105-12-159</pub-id>
<?supplied-pmid 21575167?><pub-id pub-id-type="pmid">21575167</pub-id></mixed-citation></ref><ref id="pone.0157338.ref011"><label>11</label><mixed-citation publication-type="journal">
<name><surname>Zhao</surname><given-names>Y</given-names></name>, <name><surname>Tang</surname><given-names>H</given-names></name>, <name><surname>Ye</surname><given-names>Y</given-names></name>. <article-title>RAPSearch2: a fast and memory-efficient protein similarity search tool for next-generation sequencing data</article-title>. <source>Bioinformatics</source>. <year>2012</year>;<volume>28</volume>(<issue>1</issue>):<fpage>125</fpage>&#x02013;<lpage>126</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btr595</pub-id>
<?supplied-pmid 22039206?><pub-id pub-id-type="pmid">22039206</pub-id></mixed-citation></ref><ref id="pone.0157338.ref012"><label>12</label><mixed-citation publication-type="journal">
<name><surname>Suzuki</surname><given-names>S</given-names></name>, <name><surname>Kakuta</surname><given-names>M</given-names></name>, <name><surname>Ishida</surname><given-names>T</given-names></name>, <name><surname>Akiyama</surname><given-names>Y</given-names></name>. <article-title>GHOSTX: An Improved Sequence Homology Search Algorithm Using a Query Suffix Array and a Database Suffix Array</article-title>. <source>PLoS ONE</source>. <year>2014</year>;<volume>9</volume>(<issue>8</issue>):<fpage>e103833</fpage>
<pub-id pub-id-type="doi">10.1371/journal.pone.0103833</pub-id>
<?supplied-pmid 25099887?><pub-id pub-id-type="pmid">25099887</pub-id></mixed-citation></ref><ref id="pone.0157338.ref013"><label>13</label><mixed-citation publication-type="journal">
<name><surname>Suzuki</surname><given-names>S</given-names></name>, <name><surname>Kakuta</surname><given-names>M</given-names></name>, <name><surname>Ishida</surname><given-names>T</given-names></name>, <name><surname>Akiyama</surname><given-names>Y</given-names></name>. <article-title>Faster sequence homology searches by clustering subsequences</article-title>. <source>Bioinformatics</source>. <year>2015</year>;<volume>31</volume>(<issue>8</issue>):<fpage>1183</fpage>&#x02013;<lpage>1190</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btu780</pub-id>
<?supplied-pmid 25432166?><pub-id pub-id-type="pmid">25432166</pub-id></mixed-citation></ref><ref id="pone.0157338.ref014"><label>14</label><mixed-citation publication-type="journal">
<name><surname>Buchfink</surname><given-names>B</given-names></name>, <name><surname>Xie</surname><given-names>C</given-names></name>, <name><surname>Huson</surname><given-names>DH</given-names></name>. <article-title>Fast and Sensitive Protein Alignment using DIAMOND</article-title>. <source>Nature Methods</source>. <year>2015</year>;<volume>12</volume>(<issue>1</issue>):<fpage>59</fpage>&#x02013;<lpage>60</lpage>. <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
<?supplied-pmid 25402007?><pub-id pub-id-type="pmid">25402007</pub-id></mixed-citation></ref><ref id="pone.0157338.ref015"><label>15</label><mixed-citation publication-type="journal">
<name><surname>Luo</surname><given-names>R</given-names></name>, <name><surname>Wong</surname><given-names>T</given-names></name>, <name><surname>Zhu</surname><given-names>J</given-names></name>, <name><surname>Liu</surname><given-names>CM</given-names></name>, <name><surname>Zhu</surname><given-names>X</given-names></name>, <name><surname>Wu</surname><given-names>E</given-names></name>, <etal>et al</etal>
<article-title>SOAP3-dp: Fast, Accurate and Sensitive GPU-Based Short Read Aligner</article-title>. <source>PLoS ONE</source>. <year>2013</year>;<volume>8</volume>(<issue>5</issue>):<fpage>e65632</fpage>
<pub-id pub-id-type="doi">10.1371/journal.pone.0065632</pub-id>
<?supplied-pmid 23741504?><pub-id pub-id-type="pmid">23741504</pub-id></mixed-citation></ref><ref id="pone.0157338.ref016"><label>16</label><mixed-citation publication-type="other">Shimoda T, Ishida T, Suzuki S, Ohue M, Akiyama Y. MEGADOCK-GPU: Acceleration of Protein-Protein Docking Calculation on GPUs. In: Proceedings of the International Conference on Bioinformatics, Computational Biology and Biomedical Informatics. BCB&#x02019;13. New York, NY, USA: ACM; 2013. p. 883:883&#x02013;883:889. Available from: <ext-link ext-link-type="uri" xlink:href="http://doi.acm.org/10.1145/2506583.2506693">http://doi.acm.org/10.1145/2506583.2506693</ext-link></mixed-citation></ref><ref id="pone.0157338.ref017"><label>17</label><mixed-citation publication-type="journal">
<name><surname>Goudey</surname><given-names>B</given-names></name>, <name><surname>Rawlinson</surname><given-names>D</given-names></name>, <name><surname>Wang</surname><given-names>Q</given-names></name>, <name><surname>Shi</surname><given-names>F</given-names></name>, <name><surname>Ferra</surname><given-names>H</given-names></name>, <name><surname>Campbell</surname><given-names>R</given-names></name>, <etal>et al</etal>
<article-title>GWIS&#x02014;model-free, fast and exhaustive search for epistatic interactions in case-control GWAS</article-title>. <source>BMC Genomics</source>. <year>2013</year>;<volume>14</volume>(<issue>Suppl 3</issue>):<fpage>S10</fpage>
<pub-id pub-id-type="doi">10.1186/1471-2164-14-S3-S10</pub-id>
<?supplied-pmid 23819779?><pub-id pub-id-type="pmid">23819779</pub-id></mixed-citation></ref><ref id="pone.0157338.ref018"><label>18</label><mixed-citation publication-type="journal">
<name><surname>Smith</surname><given-names>TF</given-names></name>, <name><surname>Waterman</surname><given-names>MS</given-names></name>. <article-title>Identification of common molecular subsequences</article-title>. <source>Journal of Molecular Biology</source>. <year>1981</year>;<volume>147</volume>(<issue>1</issue>):<fpage>195</fpage>&#x02013;<lpage>197</lpage>. <pub-id pub-id-type="doi">10.1016/0022-2836(81)90087-5</pub-id>
<?supplied-pmid 7265238?><pub-id pub-id-type="pmid">7265238</pub-id></mixed-citation></ref><ref id="pone.0157338.ref019"><label>19</label><mixed-citation publication-type="journal">
<name><surname>Liu</surname><given-names>Y</given-names></name>, <name><surname>Wirawan</surname><given-names>A</given-names></name>, <name><surname>Schmidt</surname><given-names>B</given-names></name>. <article-title>CUDASW++ 3.0: accelerating Smith-Waterman protein database search by coupling CPU and GPU SIMD instructions</article-title>. <source>BMC Bioinformatics</source>. <year>2013</year>;<volume>14</volume>(<issue>1</issue>):<fpage>117</fpage>
<pub-id pub-id-type="doi">10.1186/1471-2105-14-117</pub-id>
<?supplied-pmid 23557111?><pub-id pub-id-type="pmid">23557111</pub-id></mixed-citation></ref><ref id="pone.0157338.ref020"><label>20</label><mixed-citation publication-type="journal">
<name><surname>Korpar</surname><given-names>M</given-names></name>, <name><surname>Sosic</surname><given-names>M</given-names></name>, <name><surname>Blazeka</surname><given-names>D</given-names></name>, <name><surname>Sikic</surname><given-names>M</given-names></name>. <article-title>SW#db: GPU-Accelerated Exact Sequence Similarity Database Search</article-title>. <source>PLoS ONE</source>. <year>2016</year>;<volume>10</volume>(<issue>12</issue>):<fpage>1</fpage>&#x02013;<lpage>11</lpage>.</mixed-citation></ref><ref id="pone.0157338.ref021"><label>21</label><mixed-citation publication-type="journal">
<name><surname>Liu</surname><given-names>Y</given-names></name>, <name><surname>Hong</surname><given-names>Y</given-names></name>, <name><surname>Lin</surname><given-names>CY</given-names></name>, <name><surname>Hung</surname><given-names>CL</given-names></name>. <article-title>Accelerating Smith-Waterman Alignment for Protein Database Search Using Frequency Distance Filtration Scheme Based on CPU-GPU Collaborative System</article-title>. <source>International Journal of Genomics</source>. <year>2015</year>;<volume>2015</volume>(<issue>761063</issue>):<fpage>1</fpage>&#x02013;<lpage>12</lpage>. <pub-id pub-id-type="doi">10.1155/2015/761063</pub-id></mixed-citation></ref><ref id="pone.0157338.ref022"><label>22</label><mixed-citation publication-type="journal">
<name><surname>Zhao</surname><given-names>K</given-names></name>, <name><surname>Chu</surname><given-names>X</given-names></name>. <article-title>G-BLASTN: accelerating nucleotide alignment by graphics processors</article-title>. <source>Bioinformatics</source>. <year>2014</year>;<volume>30</volume>(<issue>10</issue>):<fpage>1384</fpage>&#x02013;<lpage>1391</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btu047</pub-id>
<?supplied-pmid 24463183?><pub-id pub-id-type="pmid">24463183</pub-id></mixed-citation></ref><ref id="pone.0157338.ref023"><label>23</label><mixed-citation publication-type="journal">
<name><surname>Liu</surname><given-names>Y</given-names></name>, <name><surname>Schmidt</surname><given-names>B</given-names></name>. <article-title>CUSHAW2-GPU: Empowering Faster Gapped Short-Read Alignment Using GPU Computing</article-title>. <source>Design Test, IEEE</source>. <year>2014</year>;<volume>31</volume>(<issue>1</issue>):<fpage>31</fpage>&#x02013;<lpage>39</lpage>. <pub-id pub-id-type="doi">10.1109/MDAT.2013.2284198</pub-id></mixed-citation></ref><ref id="pone.0157338.ref024"><label>24</label><mixed-citation publication-type="journal">
<name><surname>Pearson</surname><given-names>WR</given-names></name>. <article-title>Searching protein sequence libraries: Comparison of the sensitivity and selectivity of the Smith-Waterman and FASTA algorithms</article-title>. <source>Genomics</source>. <year>1991</year>;<volume>11</volume>(<issue>3</issue>):<fpage>635</fpage>&#x02013;<lpage>650</lpage>. <pub-id pub-id-type="doi">10.1016/0888-7543(91)90071-L</pub-id>
<?supplied-pmid 1774068?><pub-id pub-id-type="pmid">1774068</pub-id></mixed-citation></ref><ref id="pone.0157338.ref025"><label>25</label><mixed-citation publication-type="journal">
<name><surname>Morgulis</surname><given-names>A</given-names></name>, <name><surname>Coulouris</surname><given-names>G</given-names></name>, <name><surname>Raytselis</surname><given-names>Y</given-names></name>, <name><surname>Madden</surname><given-names>TL</given-names></name>, <name><surname>Agarwala</surname><given-names>R</given-names></name>, <name><surname>Sch&#x000e4;ffer</surname><given-names>AA</given-names></name>. <article-title>Database indexing for production MegaBLAST searches</article-title>. <source>Bioinformatics</source>. <year>2008</year>;<volume>24</volume>(<issue>16</issue>):<fpage>1757</fpage>&#x02013;<lpage>1764</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btn322</pub-id>
<?supplied-pmid 18567917?><pub-id pub-id-type="pmid">18567917</pub-id></mixed-citation></ref><ref id="pone.0157338.ref026"><label>26</label><mixed-citation publication-type="journal">
<name><surname>Vouzis</surname><given-names>PD</given-names></name>, <name><surname>Sahinidis</surname><given-names>NV</given-names></name>. <article-title>GPU-BLAST: using graphics processors to accelerate protein sequence alignment</article-title>. <source>Bioinformatics</source>. <year>2011</year>;<volume>27</volume>(<issue>2</issue>):<fpage>182</fpage>&#x02013;<lpage>188</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/btq644</pub-id>
<?supplied-pmid 21088027?><pub-id pub-id-type="pmid">21088027</pub-id></mixed-citation></ref><ref id="pone.0157338.ref027"><label>27</label><mixed-citation publication-type="journal">
<name><surname>Liu</surname><given-names>W</given-names></name>, <name><surname>Schmidt</surname><given-names>B</given-names></name>, <name><surname>Muller-Wittig</surname><given-names>W</given-names></name>. <article-title>CUDA-BLASTP: Accelerating BLASTP on CUDA-Enabled Graphics Hardware</article-title>. <source>IEEE/ACM Trans Comput Biol Bioinformatics</source>. <year>2011</year>;<volume>8</volume>(<issue>6</issue>):<fpage>1678</fpage>&#x02013;<lpage>1684</lpage>. <pub-id pub-id-type="doi">10.1109/TCBB.2011.33</pub-id></mixed-citation></ref><ref id="pone.0157338.ref028"><label>28</label><mixed-citation publication-type="journal">
<name><surname>Fu</surname><given-names>L</given-names></name>, <name><surname>Niu</surname><given-names>B</given-names></name>, <name><surname>Zhu</surname><given-names>Z</given-names></name>, <name><surname>Wu</surname><given-names>S</given-names></name>, <name><surname>Li</surname><given-names>W</given-names></name>. <article-title>CD-HIT: accelerated for clustering the next-generation sequencing data</article-title>. <source>Bioinformatics</source>. <year>2012</year>;<volume>28</volume>(<issue>23</issue>):<fpage>3150</fpage>&#x02013;<lpage>3152</lpage>. <pub-id pub-id-type="doi">10.1093/bioinformatics/bts565</pub-id>
<?supplied-pmid 23060610?><pub-id pub-id-type="pmid">23060610</pub-id></mixed-citation></ref><ref id="pone.0157338.ref029"><label>29</label><mixed-citation publication-type="journal">
<name><surname>Chandonia</surname><given-names>J</given-names></name>, <name><surname>Hon</surname><given-names>G</given-names></name>, <name><surname>Walker</surname><given-names>NS</given-names></name>, <name><surname>Lo Conte</surname><given-names>L</given-names></name>, <name><surname>Koehl</surname><given-names>P</given-names></name>, <name><surname>Levitt</surname><given-names>M</given-names></name>, <etal>et al</etal>
<article-title>The ASTRAL Compendium in 2004</article-title>. <source>Nucleic Acids Research</source>. <year>2004</year>;<volume>32</volume>(<issue>suppl 1</issue>):<fpage>D189</fpage>&#x02013;<lpage>D192</lpage>. <pub-id pub-id-type="doi">10.1093/nar/gkh034</pub-id>
<?supplied-pmid 14681391?><pub-id pub-id-type="pmid">14681391</pub-id></mixed-citation></ref><ref id="pone.0157338.ref030"><label>30</label><mixed-citation publication-type="journal">
<name><surname>Murzin</surname><given-names>AG</given-names></name>, <name><surname>Brenner</surname><given-names>SE</given-names></name>, <name><surname>Hubbard</surname><given-names>T</given-names></name>, <name><surname>Chothia</surname><given-names>C</given-names></name>. <article-title>SCOP: A structural classification of proteins database for the investigation of sequences and structures</article-title>. <source>Journal of Molecular Biology</source>. <year>1995</year>;<volume>247</volume>(<issue>4</issue>):<fpage>536</fpage>&#x02013;<lpage>540</lpage>. <pub-id pub-id-type="doi">10.1016/S0022-2836(05)80134-2</pub-id>
<?supplied-pmid 7723011?><pub-id pub-id-type="pmid">7723011</pub-id></mixed-citation></ref></ref-list></back></article>