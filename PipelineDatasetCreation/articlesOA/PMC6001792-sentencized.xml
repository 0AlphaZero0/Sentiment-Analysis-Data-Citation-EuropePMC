<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN" "JATS-archivearticle1.dtd"> 
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Archiving and Interchange DTD v3.0 20080202//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName archivearticle3.dtd?><?SourceDTD.Version 3.0?><?ConverterInfo.XSLTName jp2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">Magn Reson Chem</journal-id><journal-id journal-id-type="iso-abbrev">Magn Reson Chem</journal-id><journal-id journal-id-type="doi">10.1002/(ISSN)1097-458Xa</journal-id><journal-id journal-id-type="publisher-id">MRC</journal-id><journal-title-group><journal-title>Magnetic Resonance in Chemistry</journal-title></journal-title-group><issn pub-type="ppub">0749-1581</issn><issn pub-type="epub">1097-458X</issn><publisher><publisher-name>John Wiley and Sons Inc.</publisher-name><publisher-loc>Hoboken</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">6001792</article-id><article-id pub-id-type="doi">10.1002/mrc.4660</article-id><article-id pub-id-type="publisher-id">MRC4660</article-id><article-id pub-id-type="other">MRC-17-0111.R1</article-id><article-categories><subj-group subj-group-type="overline"><subject>Special Issue Tutorial</subject></subj-group><subj-group subj-group-type="heading"><subject>Special Issue Tutorials</subject></subj-group></article-categories><title-group><article-title><SecTag type="TITLE"><text><SENT sid="0" pm="."><plain>Large‐scale NMR simulations in liquid state: A tutorial </plain></SENT>
</text></SecTag></article-title><alt-title alt-title-type="left-running-head">Kuprov</alt-title></title-group><contrib-group><contrib id="mrc4660-cr-0001" contrib-type="author" corresp="yes"><name><surname>Kuprov</surname><given-names>Ilya</given-names></name><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0430-2682</contrib-id><address><email>i.kuprov@soton.ac.uk</email></address><xref ref-type="aff" rid="mrc4660-aff-0001">
<sup>1</sup>
</xref></contrib></contrib-group><aff id="mrc4660-aff-0001">
<label><sup>1</sup></label>
<named-content content-type="organisation-division">School of Chemistry</named-content>
<institution>University of Southampton</institution>
<named-content content-type="street">University Road</named-content>
<named-content content-type="city">Southampton</named-content>
<named-content content-type="post-code">SO17 1BJ</named-content>
<country country="GB">UK</country>
</aff><author-notes><corresp id="correspondenceTo"><label>*</label>
Correspondence<break/>
Ilya Kuprov, School of Chemistry, University of Southampton, University Road, Southampton SO17 1BJ, UK.<break/>
Email: <email>i.kuprov@soton.ac.uk</email><break/></corresp></author-notes><pub-date pub-type="epub"><day>27</day><month>11</month><year>2017</year></pub-date><pub-date pub-type="ppub"><month>6</month><year>2018</year></pub-date><volume>56</volume><issue>6</issue><issue-id pub-id-type="doi">10.1002/mrc.v56.6</issue-id><issue-title content-type="special-issue-title">Software tools and tutorials in liquid state NMR</issue-title><fpage>415</fpage><lpage>437</lpage><history><date date-type="received"><day>10</day><month>7</month><year>2017</year></date><date date-type="rev-recd"><day>20</day><month>8</month><year>2017</year></date><date date-type="accepted"><day>28</day><month>8</month><year>2017</year></date></history><permissions><copyright-statement content-type="article-copyright">© 2017 The Authors. <italic>Magnetic Resonance in Chemistry</italic> published by John Wiley &amp; Sons Ltd.</copyright-statement><license license-type="creativeCommonsBy"><license-p>This is an open access article under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link> License, which permits use, distribution and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><self-uri content-type="pdf" xlink:type="simple" xlink:href="file:MRC-56-415.pdf"/><abstract><p><SecTag type="ABS"><text><SENT sid="1" pm="."><plain>Liquid state nuclear magnetic resonance is the only class of magnetic resonance experiments for which the simulation problem is solved comprehensively for spin systems of any size. </plain></SENT>
<SENT sid="2" pm="."><plain>This paper contains a practical walkthrough for one of the many available simulation packages — Spinach. </plain></SENT>
<SENT sid="3" pm="."><plain>Its unique feature is polynomial complexity scaling: the ability to simulate large spin systems quantum mechanically and with accurate account of relaxation, diffusion, chemical processes, and hydrodynamics. </plain></SENT>
<SENT sid="4" pm="."><plain>This paper is a gentle introduction written with a PhD student in mind. </plain></SENT>
</text></SecTag></p></abstract><SecTag type="KEYWORD"><kwd-group kwd-group-type="author-generated"><kwd id="mrc4660-kwd-0001">NMR</kwd><kwd id="mrc4660-kwd-0002">simulation</kwd><kwd id="mrc4660-kwd-0003">spin</kwd><kwd id="mrc4660-kwd-0004">spinach</kwd><kwd id="mrc4660-kwd-0005">software</kwd></kwd-group></SecTag><funding-group><award-group><funding-source>Engineering and Physical Sciences Research Council</funding-source><award-id>EP/F065205/1</award-id><award-id>EP/H003789/1</award-id></award-group></funding-group><counts><fig-count count="8"/><table-count count="7"/><page-count count="23"/><word-count count="8159"/></counts><custom-meta-group><custom-meta><meta-name>source-schema-version-number</meta-name><meta-value>2.0</meta-value></custom-meta><custom-meta><meta-name>component-id</meta-name><meta-value>mrc4660</meta-value></custom-meta><custom-meta><meta-name>cover-date</meta-name><meta-value>June 2018</meta-value></custom-meta><custom-meta><meta-name>details-of-publishers-convertor</meta-name><meta-value>Converter:WILEY_ML3GV2_TO_NLMPMC version:version=5.4.1.1 mode:remove_FC converted:14.06.2018</meta-value></custom-meta></custom-meta-group></article-meta><notes><p content-type="self-citation">
<mixed-citation publication-type="journal" id="mrc4660-cit-0001">
<string-name>
<surname>Kuprov</surname>
<given-names>I</given-names>
</string-name>. <article-title><SecTag type="TITLE"><text><SENT sid="0" pm="."><plain>Large‐scale NMR simulations in liquid state: A tutorial </plain></SENT>
</text></SecTag></article-title>. <source xml:lang="en">Magn Reson Chem</source>. <year>2018</year>;<volume>56</volume>:<fpage>415</fpage>–<lpage>437</lpage>. <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/mrc.4660">https://doi.org/10.1002/mrc.4660</ext-link>
<pub-id pub-id-type="pmid">28873503</pub-id></mixed-citation>
</p></notes></front><body><SecTag type="INTRO"><sec id="mrc4660-sec-0001"><label>1</label><title><text><SENT sid="1" pm="."><plain>INTRODUCTION </plain></SENT>
</text></title><p><text><SENT sid="2" pm="."><plain>Textbooks and introductory lectures make nuclear magnetic resonance (NMR) simulations look deceptively simple: type in some Pauli matrices, make a Hamiltonian, compute the exponential, and that's ostensibly it — their authors have done a wonderful job of making the subject easy to understand.1, 2, 3 The reality is rather more brutal: relaxation theory requires deep knowledge of tensor calculus, interaction specifications and rotation conventions are a veritable minefield, matrix manipulation is a highly technical subject… and then there are chemical kinetics, diffusion, flow, spatial encoding, distant dipolar effects, hyperpolarisation, and paramagnetic shifts. </plain></SENT>
<SENT sid="3" pm="."><plain>With a bit of luck, the simulation would be done by the end of the PhD project… or maybe not. </plain></SENT>
<SENT sid="4" pm="."><plain>Fortunately, there is now an app for that, and it is called Spinach.4 </plain></SENT>
</text></p><p><text><SENT sid="5" pm="."><plain>This paper is a practical walkthrough — it goes through the process of setting up and running liquid state NMR simulations in the order that most people would be doing it in practice. </plain></SENT>
<SENT sid="6" pm="."><plain>The purpose of Spinach in this context is to simplify the process: the program automates all intermediate stages (Hamiltonian generation, relaxation superoperator calculation, time evolution mathematics, etc.) and offers many standard pulse sequences as pre‐programmed modules with detailed examples and documentation. </plain></SENT>
<SENT sid="7" pm="."><plain>Complicated particulars of the internal mathematics and programming are avoided as much as possible here, with references to the more technical papers. </plain></SENT>
</text></p><p><text><SENT sid="8" pm="."><plain>At the time of writing, Spinach is unique in its ability to simulate, without significant approximations 1 Spinach drops unpopulated quantum states — this reduces the basis set and makes calculations faster but does not influence accuracy of the final answer. </plain></SENT>
<SENT sid="9" pm="."><plain>Technical details are published in Karabanov et al.28  and in the time domain, liquid state NMR systems containing hundreds of interacting spins.5 Many packages can generate a reasonable likeness of a 1D NMR spectrum for large spin systems, but complicated combinations of multidimensional pulse sequences, advanced relaxation and kinetics treatments, shaped pulses and gradients, diffusion, and flow are only available in Spinach. </plain></SENT>
<SENT sid="10" pm="."><plain>This is the result of very recent theoretical developments, the primary ones being quantum mechanical simulation algorithms6, 7 that have much lower computational resource requirements than anything previously available, and the Fokker–Planck equation for the spatial degrees of freedom.8, 9 </plain></SENT>
</text></p><p><text><SENT sid="11" pm="."><plain>Spinach is a Matlab package, the primary reason being convenience: of all available scientific computing environments, Matlab takes the shortest amount of time to get a calculation going. </plain></SENT>
<SENT sid="12" pm="."><plain>To set Spinach up, follow the installation instructions on the website (<ext-link ext-link-type="uri" xlink:href="http://spindynamics.org">http://spindynamics.org</ext-link>). </plain></SENT>
<SENT sid="13" pm="."><plain>The current public version requires Matlab R2016b or later with Parallel Computing Toolbox and Optimisation Toolbox installed. </plain></SENT>
</text></p></sec></SecTag><sec id="mrc4660-sec-0002"><label>2</label><title><text><SENT sid="14" pm="?"><plain>WHAT DOES NMR SIMULATION SOFTWARE DO? </plain></SENT>
</text></title><p><text><SENT sid="15" pm="."><plain>Time domain NMR simulation packages solve Liouville ‐ von Neumann's equation (the equivalent of Schrödinger's equation for spin ensembles) and calculate the observable magnetisation at each point in time10: (1)∂∂tρ^t=−iL^^tρ^tmt=m^ρ^t,where ρ^t is a vector that contains information about spin system state, L^^ is a matrix, called Liouvillian, that depends on things such as J‐couplings and relaxation rates, and m^ is the observable magnetisation projector. </plain></SENT>
<SENT sid="16" pm="."><plain>To a computer, Equation (1) looks like standard linear algebra; it is solved by calculating the exponential of L^^: (2)ρ^t+dt=exp−iL^^tdtρ^t.Technical details may be found in more specialised reviews of magnetic resonance simulation methods.9, 10, 11, 12, 13, 14 Spinach is designed to automate this process: the user specifies the spin system and the experiment parameters, and receives a free induction decay at the end of the calculation. </plain></SENT>
</text></p><p><text><SENT sid="17" pm="."><plain>Figure 1 shows the general flowchart of a typical liquid state NMR simulation. </plain></SENT>
<SENT sid="18" pm="."><plain>The job of the user is to say which interactions are active at which time, to specify the molecule, and to choose the pulse sequence. Spinach builds and solves Equation (1), and returns the answer to the user. </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0001" orientation="portrait" position="float"><label>Figure 1</label><caption><p><text><SENT sid="19" pm="."><plain>Time‐domain NMR simulation flowchart. </plain></SENT>
<SENT sid="20" pm="."><plain>All stages except the first are automated in modern magnetic resonance simulation software </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-3" xlink:href="MRC-56-415-g001"/></fig></sec><sec id="mrc4660-sec-0003"><label>3</label><title><text><SENT sid="21" pm="."><plain>SPECIFYING THE SYSTEM </plain></SENT>
</text></title><p><text><SENT sid="22" pm="."><plain>In order to be understood by a simulation package, spin system parameters (chemical shifts, J‐couplings, etc.) must be specified in a certain formal way that the program expects. </plain></SENT>
<SENT sid="23" pm="."><plain>Standard formats are starting to emerge,15 but at the moment, every simulation package has its own way of specifying the spin system. Spinach uses Matlab data structures that are described in this section. </plain></SENT>
</text></p><p><text><SENT sid="24" pm="."><plain>Any Spinach calculation must begin with a specification of three major aspects of the simulation:  Matlab uses dots to separate fields in its data structures. </plain></SENT>
<SENT sid="25" pm="."><plain>Those fields make a convenient hierarchy that is used to supply information to Spinach, for example,  Statements of this kind are described in detail in the manual (<ext-link ext-link-type="uri" xlink:href="http://spindynamics.org/wiki">http://spindynamics.org/wiki</ext-link>). </plain></SENT>
<SENT sid="26" pm="."><plain>Once the specification is typed in, the three data structures sys, inter, and bas must be supplied to create.m and basis.m constructor functions. </plain></SENT>
<SENT sid="27" pm="."><plain>These functions process spin system and simulation formalism specifications, write some useful diagnostics to Matlab console and create the spin_system object — the primary data structure that is used to store spin system information in Spinach:  Once these functions are run, Spinach has all the necessary information about the spin system and the formalism. </plain></SENT>
<SENT sid="28" pm="."><plain>The program performs extensive input validation and will always tell the user if it needs more information. </plain></SENT>
<SENT sid="29" pm="."><plain>A typical specification for a simple liquid state NMR case looks like the following:  </plain></SENT>
</text></p><p><text><SENT sid="30" pm="."><plain>It is clear that the specification is human‐readable — a quick way to get going is to modify one of the many standard examples supplied with Spinach. Matlab has three types of brackets: round brackets are used for function arguments and array indices, square brackets are used for vectors and matrices, and curly brackets are used for arrays that can contain anything — those are called cell arrays. </plain></SENT>
<SENT sid="31" pm="."><plain>This latter type is needed for arrays with flexible structure, for example, rotational correlation times may be different for different chemical species, and each of those species may have a different number of them when rotational diffusion is anisotropic. </plain></SENT>
<SENT sid="32" pm="."><plain>Further details of the input syntax are given in the sections below. </plain></SENT>
<SENT sid="33" pm="."><plain>Deeper technicalities are in the online manual. </plain></SENT>
</text></p><sec id="mrc4660-sec-0004"><label>3.1</label><title><text><SENT sid="34" pm="."><plain>Isotopes and labels </plain></SENT>
</text></title><p><text><SENT sid="35" pm="."><plain>Spin system composition is specified by giving a list of isotope names, for example,  sys.isotopes={'1H','1H','19F','235U'};  All known isotopes are supported, including those with spin zero. </plain></SENT>
<SENT sid="36" pm="."><plain>Optionally, a label for each spin may be specified by giving a list of strings, for example,  sys.labels={'CA','CB','HB2','HB3'};  Labels are printed next to spin interaction summaries — this makes diagnostic output easier to read for large spin systems. </plain></SENT>
<SENT sid="37" pm="."><plain>Labels are also used by protein NMR spectroscopy modules to identify different types of atoms — when a dedicated protein pulse sequence (such as hncoca.m) is run, these labels must be set to the standard Protein Data Bank (PDB) atom identifiers. </plain></SENT>
<SENT sid="38" pm="."><plain>PDB and Biological Magnetic Resonance Bank (BMRB) import functions set these labels automatically. </plain></SENT>
</text></p></sec><sec id="mrc4660-sec-0005"><label>3.2</label><title><text><SENT sid="39" pm="."><plain>Interactions </plain></SENT>
</text></title><p><text><SENT sid="40" pm="."><plain>There are three broad classes of interactions in NMR — between spins and the external magnetic field, between spins and other spins, and inside (or so it looks) a specific spin. </plain></SENT>
<SENT sid="41" pm="."><plain>Mathematically, all three classes have the same appearance — as a product of two spin vectors s→1 and s→2 with a matrix A in the middle: Interaction typeMathematical formExamplesSpin–field s→1T⋅A⋅B→ Chemical shiftSpin–spin s→1T⋅A⋅s→2 Dipolar couplingInternal s→1T⋅A⋅s→1 Quadrupolar coupling The matrix is called “interaction tensor”. </plain></SENT>
<SENT sid="42" pm="."><plain>Its orientation‐independent (“isotropic”) part is responsible for the line pattern in the NMR spectrum, and the part that changes with molecular orientation (“anisotropic”) is responsible for the line width and other relaxation properties. </plain></SENT>
</text></p><p><text><SENT sid="43" pm="."><plain>For the spin–field interactions, Spinach needs the primary magnet field in units of Tesla, for example,  sys.magnet=14.1;  If the system has chemical shifts, they may be specified as scalars, 3 × 3 matrices, or eigenvalues + Euler angles (in radians). </plain></SENT>
<SENT sid="44" pm="."><plain>If multiple specifications are supplied, they are added together. Variable nameVariable typeContent inter.zeeman.eigs  inter.zeeman.euler  [1 × nspins] cell array of [1 × 3] row vectorsEigenvalues of chemical shift tensors (in ppm) with Euler angles (in radians). inter.zeeman.matrix  [1 × nspins] cell array of [3 × 3] matricesFull chemical shift tensors (in ppm) as matrices. inter.zeeman.scalar  [1 × nspins] cell array of real numbersIsotropic chemical shifts (in ppm). Examples:  Spin–spin couplings may also be specified as scalars, 3 × 3 matrices, or eigenvalues + Euler angles. </plain></SENT>
<SENT sid="45" pm="."><plain>If multiple specifications are supplied, Spinach adds them together. Variable nameVariable typeContent inter.coupling.eigs inter.coupling.euler [nspins × nspins] cell array of [1 × 3] matricesEigenvalues of coupling tensors (in Hz) with Euler angles (in radians). </plain></SENT>
<SENT sid="46" pm="."><plain>Bilinear coupling is introduced by specifying a coupling between two spins. </plain></SENT>
<SENT sid="47" pm="."><plain>Quadratic coupling (e.g. quadrupolar) is introduced by specifying a coupling between a spin and itself. inter.coupling.matrix [nspins × nspins] cell array of [3 × 3] matricesFull coupling tensors as matrices (in Hz). </plain></SENT>
<SENT sid="48" pm="."><plain>Each element of the cell array is accounted for, so the couplings must be divided by two if a symmetric cell array is supplied. inter.coupling.scalar [nspins × nspins] cell array of realsIsotropic couplings (in Hz). inter.coordinates [nspins × 1] cell array of [1 × 3] row vectorsCartesian coordinates of every spin (in Angstroms), used to determine point dipolar interactions. </plain></SENT>
<SENT sid="49" pm="."><plain>If a cell corresponding to a particular spin is left empty, that spin is assumed to not have any dipolar interactions with the rest of the system. Examples:  Spin–spin interactions may be specified in a variety of equivalent ways. </plain></SENT>
<SENT sid="50" pm="."><plain>The table below provides suggestions on specifying all common NMR interactions. Spinach supports most other types of magnetic resonance spectroscopy, but the corresponding interactions are outside the scope of this paper. Ways of specifying NMR interactionsNuclear chemical shiftUse inter.zeeman.scalar for isotropic chemical shifts, inter.zeeman.matrix for anisotropic chemical shift tensors supplied as matrices, or inter.zeeman.eigs &amp; inter.zeeman.euler for anisotropic chemical shift tensors specified as eigenvalues and Euler angles.Inter‐nuclear J‐couplingUse inter.coupling.scalar; couplings that are specified multiple times, for example, between spins 1 and 2, and then again between spins 2 and 1, will be added together.Inter‐nuclear dipolar couplingUse inter.coordinates if nuclear coordinates are known (they will be converted into a dipolar interaction matrix internally), or inter.coupling.matrix for dipolar coupling supplied as a matrix, or inter.coupling.eigs &amp; inter.coupling.euler for dipolar interactions supplied as eigenvalues and Euler angles.Nuclear quadrupolar couplingBest specified as an “interaction” of the nucleus with itself. </plain></SENT>
<SENT sid="51" pm="."><plain>Use inter.coupling.matrix or inter.coupling.eigs &amp; inter.coupling.euler for quadrupolar interactions specified as eigenvalues and Euler angles. </plain></SENT>
</text></p><p><text><SENT sid="52" pm="."><plain>A word of caution is in order about rotations in general and Euler angles in particular: there is no other subject in magnetic resonance that appears as innocent, and is actually as deadly, as three‐dimensional rotations. </plain></SENT>
<SENT sid="53" pm="."><plain>Space agencies have lost a few satellites to Euler angles, and every magnetic resonance theorist has gained a few grey hairs. </plain></SENT>
<SENT sid="54" pm="."><plain>Always store and publish your interactions as 3 × 3 matrices in Hz or ppm. Spinach would help you translate historical conventions — see the Kernel Utilities section of the online manual. </plain></SENT>
</text></p><p><text><SENT sid="55" pm="."><plain>For partially oriented systems, the order matrix may be supplied to enable the simulation of orientation residuals of anisotropic interactions, for example,  inter.order_matrix=diag([1e−3 2e−3 −3e−3]);  </plain></SENT>
</text></p><p><text><SENT sid="56" pm="."><plain>Magnetic interaction parameters and atomic coordinates may also be imported directly into sys and inter data structures from Gaussian 16 and ORCA17 logs. </plain></SENT>
<SENT sid="57" pm="."><plain>In both cases, the log is first parsed and then the parse data are imported into Spinach, for example,  % Parse a Gaussian calculation log props=gparse('../standard_systems/alanine.log'); % Import data into Spinach [sys,inter]=g2spinach(props,{{'C','13C'},{'N','15N'}},[182.1 264.5],[]);  Further details on the parameters and options for the parser and the import functions are given in the manual. </plain></SENT>
<SENT sid="58" pm="."><plain>Spin system information may also be read from the spinsys{} field of SIMPSON14 *.in files. </plain></SENT>
</text></p><p><text><SENT sid="59" pm="."><plain>Protein spin system composition and interaction information may be loaded from a pair of protein database files — a PDB file with atomic coordinates and a BMRB file with chemical shifts. </plain></SENT>
<SENT sid="60" pm="."><plain>The following call, used in the protein example set supplied with Spinach  % Protein data import options.pdb_mol=1; options.select='all'; options.noshift='delete'; [sys,inter]=protein('1D3Z.pdb','1D3Z.bmrb',options);  would automatically create the necessary data structures, estimate all J‐couplings and some backbone chemical shift anisotropy (CSA) tensors. </plain></SENT>
<SENT sid="61" pm="."><plain>The detailed syntax description may be found in the manual. </plain></SENT>
<SENT sid="62" pm="."><plain>Nucleic acid data may be imported in a similar way:  % Import RNA data options.noshift='delete'; [sys,inter]=nuclacid('example.pdb','example.txt',options);  Spinach example set contains several examples of protein and nucleic acid NMR simulations; some of the outputs of those calculations are shown in Figure 2. </plain></SENT>
<SENT sid="63" pm="."><plain>Further details may be found in our recent papers.5, 6, 7, 18 </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0002" orientation="portrait" position="float"><label>Figure 2</label><caption><p><text><SENT sid="64" pm="."><plain>Left: fully quantum mechanical time‐domain Liouville‐space simulation of ubiquitin NOESY spectrum using full Redfield relaxation superoperator, performed as described in Edwards et al.5 Right: the result of a smoothed chirp inversion pulse on a 31‐spin system with strong nearest‐neighbour J‐couplings, followed by a homospoil gradient and a hard 90‐degree pulse. </plain></SENT>
<SENT sid="65" pm="."><plain>Both calculations are included into the standard example set supplied with Spinach </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-17" xlink:href="MRC-56-415-g002"/></fig><p><text><SENT sid="66" pm="."><plain>NMR calculations on ubiquitin‐size spin systems require 32 GB of RAM for the calculations that do not involve Redfield relaxation superoperator (such as HSQC and HNCOCA), and 128 GB of RAM for the calculations (NOESY and NOESY‐HSQC) that do.5 From about 100 spins onwards, the asymptotic scaling of both RAM requirements and CPU time with the size of the spin system in liquid state NMR simulations is linear. </plain></SENT>
</text></p></sec></sec><sec id="mrc4660-sec-0006"><label>4</label><title><text><SENT sid="67" pm="."><plain>RELAXATION AND CHEMICAL KINETICS </plain></SENT>
</text></title><p><text><SENT sid="68" pm="."><plain>Spinach supports a large variety of relaxation theories, the most commonly used ones being T 1/T 2 approximation and Bloch–Redfield–Wangsness theory.19, 20, 21 The former simply assigns relaxation times to each spin in the system, and the latter assumes rotational diffusion and obtains relaxation rates from the interactions present in the system and the parameters of the diffusion process. </plain></SENT>
<SENT sid="69" pm="."><plain>Particulars of other relaxation theories may be found in the online documentation. </plain></SENT>
<SENT sid="70" pm="."><plain>Relaxation theory module in Spinach is uniquely powerful; it is implemented using very numerically efficient methods that can handle relaxation superoperators with dimension in excess of a million.18, 22 </plain></SENT>
</text></p><p><text><SENT sid="71" pm="."><plain>Spinach relaxation theory specification is a cell array listing all active relaxation theories, for example,  inter.relaxation={'redfield','t1_t2'};  requests both Redfield theory and T 1/T 2 theory. </plain></SENT>
<SENT sid="72" pm="."><plain>Within the T 1/T 2 theory, longitudinal and transverse relaxation rates in Hz should be provided for each spin. </plain></SENT>
<SENT sid="73" pm="."><plain>For example, in a three‐spin system:  inter.relaxation={'t1_t2'}; inter.r1_rates=[1.0 2.0 5.0]; inter.r2_rates=[5.0 7.0 9.0];  This would make all longitudinal states of each spin relax with rates R 1 and all transverse states of each spin with rates R 2. </plain></SENT>
<SENT sid="74" pm="."><plain>Strictly speaking, the T 1/T 2 relaxation model makes no mention of what happens to multi‐spin orders. Spinach therefore takes the liberty of making multi‐spin orders relax at the sum of the relaxation rates of their constituent operators. </plain></SENT>
<SENT sid="75" pm="."><plain>This is a reasonable approximation in most cases. </plain></SENT>
</text></p><p><text><SENT sid="76" pm="."><plain>In order to use Redfield theory, the user must supply anisotropic parts for all relevant interactions, as well as one, two, or three rotational correlation times for each chemical species present in the system. </plain></SENT>
<SENT sid="77" pm="."><plain>The call with one rotational correlation time, for example,  inter.tau_c={1e−9};  </plain></SENT>
</text></p><p><text><SENT sid="78" pm="."><plain>would make Spinach assume isotropic rotational diffusion of what would be assumed to be a spherical molecule. </plain></SENT>
<SENT sid="79" pm="."><plain>A call with two rotational correlation times, for example,  inter.tau_c={[1e−9 2e−9]};  corresponds to axial rotational diffusion of what would be assumed to be an axially symmetric ellipsoid. </plain></SENT>
<SENT sid="80" pm="."><plain>The two‐element vector above gives the rotational correlation time around the symmetry axis of the ellipsoid (first element) and around an axis perpendicular to the symmetry axis (second element). </plain></SENT>
<SENT sid="81" pm="."><plain>The Z axis of the reference frame used to specify the interactions at the spin system specification stage must coincide with the symmetry axis of the rotational diffusion tensor. </plain></SENT>
<SENT sid="82" pm="."><plain>A call with three parameters, for example,  inter.tau_c={[1e−9 2e−9 3e−9]};  is assumed to give the three rotational correlation times of an arbitrary ellipsoid around X, Y, and Z principal axes (in that order) of its rotational diffusion tensor. </plain></SENT>
<SENT sid="83" pm="."><plain>The reference frame used to specify the interactions at the spin system specification stage must coincide with the eigenframe of the diffusion tensor. </plain></SENT>
</text></p><p><text><SENT sid="84" pm="."><plain>The state to which the relaxation superoperator should be driving the system must be specified by setting the inter.equilibrium parameter. </plain></SENT>
<SENT sid="85" pm="."><plain>It controls the “thermalization” of the relaxation superoperator — a numerical correction that makes it drive the spin system to some prescribed thermal equilibrium state. </plain></SENT>
<SENT sid="86" pm="."><plain>The value of 'zero' causes the system to relax to the all‐zero state; specifying 'levante' or 'dibari' makes use of Levante–Ernst23 and DiBari–Levitt24 equilibrium correction methods, respectively. </plain></SENT>
<SENT sid="87" pm="."><plain>In that case, the spin temperature in the equilibrium state should also be specified, for example,  inter.temperature=298;  Not specifying a temperature makes the program use the high‐temperature approximation. </plain></SENT>
<SENT sid="88" pm="."><plain>Examples of relaxation theory simulations (available in the standard example set) are given in Figures 3 and 4. </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0003" orientation="portrait" position="float"><label>Figure 3</label><caption><p><text><SENT sid="89" pm="."><plain>Inversion‐recovery 19F NMR spectrum of 1‐fluoro‐2,4‐dinitrobenzene as a function of mixing time, showing the effect of DD–CSA cross‐correlation described in detail by Grace and Kumar.36 The calculation is included into the standard example set supplied with Spinach </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-19" xlink:href="MRC-56-415-g003"/></fig><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0004" orientation="portrait" position="float"><label>Figure 4</label><caption><p><text><SENT sid="90" pm="."><plain>Longitudinal magnetisation as a function of time in a two‐proton spin system undergoing dipolar cross‐relaxation. </plain></SENT>
<SENT sid="91" pm="."><plain>The two spins are placed 2.0 Å apart, the rotational correlation time is set to 1.0 ns, the temperature is set to 298 K, the chemical shift difference is 0.01 ppm; the magnet field is 14.1 Tesla. </plain></SENT>
<SENT sid="92" pm="."><plain>One of the spins is inverted at time zero. </plain></SENT>
<SENT sid="93" pm="."><plain>Left: no J‐coupling between the spins. </plain></SENT>
<SENT sid="94" pm="."><plain>Right: zero‐quantum beats resulting from a 3.0 Hz J‐coupling. </plain></SENT>
<SENT sid="95" pm="."><plain>The calculations are included into the standard example set supplied with Spinach </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-21" xlink:href="MRC-56-415-g004"/></fig><p><text><SENT sid="96" pm="."><plain>Spinach has a very general chemical kinetics module that can handle arbitrary reaction networks, the only restriction being that the corresponding differential equations must be linear and must have the following general form: (3)ddtABC⋮=KABC⋮,where K is the reaction rate matrix. </plain></SENT>
<SENT sid="97" pm="."><plain>For example, (4)A→k1+B⇆k2+k2−CddtABC=−k1+00k1+−k2+k2−0k2+−k2−ABC. Spinach expects the user to supply this matrix and the initial concentrations of the molecules. </plain></SENT>
<SENT sid="98" pm="."><plain>All of the molecules should be specified in the same input (simply listing their spins one after the other), and then Spinach should be told which spins belong to which molecule using inter.chem.parts variable, for example,  % Isotopes sys.isotopes={'1H','13C','15N','1H','13C','15N'}; % Chemical shifts inter.zeeman.scalar={1.0, 20.0, 15.0, 1.5, 25.0, 16.0}; % Spins 1,2,3 are molecule A; spins 4,5,6 are molecule B inter.chem.parts={[1 2 3],[4 5 6]}; % Kinetic rate matrix (Hz) inter.chem.rates=[−0.1 0.2; 0.1 −0.2]; % Initial concentrations (arbitrary units) inter.chem.concs=[1.0, 2.0];  In the general case, the parameters, supplied at the spin system specification stage, must be Variable nameVariable typeContent inter.chem.parts A cell array of vectors containing integersIndividual vectors in the cell array must contain the numbers of spins that belong to each of the molecules in the chemical reaction, for example, {[1 2], [3 4]} indicates that spins 1 and 2 belong to the first molecule and spins 3 and 4 belong to the second molecule. inter.chem.rates A matrix of real numbersChemical reaction rate matrix between the molecules identified in inter.chem.parts variable. inter.chem.concs A vector of non‐negative real numbersInitial concentrations of the molecules identified in inter.chem.parts variable. </plain></SENT>
</text></p><p><text><SENT sid="99" pm="."><plain>The systems on either side of the reaction arrow must have the same number of spins, must have those spins specified in the same order, and must have the same basis set. </plain></SENT>
<SENT sid="100" pm="."><plain>Within Bloch–Redfield–Wangsness relaxation theory, different chemical compartments can have different rotational correlation times. </plain></SENT>
</text></p></sec><sec id="mrc4660-sec-0007"><label>5</label><title><text><SENT sid="101" pm="."><plain>FORMALISM AND BASIS SET SPECIFICATION </plain></SENT>
</text></title><p><text><SENT sid="102" pm="."><plain>Spinach supports three simulation formalisms: the standard |α⟩ and |β⟩ Zeeman basis used in most textbooks (colloquially known as “the Hilbert space”), the adjoint representation of the same (known as “the Liouville space”25), and a particularly convenient version of Liouville space that uses irreducible spherical tensor operators as the basis set.4 The formalism is chosen using bas.formalism parameter, for example,  bas.formalism='sphten−liouv';  Formalism keywordFormalism description 'sphten−liouv' Liouville space formalism: the fundamental operators from which the basis set is built are single‐spin irreducible spherical tensors. </plain></SENT>
<SENT sid="103" pm="."><plain>These operators are ordered with respect to many common transformations and conservation laws encountered in magnetic resonance. </plain></SENT>
<SENT sid="104" pm="."><plain>Many operations may therefore be performed semi‐analytically. </plain></SENT>
<SENT sid="105" pm="."><plain>A lot of Spinach functionality either requires this formalism or operates most efficiently within it. 'zeeman−liouv' Liouville space formalism: the fundamental operators from which the basis set is built are single transition operators between the projection states onto the Z axis. </plain></SENT>
<SENT sid="106" pm="."><plain>The state vector coefficients in this formalism are easy to interpret because they correspond to populations of standard textbook spin states. </plain></SENT>
<SENT sid="107" pm="."><plain>This formalism is essentially a vectorisation of 'zeeman−hilb'; it permits only limited state space reduction; most calculations would have exponential complexity scaling if this option is chosen. 'zeeman−hilb' Hilbert space formalism: the fundamental states from which the basis set is built are the projection states onto the Z axis. </plain></SENT>
<SENT sid="108" pm="."><plain>This is the standard density operator formalism described in most magnetic resonance textbooks. </plain></SENT>
<SENT sid="109" pm="."><plain>Only the core functionality (operators, states, propagators, and evolution) is available. </plain></SENT>
<SENT sid="110" pm="."><plain>This option is mostly useful for backwards compatibility checks; it cannot support complicated relaxation theories or chemical kinetics. </plain></SENT>
<SENT sid="111" pm="."><plain>All calculations within this formalism would have exponential complexity scaling. </plain></SENT>
</text></p><p><text><SENT sid="112" pm="."><plain>Basis sets are a highly technical topic — this tutorial specifically aims to avoid complicated mathematics. </plain></SENT>
<SENT sid="113" pm="."><plain>It would suffice to say that 'zeeman−hilb' is essentially the textbook route with Pauli matrices,1, 2, 3 and 'sphten−liouv' is its modern and very numerically efficient replacement.5, 6, 26, 27 The fastest algorithms that use incomplete basis sets6, 7 and have polynomial complexity scaling are only available within 'sphten−liouv' formalism. </plain></SENT>
<SENT sid="114" pm="."><plain>If the system has more than 20 spins, 'sphten−liouv' is the only realistic choice.5 </plain></SENT>
</text></p><p><text><SENT sid="115" pm="."><plain>The concept of an incomplete basis set is relatively new in magnetic resonance simulations,6 and an extended explanation is perhaps warranted. </plain></SENT>
<SENT sid="116" pm="."><plain>Every quantum state of the spin system may be described by a density matrix, and any matrix may be written as a linear combination of some basis matrices. </plain></SENT>
<SENT sid="117" pm="."><plain>In the simple case of one spin, (5)ρ^=aσ^X+bσ^Y+cσ^Z,where σ^Xσ^Yσ^Z are Pauli matrices and {a, b, c} are complex numbers. </plain></SENT>
<SENT sid="118" pm="."><plain>In this case, the Pauli matrices are the “basis set”, and the complex numbers are the “expansion coefficients”. </plain></SENT>
<SENT sid="119" pm="."><plain>Systems with multiple spins have many more operators in the basis set: not only single‐spin operators but also multispin operators (e.g. σ^Z1⊗σ^Z2) that describe correlated simultaneous dynamics of multiple spins. </plain></SENT>
<SENT sid="120" pm="."><plain>It is here that approximations can be made: many such states are not populated for a variety of reasons.6, 7, 26, 27 The smaller the basis set, the faster the calculation becomes — but a balance must be struck between calculation speed and accuracy. </plain></SENT>
</text></p><p><text><SENT sid="121" pm="."><plain>To run an exact (i.e. complete basis set) calculation in any formalism, set  bas.approximation='none';  This option requests a complete basis set, which is only practical up to about 20 spins in Hilbert space and 10 spins in Liouville space. Approximate calculations are those that use an incomplete basis set. </plain></SENT>
<SENT sid="122" pm="."><plain>The user is expected to provide the information that Spinach would use to build the basis set. </plain></SENT>
<SENT sid="123" pm="."><plain>The following frequently encountered choices are provided with the kernel: ApproximationApproximation descriptionParameters 'IK−0' Includes all product states between up to (and including) bas.level spins located anywhere within the system. </plain></SENT>
<SENT sid="124" pm="."><plain>For example, setting bas.level=5 would generate the basis that contains all spin correlations that involve five spins or fewer. </plain></SENT>
<SENT sid="125" pm="."><plain>The location of those spins is not taken into account. bas.level  'IK−1'  Includes all product states between up to (and including) bas.level directly coupled spins and up to bas.space_level between spins that are closer together than the proximity cut‐off radius.   This basis starts from IK−0, but then also drops correlations between very remote spins — if a pair of spins is not coupled in any way, even the two‐spin order between them is not actually needed. </plain></SENT>
<SENT sid="126" pm="."><plain>Here, bas.level controls the maximum correlation order for spins connected by couplings, and bas.space_level controls the maximum correlation order for spins that are within the proximity cut‐off radius. bas.level, bas.space_level  'IK−2'  Includes, for every spin, all correlations with all directly coupled spins and correlations with up to (and including) bas.space_level with spins that are closer together than the user‐specified proximity cut‐off.   This basis is similar to IK−1, except the truncation level around each spin is automatically set to the number of its direct coupling neighbours. </plain></SENT>
<SENT sid="127" pm="."><plain>This basis set can be quite large, but it is also very accurate. bas.space_level  The concept of a basis set in NMR simulations is illustrated in Figure 5. </plain></SENT>
<SENT sid="128" pm="."><plain>The spin system in question is anti‐3,4‐difluoro‐n‐heptane — with 16 spins, it is just outside of what is realistically possible to simulate with conventional time‐domain tools, even if symmetry and sparse matrix algebra is used. </plain></SENT>
<SENT sid="129" pm="."><plain>It is clear from the right panel of Figure 5 (note the logarithmic scale) that only correlations involving up to eight spins are populated to a significant extent in this system. </plain></SENT>
<SENT sid="130" pm="."><plain>This is a fundamentally important observation: the dimension of the full Liouville space in this system is in the billions, whereas the dimension of the reduced subspace is only 1,924,374; it is actually reduced further to 360,770 once the various symmetries and conservation laws are taken into account — Spinach does that automatically. </plain></SENT>
<SENT sid="131" pm="."><plain>It is instructive to go through the console log, which is reproduced below. </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0005" orientation="portrait" position="float"><label>Figure 5</label><caption><p><text><SENT sid="132" pm="."><plain>Convergence of the 19F NMR spectrum of anti‐3,4‐difluoro‐n‐heptane (16‐spin system) as a function of the basis truncation level. </plain></SENT>
<SENT sid="133" pm="."><plain>Top left: six‐spin orders and below. </plain></SENT>
<SENT sid="134" pm="."><plain>Middle left: seven‐spin orders and below. </plain></SENT>
<SENT sid="135" pm="."><plain>Bottom left: eight‐spin orders and below; this calculation is indistinguishable from the exact simulation to within about 10−3 in relative amplitude. </plain></SENT>
<SENT sid="136" pm="."><plain>Right: contributions from different orders of spin correlation to the system trajectory. </plain></SENT>
<SENT sid="137" pm="."><plain>The two traces in the lower part of the figure correspond to 9‐ and 10‐spin correlations — from their negligible magnitude, it is clear that for practical simulation purposes only correlations of up to eight spins need to be kept in the basis </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-23" xlink:href="MRC-56-415-g005"/></fig><p><text><SENT sid="138" pm="."><plain> </plain></SENT>
</text></p><p><text><SENT sid="139" pm="."><plain>Spinach first applies the state space restriction to eight‐spin orders or less,6 then applies the conservation law with respect to the coherence order (+1 only in pulse‐acquire simulations with an ideal 90‐degree pulse), then applies the conservation law with respect to the observer spins (only zero‐quantum states are expected on protons), then applies the symmetry factorisation for the two methyl groups,26 then runs the zero track elimination,7 and finally engages the Tesla K40 GPU that it has found in the system to push the density matrix through its time evolution using the Krylov algorithm.7 The whole calculation takes a few minutes. </plain></SENT>
<SENT sid="140" pm="."><plain>This ability to reduce matrix dimensions on the fly is the strongest side of Spinach. </plain></SENT>
</text></p><p><text><SENT sid="141" pm="."><plain>The simulations producing Figure 5 are included into the standard example set supplied with versions 1.10 and later of Spinach; more technical information on the basis set specification may be found in the online manual and in the papers cited above — this practical tutorial is not the place for eye‐popping mathematics and computer science. </plain></SENT>
<SENT sid="142" pm="."><plain>For the purposes of getting started, the advice is quite simple: increase the basis set until the answer stops changing. </plain></SENT>
<SENT sid="143" pm="."><plain>In most liquid state NMR simulations, IK−2 with bas.space_level=3 and a 5 Å proximity cut‐off is sufficient. </plain></SENT>
<SENT sid="144" pm="."><plain>It is also possible to specify a completely custom basis set — see the online manual for further details. </plain></SENT>
<SENT sid="145" pm="."><plain>A technical discussion of the accuracy considerations when using incomplete basis sets is given in Karabanov et al.28 </plain></SENT>
</text></p></sec><sec id="mrc4660-sec-0008"><label>6</label><title><text><SENT sid="146" pm="."><plain>BUILT‐IN PULSE SEQUENCES </plain></SENT>
</text></title><p><text><SENT sid="147" pm="."><plain>Spinach is designed to be extensible — our users write their own pulse sequences — but the following standard liquid state NMR experiments have been implemented by the Spinach team or donated by the users over the years: pulse‐acquire, inversion‐recovery, saturation‐recovery, CLIP‐HSQC, COSY, DQF‐COSY, HETCOR, HMQC, HNCO, HNCOCA, HSQC, LCOSY, NOESY, ROESY, TOCSY, and NOESY‐HSQC. </plain></SENT>
<SENT sid="148" pm="."><plain>The sequences rely on a common syntax that should be used to provide the relevant parameters, for example (HSQC):  The list of necessary parameters is given in the documentation page for each pulse sequence. </plain></SENT>
<SENT sid="149" pm="."><plain>The responsibility for processing the free induction decay rests with the user. </plain></SENT>
<SENT sid="150" pm="."><plain>It may either be processed in Matlab (Spinach provides 1D, 2D, and 3D plotting functionality) or exported into a third‐party NMR processing package using Matlab's built‐in ASCII export functionality. </plain></SENT>
</text></p></sec><sec id="mrc4660-sec-0009"><label>7</label><title><text><SENT sid="151" pm="."><plain>WRITING CUSTOM PULSE SEQUENCES </plain></SENT>
</text></title><p><text><SENT sid="152" pm="."><plain>Writing Spinach simulations of pulse sequences is easier than writing them for NMR spectrometers because the syntax is sensible (here the instrument manufacturers get a dirty look) and phase cycles are not a problem — coherence selection may be performed by simply zeroing unwanted coherences.26 The next page shows the complete source code of the current Spinach implementation of the NOESY sequence29 that simulates anything from aziridine30 to ubiquitin,5 and also supports chemical kinetics. </plain></SENT>
<SENT sid="153" pm="."><plain>It is instructive to go through the code line by line.  </plain></SENT>
</text></p><p><text><SENT sid="154" pm="."><plain>The pulse sequence does not need to worry about either the spin system or any relaxation/kinetics parameters: the corresponding operator or superoperator matrices (H for the Hamiltonian, R for the relaxation superoperator, and K for the kinetics superoperator) will simply be received from Spinach kernel — hence the argument list in the very first line. </plain></SENT>
<SENT sid="155" pm="."><plain>The next line puts all three operators together; their sum is called the Liouvillian and denoted L. </plain></SENT>
</text></p><p><text><SENT sid="156" pm="."><plain>The next line deals with the evolution time step, which is inversely related to the sweep width that the user has specified in the parameters structure as illustrated in Section 6. </plain></SENT>
<SENT sid="157" pm="."><plain>The sequence then asks Spinach for the detection state ( L^+ on all spins specified by the user) and the pulse operators ( L^X and L^Y). </plain></SENT>
</text></p><p><text><SENT sid="158" pm="."><plain>The sequence then performs the first pulse by taking the initial condition (supplied by the user in parameters.rho0) and using the step function. </plain></SENT>
<SENT sid="159" pm="."><plain>That function uses Krylov propagation7, 31 and is optimised for one‐off evolution events. </plain></SENT>
<SENT sid="160" pm="."><plain>The particulars are rather technical — Spinach manual contains further information. </plain></SENT>
</text></p><p><text><SENT sid="161" pm="."><plain>The evolution command in the next line refers to the indirect dimension evolution. </plain></SENT>
<SENT sid="162" pm="."><plain>The arguments are the Liouvillian (L), the starting state (rho), the length of the time step, and the number of steps. </plain></SENT>
<SENT sid="163" pm="."><plain>Because this evolution period is incremented during the experiment, it makes sense to only run it once and to keep the entire trajectory — this is the meaning of the last argument in the function call. </plain></SENT>
<SENT sid="164" pm="."><plain>The trajectory is returned as a stack of state vectors (rho_stack), that is, a matrix made of individual column vectors arranged in the order of time from left to right. </plain></SENT>
</text></p><p><text><SENT sid="165" pm="."><plain>At this point, the simulation splits into four independent batches: the next pulse is applied with four phases to create the components of the States quadrature32 and to eliminate the axial peaks in the F2 dimension that result from partial relaxation of the longitudinal magnetisation during the pulse sequence. </plain></SENT>
<SENT sid="166" pm="."><plain>A homospoil gradient is then applied to all four stacks (any states other than L^Z are simply zeroed out analytically). </plain></SENT>
</text></p><p><text><SENT sid="167" pm="."><plain>The system is then sent through the mixing time using the evolution.m function provided by Spinach kernel. </plain></SENT>
<SENT sid="168" pm="."><plain>Its inner workings are complicated,7 but the user only needs to provide the evolution operator (relaxation and kinetics are needed here) and the duration of the evolution period. </plain></SENT>
<SENT sid="169" pm="."><plain>The mixing time is followed by another homospoil gradient and another pulse, with the same phase on all four batches. </plain></SENT>
<SENT sid="170" pm="."><plain>Axial peaks are then eliminated by subtracting the simulation pairs that differed in the direction of the second pulse. </plain></SENT>
</text></p><p><text><SENT sid="171" pm="."><plain>Finally, the direct dimension evolution is run, and the magnetisation is detected on the coil state. </plain></SENT>
<SENT sid="172" pm="."><plain>The two components of the States quadrature are returned to the user. </plain></SENT>
</text></p><p><text><SENT sid="173" pm="."><plain>Pulse sequences live in the experiments folder of Spinach distribution. </plain></SENT>
<SENT sid="174" pm="."><plain>All of them are extensively documented and also contain subroutines (called “grumblers”) that run detailed checks on the parameters supplied (or not supplied, as the case may be) by the user. </plain></SENT>
<SENT sid="175" pm="."><plain>Following that style is a good idea. </plain></SENT>
</text></p></sec><sec id="mrc4660-sec-0010"><label>8</label><title><text><SENT sid="176" pm="."><plain>FITTING EXPERIMENTAL DATA </plain></SENT>
</text></title><p><text><SENT sid="177" pm="."><plain>Once a simulation is set up, converting it into a fitting procedure is quite easy — Matlab provides the necessary infrastructure. </plain></SENT>
<SENT sid="178" pm="."><plain>The only technicality is matching the X axis: point position and spacing in the simulation are not necessarily the same as in the experimental data. </plain></SENT>
<SENT sid="179" pm="."><plain>The experimental spectrum and the simulated one must therefore be interpolated into a common X axis point grid, for example,  sim_spec=interp1(sim_axis,sim_spec,exp_axis,'pchip');  This is a call to Matlab's built‐in 1D interpolation function that tells the program to take the data set with the ppm values for each point in the simulated spectrum listed in sim_axis, and values in sim_spec, and calculate the values of that spectrum at the points specified in exp_axis (the X axis of the experimental spectrum). </plain></SENT>
<SENT sid="180" pm="."><plain>The last option specifies a particular interpolation method — technical details may be found in Matlab documentation. </plain></SENT>
<SENT sid="181" pm="."><plain>Once the simulated and the experimental spectrum have the same X axis, they may be subtracted and the least squares error may be computed:  err=norm(real(expt_data)−real(sim_spec))^2;  This error is then minimised by Matlab as a function of relevant simulation parameters — multiple examples of such fitting runs are given in the standard example set supplied with Spinach (Figure 6). </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0006" orientation="portrait" position="float"><label>Figure 6</label><caption><p><text><SENT sid="182" pm="."><plain>The result of the fitting of a 500 MHz 1H NMR spectrum of anti‐2,3‐difluoro‐n‐butane with respect to chemical shifts, J‐couplings, and line width. </plain></SENT>
<SENT sid="183" pm="."><plain>Red dots: experimental data. </plain></SENT>
<SENT sid="184" pm="."><plain>Blue lines: fitted spectrum. </plain></SENT>
<SENT sid="185" pm="."><plain>This calculation is included into the standard example set supplied with Spinach </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-31" xlink:href="MRC-56-415-g006"/></fig><p><text><SENT sid="186" pm="."><plain>Of the many error minimisation algorithms available in Matlab, Nelder–Mead simplex is recommended for situations when the initial guess is not particularly good,33 and LBFGS method for the refinement runs.34 Note that NMR fitting is a difficult problem — every parameter combination that makes any two lines overlap between the theoretical and the experimental spectrum is a local minimum on the error surface. </plain></SENT>
</text></p></sec><sec id="mrc4660-sec-0011"><label>9</label><title><text><SENT sid="187" pm="."><plain>CASE STUDY 1—COSY45 OF ROTENONE </plain></SENT>
</text></title><p><text><SENT sid="188" pm="."><plain>As a simple example that is both sufficiently easy to get started and sufficiently difficult to require Spinach, consider the simulation of a magnitude‐mode COSY45 spectrum of rotenone — a system with 22 spins and an irregular coupling pattern (Figure 7). </plain></SENT>
<SENT sid="189" pm="."><plain>This example is available in the example set supplied with Spinach. </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0007" orientation="portrait" position="float"><label>Figure 7</label><caption><p><text><SENT sid="190" pm="."><plain>Chemical structure of rotenone </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-33" xlink:href="MRC-56-415-g007"/></fig><p><text><SENT sid="191" pm="."><plain>The first thing Spinach requires is the function declaration:  function cosy45_rotenone()  This is not strictly necessary, but a good practice because this guarantees that Matlab starts the simulation with a clean background where no previously assigned variables exist. </plain></SENT>
<SENT sid="192" pm="."><plain>The second stage is to specify the isotopes, 22 protons in this case:  See the spin system specification section of the online manual for technical details on how to specify more complicated spin systems. </plain></SENT>
<SENT sid="193" pm="."><plain>The next step is to specify the magnet field (in Tesla):  sys.magnet=5.9;  then chemical shifts, in ppm for all protons:  then all scalar couplings, in Hz:  inter.coupling.scalar{3,4}=12.1; inter.coupling.scalar{4,5}=3.1; inter.coupling.scalar{3,5}=1.0; inter.coupling.scalar{3,8}=1.0; inter.coupling.scalar{1,8}=1.0; inter.coupling.scalar{6,7}=8.6; inter.coupling.scalar{5,8}=4.1; inter.coupling.scalar{7,9}=0.7; inter.coupling.scalar{7,10}=0.7; inter.coupling.scalar{9,10}=15.8; inter.coupling.scalar{10,11}=9.8; inter.coupling.scalar{9,11}=8.1; inter.coupling.scalar{13,14}=1.5; inter.coupling.scalar{12,14}=0.9; inter.coupling.scalar{22,22}=0;  where the last line is necessary to tell Matlab that the array is 22 by 22 and all other elements are empty or zero. </plain></SENT>
</text></p><p><text><SENT sid="194" pm="."><plain>The next stage is basis set specification. </plain></SENT>
<SENT sid="195" pm="."><plain>The complete basis set for a 22‐spin system is too large, and we must therefore rely on the restricted state space approximation (see the basis set specification section of the online manual and our recent papers5, 6, 7, 26, 27 for technical details of the basis set selection process). </plain></SENT>
<SENT sid="196" pm="."><plain>Here, we will be using the IK−2 basis with Liouville space formalism and no spatial proximity analysis because atomic coordinates are not supplied:  bas.formalism='sphten−liouv'; bas.approximation='IK−2'; bas.space_level=1; bas.connectivity='scalar_couplings';  The three methyl groups contain magnetically equivalent protons, and this symmetry may optionally be used to reduce the calculation time:  bas.sym_group={'S3','S3','S3'}; bas.sym_spins={[14 15 16],[17 18 19],[20 21 22]};  This completes the basis set specification. </plain></SENT>
<SENT sid="197" pm="."><plain>The next stage is to specify the pulse sequence parameters. </plain></SENT>
<SENT sid="198" pm="."><plain>The full list of the parameters that Spinach stock pulse sequences require is given in the manual page for each sequence. </plain></SENT>
<SENT sid="199" pm="."><plain>The specific parameters required by the COSY sequence in this case are:  parameters.angle=pi/4; parameters.offset=1200; parameters.sweep=2000; parameters.npoints=[512 512]; parameters.zerofill=[2048 2048]; parameters.spins={'1H'}; parameters.axis_units='ppm';  where the field names are intended to be self‐explanatory. </plain></SENT>
<SENT sid="200" pm="."><plain>This completes the specification of the spin system, of the basis set, and of the experiment parameters. </plain></SENT>
<SENT sid="201" pm="."><plain>The next stage is to give all that information to Spinach. </plain></SENT>
<SENT sid="202" pm="."><plain>This is accomplished by running the two housekeeping functions:  spin_system=create(sys,inter); spin_system=basis(spin_system,bas);  Both print copious output to the console. </plain></SENT>
<SENT sid="203" pm="."><plain>This output should always be inspected carefully because it might contain warning messages. </plain></SENT>
<SENT sid="204" pm="."><plain>The next stage is simulation, which is carried out in liquid state (hence the liquid context function) with the assumptions set to 'nmr', indicating common high‐field NMR spectroscopy:  fid=liquid(spin_system,@cosy,parameters,'nmr');  The simulation returns the two‐dimensional free induction decay that should undergo apodization (cosine bell in both dimensions is a good choice here):  fid=apodization(fid,'cosbell−2d');  and Fourier transform (fft2 performs a two‐dimensional transform and fftshift moves the zero frequency to the centre of the spectrum — Matlab's default is to have it on the edge):  spec=fftshift(fft2(fid,parameters.zerofill(2),parameters.zerofill(1)));  Finally, the spectrum is plotted (the many parameters of the plotting function are explained in the online manual):  plot_2d(spin_system,spec,parameters,20,[0.0025 0.05 0.0025 0.05],2,256,6,'positive');  The whole simulation should take less than a minute on any modern laptop (Figure 8). </plain></SENT>
<SENT sid="205" pm="."><plain>Note that Matlab auto‐starts the parallelisation engine when it runs for the first time, that stage only happens once per Matlab session. </plain></SENT>
</text></p><fig fig-type="Figure" xml:lang="en" id="mrc4660-fig-0008" orientation="portrait" position="float"><label>Figure 8</label><caption><p><text><SENT sid="206" pm="."><plain>COSY‐45 simulation for rotenone, performed as described in the main text </plain></SENT>
</text></p></caption><graphic id="nlm-graphic-39" xlink:href="MRC-56-415-g008"/></fig></sec><sec id="mrc4660-sec-0012"><label>10</label><title><text><SENT sid="207" pm="."><plain>CASE STUDY 2 — NOESY OF UBIQUITIN </plain></SENT>
</text></title><p><text><SENT sid="208" pm="."><plain>This section describes the stages of setting up a simulation of a simple protein NMR experiment. </plain></SENT>
<SENT sid="209" pm="."><plain>Multiple examples of such simulations are available in the standard example set supplied with Spinach. </plain></SENT>
<SENT sid="210" pm="."><plain>You would need the following: A suitably powerful computer. </plain></SENT>
<SENT sid="211" pm="."><plain>As a guidance, calculations that do not require a relaxation superoperator (HSQC and such) would need 16 GB of RAM to run ubiquitin, and the calculations that do need it (NOESY and such) would require 64 GB.A PDB file containing Cartesian coordinates of every atom in the protein, including protons.A BMRB file containing chemical shifts for those atoms that have been assigned. </plain></SENT>
<SENT sid="212" pm="."><plain>Unassigned atoms would either not appear in the simulation or end up with a chemical shift of −1 ppm (depending on the options specified, placing them at −1 ppm often helps with the subsequent assignment). </plain></SENT>
</text></p><p><text><SENT sid="213" pm="."><plain>Spinach cross‐checks the amino acid sequence between the PDB and the BMRB file — any mismatch would produce an error message. </plain></SENT>
<SENT sid="214" pm="."><plain>Use the following command to import data and create Spinach input structures:  [sys,inter]=protein('pdb_file_name','bmrb_file_name',options);  The full list of options and the detailed descriptions of the subfields of sys and inter data structures are available in the manual. </plain></SENT>
<SENT sid="215" pm="."><plain>The protein import function above fills and returns the following fields:  sys.isotopes sys.labels inter.zeeman.scalar inter.zeeman.matrix inter.coupling.scalar inter.coordinates  Field names are self‐explanatory: isotope names are placed into sys.isotopes, PDB labels of each atom are placed into sys.labels, chemical shifts are placed into inter.zeeman.scalar, rough guesses for nitrogen CSAs are placed into inter.zeeman.matrix (if you have accurate CSA tensors, you need to place them into the corresponding cells of inter.zeeman.matrix array after the import is complete), reasonable guesses of J‐couplings5 are placed into inter.coupling.scalar (if you have accurate J‐couplings, you would need to overwrite the values in inter.coupling.scalar after the import is complete); and PDB atom coordinates are placed into inter.coordinates; nothing else is imported or guessed. </plain></SENT>
<SENT sid="216" pm="."><plain>The detailed list of everything that happens when protein data are imported into Spinach is given in our recent paper5 and printed to the console at run time. </plain></SENT>
</text></p><p><text><SENT sid="217" pm="."><plain>After the import is finished, the resulting sys and inter structures may be used by Spinach. </plain></SENT>
<SENT sid="218" pm="."><plain>Dipolar coupling tensors are computed automatically from atomic coordinates. </plain></SENT>
<SENT sid="219" pm="."><plain>Any additional information (quadrupolar coupling, unpaired electrons and associated interactions, etc.) can be added to sys and inter structures at this point. </plain></SENT>
</text></p><p><text><SENT sid="220" pm="."><plain>At the next stage in the input preparation, you need to specify the magnet field and the cut‐off tolerances for the various interactions (which distances are “too large” for the dipolar coupling, and which J‐couplings are “too small” to be consequential). </plain></SENT>
<SENT sid="221" pm="."><plain>The top of the Matlab file should look similar to the following:  % Protein data [sys,inter]=protein('1D3Z.pdb','1D3Z.bmrb',options); % Magnet field sys.magnet=21.1356; % Tolerances sys.tols.prox_cutoff=5.0; sys.tols.inter_cutoff=2.0;  Cut‐off tolerance for proximity is specified in Angstrom and cut‐off for J‐coupling is specified in Hz. </plain></SENT>
<SENT sid="222" pm="."><plain>In the example above, dipolar couplings would not be taken into account between spins that are further than 5.0 Å apart and any J‐coupling smaller than 2.0 Hz would be ignored. </plain></SENT>
</text></p><p><text><SENT sid="223" pm="."><plain>The next thing to be specified is the relaxation theory. </plain></SENT>
<SENT sid="224" pm="."><plain>Redfield relaxation theory is a very expensive option from the computational point of view — NOESY simulation for a 70‐residue protein requires about 64 GB of RAM (it was taking a terabyte in some of the early versions of Spinach). </plain></SENT>
<SENT sid="225" pm="."><plain>If you do not require accurate relaxation theory treatment, use something similar to the following:  % Relaxation theory inter.relaxation='damp'; inter.damp_rate=5.0;  This requests a non‐selective damping at 5.0 Hz for all states (the relaxation superoperator would be a diagonal matrix with −5.0 on the diagonal). </plain></SENT>
<SENT sid="226" pm="."><plain>Alternatively, Spinach supports simple T 1/T 2 and Lindblad relaxation models — those are often sufficient; details are in the manual. </plain></SENT>
<SENT sid="227" pm="."><plain>However, if you do require accurate relaxation treatment (it is strictly necessary for NOESY spectra), the following should be supplied:  % Relaxation theory inter.relaxation='redfield'; inter.rlx_keep='kite'; inter.tau_c=5e−9;  This requests full Redfield theory: DD, CSA, NQI, and all cross‐correlations thereof.18 Dipolar tensors are computed from atomic coordinates, CSAs and NQIs must be provided as described in Section 3. </plain></SENT>
<SENT sid="228" pm="."><plain>The middle line in the specification above requests the “Redfield kite” — cross‐relaxation is included between longitudinal states only. </plain></SENT>
<SENT sid="229" pm="."><plain>If you require the treatment of all cross‐relaxation processes, specify “secular” instead of “kite” — note that the simulation time would increase considerably. </plain></SENT>
<SENT sid="230" pm="."><plain>The last line specifies the rotational correlation time in seconds. </plain></SENT>
<SENT sid="231" pm="."><plain>It is important that you get this number right because all relaxation rates depend on it. Spinach relaxation module supports anisotropic rotational diffusion; further details are given in Section 3. </plain></SENT>
</text></p><p><text><SENT sid="232" pm="."><plain>The next step is to choose a basis set. </plain></SENT>
<SENT sid="233" pm="."><plain>This is a very complicated topic (see the online manual), but the minimal basis set that produces quantitatively accurate results for proteins in liquid state is the following:  % Basis set bas.formalism='sphten−liouv'; bas.approximation='IK−1'; bas.connectivity='scalar_couplings'; bas.level=5; bas.space_level=3;  This requests IK−1(5,3) connectivity‐adaptive basis set that includes local correlations of up to five spins on the J‐coupling graph and local correlations of up to three spins on the spatial proximity graph.5 In principle, some amino acid side chains (valine and isoleucine) require correlations of more than five spins to be present in the basis set to get their multiplicity absolutely right, but the multiplet structure of the corresponding signals is never actually resolved in protein NMR spectra. </plain></SENT>
<SENT sid="234" pm="."><plain>An absolutely bulletproof basis here would be IK−1(8,3), but in this case, it simply produces the same answer after a much longer calculation. </plain></SENT>
</text></p><p><text><SENT sid="235" pm="."><plain>The next stage is to call Spinach constructor functions and generate the spin_system data structure that contains all information about the spin system and is required by most high‐level Spinach functions as the first argument:  % Create the spin system structure spin_system=create(sys,inter); % Kill carbons and nitrogens spin_system=kill_spin(spin_system,strcmp('13C',spin_system.comp.isotopes)); spin_system=kill_spin(spin_system,strcmp('15N',spin_system.comp.isotopes)); % Build the basis spin_system=basis(spin_system,bas);  The two lines in the middle are optional — in this case, they request the removal of all carbon and nitrogen spins from the spin system. </plain></SENT>
<SENT sid="236" pm="."><plain>This is necessary for the NOESY simulation but should not be done for HSQC, HNCO, and other sequences that require the presence of 15N and 13C spins. </plain></SENT>
</text></p><p><text><SENT sid="237" pm="."><plain>The next stage is to specify experiment parameters. </plain></SENT>
<SENT sid="238" pm="."><plain>In the case of 2D NOESY, the following is a reasonable set:  % Sequence parameters parameters.tmix=0.065; parameters.offset=4250; parameters.sweep=10750; parameters.npoints=[512 512]; parameters.zerofill=[2048 2048]; parameters.spins={'1H'}; parameters.axis_units='ppm'; parameters.rho0=state(spin_system,'Lz','1H');  As the names of the parameters suggest, this requests a mixing time of 65 ms, frequency offset of 4250 Hz, sweep width of 10750 Hz, 512 points to be acquired in both dimensions, and zerofilled to 2048 points in both dimensions, the sequence is operating on 1H nuclei, axis units should be ppm, and the initial condition is L^Z on protons. </plain></SENT>
</text></p><p><text><SENT sid="239" pm="."><plain>The next stage is the actual simulation. </plain></SENT>
<SENT sid="240" pm="."><plain>In the case of 2D NOESY, the syntax is  % Simulation fid=liquid(spin_system,@noesy,parameters,'nmr');  The choice of the outer function reflects the fact that we are running a liquid state simulation (Spinach supports all other types of magnetic resonance spectroscopy and imaging), spin_system is the data structure containing the information about the system, noesy is the name of the pulse sequence we are running (@ symbol is a Matlab technicality — it denotes a function handle), and the various fields of the parameters argument have all been set above. </plain></SENT>
<SENT sid="241" pm="."><plain>The result is a 2D free induction decay that is ready for standard NMR data processing. </plain></SENT>
<SENT sid="242" pm="."><plain>Depending on the pulse sequence, it may be a simple array of complex numbers, or it might contain subfields, such as fid.cos and fid.sin, that are used in States quadrature processing of phase‐sensitive experiments. </plain></SENT>
</text></p><p><text><SENT sid="243" pm="."><plain>The next stage is apodization, which may be accomplished using any of the window functions available in Spinach — the complete list is in the manual. </plain></SENT>
<SENT sid="244" pm="."><plain>In this particular case, we will use Gaussian apodization:  % Apodization fid.cos=apodization(fid.cos,'gaussian‐2d',5); fid.sin=apodization(fid.sin,'gaussian‐2d',5);  where the last argument is the decay rate (per data set point) of the Gaussian function — this parameter should be increased until the sinc wiggles disappear from the spectrum. </plain></SENT>
<SENT sid="245" pm="."><plain>Good practical advice on spectral apodization was published by Vosegaard and Nielsen.35 </plain></SENT>
</text></p><p><text><SENT sid="246" pm="."><plain>The next stage is Fourier transform and quadrature processing. </plain></SENT>
<SENT sid="247" pm="."><plain>For a 2D NOESY simulation, States quadrature processing is necessary:  % F2 Fourier transform f1_cos=real(fftshift(fft(fid.cos,parameters.zerofill(2),1),1)); f1_sin=real(fftshift(fft(fid.sin,parameters.zerofill(2),1),1)); % States signal f1_states=f1_cos−1i*f1_sin; % F1 Fourier transform spectrum=fftshift(fft(f1_states,parameters.zerofill(1),2),2);  This is standard Matlab Fourier transform syntax: fft is the command that performs the transform and fftshift performs a cyclic shift that moves the zero frequency to the centre of the spectrum. </plain></SENT>
<SENT sid="248" pm="."><plain>Finally, the plotting function produces a contour plot:  % Plotting plot_2d(spin_system,−real(spectrum),parameters,20,... [0.01 0.05 0.01 0.05],2,256,6,'positive');  2D and 3D plotting functions in Spinach have a significant number of adjustable parameters that are described in the manual. </plain></SENT>
<SENT sid="249" pm="."><plain>The last argument tells the plotter to ignore negative peaks. </plain></SENT>
<SENT sid="250" pm="."><plain>If those are expected in the spectrum, the argument should be 'both'. </plain></SENT>
<SENT sid="251" pm="."><plain>The output is shown in Figure 2. </plain></SENT>
</text></p></sec></body><back><SecTag type="ACK_FUND"><ack id="mrc4660-sec-0013"><title>ACKNOWLEDGEMENTS</title><p><text4fund><text><SENT sid="252" pm="."><plain>A large number of people have contributed ideas, examples, and good advice to Spinach over the last 10 years — the current developer team is listed at the website (<ext-link ext-link-type="uri" xlink:href="http://spindynamics.org/wiki/index.php?title=Spinach_developer_team">http://spindynamics.org/wiki/index.php?title=Spinach_developer_team</ext-link>). </plain></SENT>
<SENT sid="253" pm="."><plain>The people who have specifically contributed to the functionality described in this tutorial are Luke Edwards, Hannah Hogben, Matthew Krzystyniak, Dmitry Savostyanov, and Zenawi Welderufael. </plain></SENT>
<SENT sid="254" pm="."><plain>The funding came from EPSRC (EP/F065205/1 and EP/H003789/1) and the inspiration from Marina Jay Brassington, Ayn Rand's “Atlas Shrugged” and sound tracks by Jeremy Soule. </plain></SENT>
</text></text4fund></p></ack></SecTag><SecTag type="REF"><ref-list id="mrc4660-bibl-0001" content-type="cited-references"><title>REFERENCES</title><ref id="mrc4660-bib-0001"><text><SENT sid="255" pm="."><plain>1  M. H. Levitt , Spin dynamics: Basics of nuclear magnetic resonance, Falkreath: John Wiley &amp; Sons 2001. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0002"><text><SENT sid="257" pm="."><plain>2  J. Keeler , Understanding NMR spectroscopy, Falkreath: John Wiley &amp; Sons 2011. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0003"><text><SENT sid="258" pm="."><plain>3  P. Hore ,  J. Jones ,  S. Wimperis , NMR: The toolkit: How pulse sequences work, Oxford University Press, USA 2015. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0004"><text><SENT sid="259" pm="."><plain>4  H. Hogben ,  M. Krzystyniak ,  G. Charnock ,  P. Hore ,  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="261" pm="."><plain>Reson. 2011, 208, 179.21169043 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0005"><text><SENT sid="262" pm="."><plain>5  L. J. Edwards ,  D. Savostyanov ,  Z. Welderufael ,  D. Lee ,  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="265" pm="."><plain>Reson. 2014, 243, 107.24792963 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0006"><text><SENT sid="266" pm="."><plain>6  I. Kuprov ,  N. Wagner‐Rundell ,  P. Hore , J. Magn. </plain></SENT>
<SENT sid="268" pm="."><plain>Reson. 2007, 189, 241.17936658 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0007"><text><SENT sid="269" pm="."><plain>7  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="271" pm="."><plain>Reson. 2008, 195, 45.18789735 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0008"><text><SENT sid="272" pm="."><plain>8  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="274" pm="."><plain>Reson. 2016, 270, 124.27470597 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0009"><text><SENT sid="275" pm="."><plain>9  L. Guduff ,  A.J. Allami ,  C. van Heijenoort ,  J.‐N. Dumez ,  I. Kuprov , (2017). </plain></SENT>
</text></ref><ref id="mrc4660-bib-0010"><text><SENT sid="276" pm="."><plain>10  R. S. Dumont ,  S. Jain ,  A. Bain , J. Chem. </plain></SENT>
<SENT sid="279" pm="."><plain>Phys. 1997, 106, 5928. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0011"><text><SENT sid="280" pm="."><plain>11  T. Allman ,  A. D. Bain ,  J. R. Garbow , J. Magn. </plain></SENT>
<SENT sid="284" pm="."><plain>Reson. </plain></SENT>
<SENT sid="285" pm="."><plain>A 1996, 123, 26.8980060 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0012"><text><SENT sid="286" pm="."><plain>12  P. Hodgkinson ,  L. Emsley , Prog. </plain></SENT>
<SENT sid="287" pm="."><plain>Nucl. </plain></SENT>
<SENT sid="288" pm="."><plain>Magn. </plain></SENT>
<SENT sid="289" pm="."><plain>Reson. </plain></SENT>
<SENT sid="290" pm="."><plain>Spectrosc. 2000, 36, 201. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0013"><text><SENT sid="291" pm="."><plain>13  M. Edén , Concepts Magn. </plain></SENT>
<SENT sid="292" pm="."><plain>Reson. </plain></SENT>
<SENT sid="293" pm="."><plain>Part A 2003, 17, 117. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0014"><text><SENT sid="294" pm="."><plain>14  Z. Tošner ,  R. Andersen ,  B. Stevensson ,  M. Edén ,  N. C. Nielsen ,  T. Vosegaard , J. Magn. </plain></SENT>
<SENT sid="297" pm="."><plain>Reson. 2014, 246, 79.25093693 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0015"><text><SENT sid="298" pm="."><plain>15  A. Biternas ,  G. Charnock ,  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="300" pm="."><plain>Reson. 2014, 240, 124.24530265 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0016"><text><SENT sid="301" pm="."><plain>16  M. Frisch ,  G. Trucks ,  H. Schlegel ,  G. Scuseria ,  M. Robb ,  J. Cheeseman ,  G. Scalmani ,  V. Barone ,  B. Mennucci ,  G. Petersson , GAUSSIAN09. </plain></SENT>
<SENT sid="302" pm="."><plain>Gaussian Inc., Wallingford, CT, USA, in, 2009. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0017"><text><SENT sid="303" pm="."><plain>17  F. Neese , Wiley Interdiscip. </plain></SENT>
<SENT sid="304" pm="."><plain>Rev.: Comput. </plain></SENT>
<SENT sid="305" pm="."><plain>Mol. </plain></SENT>
<SENT sid="306" pm="."><plain>Sci. 2012, 2, 73. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0018"><text><SENT sid="307" pm="."><plain>18  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="309" pm="."><plain>Reson. 2011, 209, 31.21256061 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0019"><text><SENT sid="310" pm="."><plain>19  R. K. Wangsness ,  F. Bloch , Phys. </plain></SENT>
<SENT sid="312" pm="."><plain>Rev. 1953, 89, 728. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0020"><text><SENT sid="313" pm="."><plain>20  A. G. Redfield , IBM J. Res. </plain></SENT>
<SENT sid="316" pm="."><plain>Dev. 1957, 1, 19. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0021"><text><SENT sid="317" pm="."><plain>21  M. Goldman , J. Magn. </plain></SENT>
<SENT sid="319" pm="."><plain>Reson. 2001, 149, 160.11318616 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0022"><text><SENT sid="320" pm="."><plain>22  D. Goodwin ,  I. Kuprov , J. Chem. </plain></SENT>
<SENT sid="322" pm="."><plain>Phys. 2015, 143 084113. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0023"><text><SENT sid="323" pm="."><plain>23  T. O. Levante ,  R. R. Ernst , Chem. </plain></SENT>
<SENT sid="326" pm="."><plain>Phys. </plain></SENT>
<SENT sid="327" pm="."><plain>Lett. 1995, 241, 73. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0024"><text><SENT sid="328" pm="."><plain>24  M. H. Levitt ,  L. Di Bari , Phys. </plain></SENT>
<SENT sid="330" pm="."><plain>Rev. </plain></SENT>
<SENT sid="331" pm="."><plain>Lett. 1992, 69, 3124.10046731 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0025"><text><SENT sid="332" pm="."><plain>25  A. D. Bain ,  J. S. Martin , J. Magn. </plain></SENT>
<SENT sid="336" pm="."><plain>Reson. 1969, 29(1978), 125. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0026"><text><SENT sid="337" pm="."><plain>26  H. Hogben ,  P. Hore ,  I. Kuprov , J. Chem. </plain></SENT>
<SENT sid="339" pm="."><plain>Phys. 2010, 132, 174101.20459150 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0027"><text><SENT sid="340" pm="."><plain>27  M. Krzystyniak ,  L. J. Edwards ,  I. Kuprov , J. Magn. </plain></SENT>
<SENT sid="343" pm="."><plain>Reson. 2011, 210, 228.21498096 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0028"><text><SENT sid="344" pm="."><plain>28  A. Karabanov ,  I. Kuprov ,  G. Charnock ,  A. van der Drift ,  L. J. Edwards ,  W. Köckenberger , J. Chem. </plain></SENT>
<SENT sid="347" pm="."><plain>Phys. 2011, 135, 084106. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0029"><text><SENT sid="348" pm="."><plain>29  A. Kumar ,  R. Ernst ,  K. Wüthrich , Biochem. </plain></SENT>
<SENT sid="349" pm="."><plain>Biophys. </plain></SENT>
<SENT sid="350" pm="."><plain>Res. </plain></SENT>
<SENT sid="351" pm="."><plain>Commun. 1980, 95, 1.7417242 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0030"><text><SENT sid="352" pm="."><plain>30  I. Kuprov ,  D. M. Hodgson ,  J. Kloesges ,  C. I. Pearson ,  B. Odell ,  T. D. Claridge , Angew. </plain></SENT>
<SENT sid="356" pm="."><plain>Chem. 2015, 127, 3768. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0031"><text><SENT sid="357" pm="."><plain>31  R. B. Sidje , ACM Trans. </plain></SENT>
<SENT sid="359" pm="."><plain>Math. </plain></SENT>
<SENT sid="360" pm="."><plain>Software (TOMS) 1998, 24, 130. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0032"><text><SENT sid="361" pm="."><plain>32  D. States ,  R. Haberkorn ,  D. Ruben , J. Magn. </plain></SENT>
<SENT sid="363" pm="."><plain>Reson. 1969, 48(1982), 286. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0033"><text><SENT sid="364" pm="."><plain>33  J. A. Nelder ,  R. Mead , Comput. </plain></SENT>
<SENT sid="366" pm="."><plain>J. 1965, 7, 308. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0034"><text><SENT sid="367" pm="."><plain>34  D. C. Liu ,  J. Nocedal , Math. </plain></SENT>
<SENT sid="369" pm="."><plain>Program. 1989, 45, 503. </plain></SENT>
</text></ref><ref id="mrc4660-bib-0035"><text><SENT sid="370" pm="."><plain>35  T. Vosegaard ,  N. C. Nielsen , J. Magn. </plain></SENT>
<SENT sid="373" pm="."><plain>Reson. 2009, 199, 146.19428277 </plain></SENT>
</text></ref><ref id="mrc4660-bib-0036"><text><SENT sid="374" pm="."><plain>36  R. C. </plain></SENT>
<SENT sid="376" pm="."><plain>R. Grace ,  A. Kumar , J. Magn. </plain></SENT>
<SENT sid="378" pm="."><plain>Reson. </plain></SENT>
<SENT sid="379" pm="."><plain>A 1995, 115, 87. </plain></SENT>
</text></ref></ref-list></SecTag></back></article>
