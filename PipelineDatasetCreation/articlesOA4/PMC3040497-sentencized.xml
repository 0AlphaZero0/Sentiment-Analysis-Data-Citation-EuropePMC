<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v3.0 20080202//EN" "archivearticle3.dtd"> 
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//NLM//DTD Journal Publishing DTD v2.1 20050630//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName journalpublishing.dtd?><?SourceDTD.Version 2.1?><?ConverterInfo.XSLTName jp2nlmx2.xsl?><?ConverterInfo.Version 2?><front><journal-meta><journal-id journal-id-type="nlm-ta">Bioinformation</journal-id><journal-id journal-id-type="publisher-id">Bioinformation</journal-id><journal-title-group><journal-title>Bioinformation</journal-title></journal-title-group><issn pub-type="epub">0973-2063</issn><publisher><publisher-name>Biomedical Informatics</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">3040497</article-id><article-id pub-id-type="publisher-id">004100052010</article-id><article-categories><subj-group subj-group-type="heading"><subject>Hypothesis</subject></subj-group></article-categories><title-group><article-title><SecTag type="TITLE"><text><SENT sid="0" pm="."><plain>A comparative analysis of dynamic grids vs. virtual grids using the A3pviGrid framework </plain></SENT>
</text></SecTag></article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Shankaranarayanan</surname><given-names>Avinas</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="COR1">*</xref></contrib><contrib contrib-type="author"><name><surname>Amaldas</surname><given-names>Christine</given-names></name><xref ref-type="aff" rid="A2">2</xref></contrib><aff id="A1"><label>1</label>School of Chemical and Biotechnology, Sastra University</aff><aff id="A2"><label>2</label>Business Information Systems, Royal Melbourne Institute of Technology</aff></contrib-group><author-notes><corresp id="COR1"><label>*</label>Avinas Shankaranarayanan:<email>avigrid@gmail.com</email></corresp></author-notes><pub-date pub-type="collection"><year>2010</year></pub-date><pub-date pub-type="epub"><day>01</day><month>11</month><year>2010</year></pub-date><volume>5</volume><issue>5</issue><fpage>186</fpage><lpage>190</lpage><history><date date-type="received"><day>26</day><month>7</month><year>2010</year></date><date date-type="accepted"><day>26</day><month>8</month><year>2010</year></date></history><permissions><copyright-statement>Â© 2010 Biomedical Informatics</copyright-statement><copyright-year>2010</copyright-year><license license-type="open-access"><license-p>This is an open-access article, which permits unrestricted use, distribution, and reproduction in any medium, 		for non-commercial purposes, provided the original author and source are credited.</license-p></license></permissions><abstract><p><SecTag type="ABS"><text><SENT sid="1" pm="."><plain>With the proliferation of Quad/Multi-core micro-processors in mainstream platforms such as desktops and workstations; a large number of unused CPU cycles can be utilized for running virtual machines (VMs) as dynamic nodes in distributed environments. </plain></SENT>
<SENT sid="2" pm="."><plain>Grid services and its service oriented business broker now termed cloud computing could deploy image based virtualization platforms enabling agent based resource management and dynamic fault management. </plain></SENT>
<SENT sid="3" pm="."><plain>In this paper we present an efficient way of utilizing heterogeneous virtual machines on idle desktops as an environment for consumption of high performance grid services. </plain></SENT>
<SENT sid="4" pm="."><plain>Spurious and exponential increases in the size of the datasets are constant concerns in medical and pharmaceutical industries due to the constant discovery and publication of large sequence databases. </plain></SENT>
<SENT sid="5" pm="."><plain>Traditional algorithms are not modeled at handing large data sizes under sudden and dynamic changes in the execution environment as previously discussed. </plain></SENT>
<SENT sid="6" pm="."><plain>This research was undertaken to compare our previous results with running the same test dataset with that of a virtual Grid platform using virtual machines (Virtualization). </plain></SENT>
<SENT sid="7" pm="."><plain>The implemented architecture, A3pviGrid utilizes game theoretic optimization and agent based team formation (Coalition) algorithms to improve upon scalability with respect to team formation. </plain></SENT>
<SENT sid="8" pm="."><plain>Due to the dynamic nature of distributed systems (as discussed in our previous work) all interactions were made local within a team transparently. </plain></SENT>
<SENT sid="9" pm="."><plain>This paper is a proof of concept of an experimental mini-Grid test-bed compared to running the platform on local virtual machines on a local test cluster. </plain></SENT>
<SENT sid="10" pm="."><plain>This was done to give every agent its own execution platform enabling anonymity and better control of the dynamic environmental parameters. </plain></SENT>
<SENT sid="11" pm="."><plain>We also analyze performance and scalability of Blast in a multiple virtual node setup and present our findings. </plain></SENT>
<SENT sid="12" pm="."><plain>This paper is an extension of our previous research on improving the BLAST application framework using dynamic Grids on virtualization platforms such as the virtual box. </plain></SENT>
</text></SecTag></p></abstract><SecTag type="KEYWORD"><kwd-group><kwd>Agents</kwd><kwd>Blast</kwd><kwd>Coalition</kwd><kwd>Grids</kwd><kwd>Virtual Machines and Virtualization</kwd></kwd-group></SecTag></article-meta></front><body><SecTag type="INTRO"><sec id="s1"><title><text><SENT sid="13" pm="."><plain>Background </plain></SENT>
</text></title><p><text><SENT sid="14" pm="."><plain>Bioinformatics heavily [7, 8] relies upon statistical and analytical methods of processing biological data. </plain></SENT>
<SENT sid="15" pm="."><plain>Some of the important biological research aims at studying the evolutionary effects of gene mutation and similarity between gene sequences using computer technology. </plain></SENT>
<SENT sid="16" pm="."><plain>This aids biologists to find and cure disease causing viruses by applying new and faster methods of drug discovery in the laboratory. </plain></SENT>
<SENT sid="17" pm="."><plain>Substantial discoveries of new life forms and drugs takes place on a daily basis leading to biological data being stored into remote databases (resources). </plain></SENT>
<SENT sid="18" pm="."><plain>The exponential increase in the size of datasets makes it mandatory for biologists to opt for better methods of computing genomic data. </plain></SENT>
<SENT sid="19" pm="."><plain>Biologists use different types of sequence comparison tools and software packages to speed up experimental research. </plain></SENT>
<SENT sid="20" pm="."><plain>The problem of organizing information and sharing knowledge with the scientific community at the gene level isn't being tackled by developing a nomenclature. </plain></SENT>
<SENT sid="21" pm="."><plain>Instead, computational techniques were applied to improve the organization of information in databases which lead to the era of computational biology. </plain></SENT>
<SENT sid="22" pm="."><plain>The paper is subdivided into the following sections: Section II will give an overview of current Blast Literature with insights into the distributed systems and Virtual Grids; Section III will talk about the A3pviGrid framework [4] and how it functions followed by the differences in performances between running our Blast application in our mini-grid test-bed and comparing it to running individual agents on virtual machine work spaces; in Section IV and V we conclude the paper with discussions about the results obtained followed by future enhancements to our research work. </plain></SENT>
</text></p><sec id="s1a"><title><text><SENT sid="23" pm="."><plain>About Virtual Grids and Bioinformatics Blast </plain></SENT>
</text></title><p><text><SENT sid="24" pm="."><plain>Virtual grids are described by a virtual grid resource specification that is presented by the application to acquire resources for execution. </plain></SENT>
<SENT sid="25" pm="."><plain>A virtual grid resource specification captures the desired resources for an application, and its explicit resource structure can be used by the application designer to express parallelism, communication, and other forms of optimization. </plain></SENT>
<SENT sid="26" pm="."><plain>The primary goal of grid computing platforms is to seamlessly multiplex distributed computational resources with its associated providers and end users across wide area networks [12]. </plain></SENT>
<SENT sid="27" pm="."><plain>In traditional computing environments, resources are multiplexed based on typical operating systems confined to limited resources. </plain></SENT>
<SENT sid="28" pm="."><plain>With the proliferation of Quad/Multi-core micro-processors in mainstream platforms such as desktops and workstations; a large number of unused CPU cycles can be utilized for running virtual machines as dynamic nodes in distributed environments as Grid services and its service oriented business broker now popularized as cloud computing. </plain></SENT>
<SENT sid="29" pm="."><plain>Numerous advantages such as dynamic sizing of compute nodes and resources are presented here which can be user controlled within a secured environment. </plain></SENT>
<SENT sid="30" pm="."><plain>Further the deployment of image based virtualization platforms enables resource management and dynamic fault management in a controlled manner. </plain></SENT>
<SENT sid="31" pm="."><plain>End users of high performance compute nodes always expect to meet some challenges while deploying Grid resources in the form of services. </plain></SENT>
<SENT sid="32" pm="."><plain>In this paper, we propose a new methodology for Grid computing; to use virtual machines as Virtual Grid Environments (VGE) that provides computing resources to Grid users having customized requirements originating from different platforms having varied Quality of Service (QoS) constraints. </plain></SENT>
<SENT sid="33" pm="."><plain>The ability to share resources is a basic requirement for the deployment of grids while observing the integrity and security of shared resources is of utmost importance. </plain></SENT>
<SENT sid="34" pm="."><plain>Security models need to address resource providers who enable trust or integrity mechanisms that restrict the application of grids based on mutual trust between resource providers (brokers) and users. </plain></SENT>
</text></p><p><text><SENT sid="35" pm="."><plain>Virtual machines address three fundamental requirements: support for legacy applications, security against un-trusted program execution and users, and independent resource deployment and administration. </plain></SENT>
<SENT sid="36" pm="."><plain>Virtual machines can be divided into two main categories [10]: those that virtualize complete instruction set architecture (ISA-VMs) including both user and system instructions; supports an application binary interface with virtualization of system calls [2]. </plain></SENT>
<SENT sid="37" pm="."><plain>An important class of virtual machines [11,12, 14] consists of ISA-VMs that support same-ISA execution of entire operating systems such as IBM S/390 series [18] and VMware [10], and the open-source project Virtual box [10] used in our test case. </plain></SENT>
<SENT sid="38" pm="."><plain>Virtual machines can be highly customizable without requiring system restarts. </plain></SENT>
<SENT sid="39" pm="."><plain>It is possible to specify virtual hardware parameters: memory and disk sizes; system software parameters such as operating system modules [13, 15,18] loading on demand and kernel configuration. </plain></SENT>
<SENT sid="40" pm="."><plain>We can agree that deploying virtual environments for Grid computing can bring about user enabled compute and resource customization, QoS sharing, data manipulation and easy management. </plain></SENT>
<SENT sid="41" pm="."><plain>Instead of complicating users with a Grid middleware and Virtualization Engines our existing framework A3pviGrid [4, 6] architecture was utilized for virtualization. </plain></SENT>
</text></p><p><text><SENT sid="42" pm="."><plain>Biologists often require sequence comparison and alignment applications such as Basic Local Alignment Search Tools or BLAST [9, 13],which are effectively utilized for processing large sets of gene sequences for similarity matching. </plain></SENT>
<SENT sid="43" pm="."><plain>These tools have been previously extensively investigated [4] and evaluated. </plain></SENT>
<SENT sid="44" pm="."><plain>BLAST is a set of programs used for searching sequence databases with that of the input query sequence for similarity matching. </plain></SENT>
<SENT sid="45" pm="."><plain>BLAST is a heuristic search method which makes assumptions about the data based on experience. </plain></SENT>
<SENT sid="46" pm="."><plain>This implies that it is not guaranteed to find the best alignment in all possible circumstances. </plain></SENT>
<SENT sid="47" pm="."><plain>It sacrifices some accuracy for a great increase in speed. </plain></SENT>
<SENT sid="48" pm="."><plain>The BLAST has similarities to the Smith-Waterman algorithm [15], which is slow but guaranteed to get the best possible alignments given certain input parameters. </plain></SENT>
<SENT sid="49" pm="."><plain>BLAST uses a special database format to speed up the search operation. </plain></SENT>
<SENT sid="50" pm="."><plain>Several pre-packaged databases exists, and the most notable is the ânrâ database which is the non-redundant database consisting of all sequences in GenBank. </plain></SENT>
<SENT sid="51" pm="."><plain>BLAST users can take advantage of low-cost, efficient Linux cluster architectures such as Beowulf. </plain></SENT>
<SENT sid="52" pm="."><plain>Unfortunately, the efficiency declines when scaled to hundreds of nodes because of serial result-merging and output domination [10]. </plain></SENT>
<SENT sid="53" pm="."><plain>A 300-KB query against the 5.1-GB uncompressed ântâ database takes 1346 minutes (or 22.4 hours) on one compute node. </plain></SENT>
<SENT sid="54" pm="."><plain>The same query was run within 8 minutes on 128 nodes on the Green Destiny supercomputing cluster. </plain></SENT>
<SENT sid="55" pm="."><plain>A more detailed performance analysis and evaluation can be found in the green destiny paper [5]. </plain></SENT>
<SENT sid="56" pm="."><plain>Arun Krishnan in his paper [1], talks about applying BLAST to the Globus Grid platform [17] using Perl scripts called GridBLAST on a mini-grid test bed. </plain></SENT>
<SENT sid="57" pm="."><plain>When looking at the computational aspects of BLAST [16], typically a full scale BLAST job across whole genomes is highly computationally intensive due to the size of the databases queried upon. </plain></SENT>
<SENT sid="58" pm="."><plain>The following section will briefly describe our frame work which was deployed on a virtualization platform and compared to our previous results [4]. </plain></SENT>
</text></p></sec><sec id="s1b"><title><text><SENT sid="59" pm="."><plain>Running the A3pviGrid agents on virtual machines </plain></SENT>
</text></title><p><text><SENT sid="60" pm="."><plain>The ability to invoke a program or workflow say a servlet using a web server can be effectively utilized towards distributed processing of data. </plain></SENT>
<SENT sid="61" pm="."><plain>This is termed as the âpower server modelâ of computing. </plain></SENT>
<SENT sid="62" pm="."><plain>The advantage is the simplicity of the model where the client connects to a bunch of web servers to enable the consumption of remote services using web pages.A3pviGrid works on the principle of the power server model of computing. </plain></SENT>
<SENT sid="63" pm="."><plain>Each of the clients run the A3pviGrid server which is a simplistic http web server running services in the form of CGI/Perl wrapper Scripts. </plain></SENT>
<SENT sid="64" pm="."><plain>The client side-coding model enables the developer to develop services using the common gateway interface (CGI) and can use any of the languages that support CGI scripting. </plain></SENT>
<SENT sid="65" pm="."><plain>For the sake of simplicity and rapid development of services we have used Perl as the language of choice due to its availability and portability for most platforms. </plain></SENT>
<SENT sid="66" pm="."><plain>The A3pviGrid uses a decentralized directory structure (APM) to enable peers to register and de-register peers and their respective services [4]. </plain></SENT>
</text></p><p><text><SENT sid="67" pm="."><plain>A random set of 10 machines was used for job processing. </plain></SENT>
<SENT sid="68" pm="."><plain>All the nodes ran A3pviGrid web servers. </plain></SENT>
<SENT sid="69" pm="."><plain>The Blast.apm file, a directory structure file that is local to all nodes was downloaded by all the peers as part of the initialization phase. </plain></SENT>
<SENT sid="70" pm="."><plain>This file contains information such as location information of nearby agents, domain and IP address and other important data. </plain></SENT>
<SENT sid="71" pm="."><plain>Each of the nodes compute the ideal set of nodes using a basic ping test based on the Blast grid service list. </plain></SENT>
<SENT sid="72" pm="."><plain>As all the nodes are capable of receiving jobs, one of them was randomly chosen for job execution (Originator). </plain></SENT>
<SENT sid="73" pm="."><plain>A Fasta formatted Sequence database (human DNA sequence from clone RP11-10K8 on chromosome 1) was used to evaluate the Blast searches. </plain></SENT>
<SENT sid="74" pm="."><plain>The input query file was obtained, and a set of jobs for job processing was prepared using the optimal coalition list. </plain></SENT>
<SENT sid="75" pm="."><plain>Based on QoS characteristics namely Latency, Load [3] and CPU time, the Originator of the job computes the most optimal coalition. </plain></SENT>
<SENT sid="76" pm="."><plain>Once the coalition list is computed the data files are migrated using the POST method to all the members of the coalition. </plain></SENT>
<SENT sid="77" pm="."><plain>Each of the coalition members start to search using the input query files and output the results to an output file. </plain></SENT>
</text></p><p><text><SENT sid="78" pm="."><plain>The output of the Search Phase is appended to a file using POST back to Originator where the results are formatted using the Blast format perl script and stored as a file or displayed in the browser of the originator. </plain></SENT>
<SENT sid="79" pm="."><plain>Each of the agents ran on a virtual machine test bed having their own execution environments. </plain></SENT>
<SENT sid="80" pm="."><plain>For the sake of true heterogeneous functionality and testing, four operating environments were deployed namely: Fedora Linux Core, Windows Vista Ultimate, Mac OS Leopard and Sun's Open Solaris 10. </plain></SENT>
<SENT sid="81" pm="."><plain>Each of the agents were given a resource limit which shared the following specifications: 10 GB disk space; 4 GB RAM and Dual 2 GHZ CPU Cores. </plain></SENT>
<SENT sid="82" pm="."><plain>All VM's were equally created as disk images and were run on 10 networked computers each hosting the four agents (on four core operating environments). </plain></SENT>
<SENT sid="83" pm="."><plain>The new Gigabyte IRAM modules were installed towards testing the improvements in I/O access to the data file where all VMâs were equally loaded using the Virtual Box open source virtualization software. </plain></SENT>
<SENT sid="84" pm="."><plain>To cater to a heterogeneous environment and make it truly a peer-to-peer model of computing, all nodes were connected over the Internet using DSL or Cisco routers and Cable modem lines. </plain></SENT>
</text></p><p><text><SENT sid="85" pm="."><plain>The turnaround and compute time were computed as follows: we assume N data distributed over P = 2d tasks, with N an integer multiple of the computation costs which comprise of the initial comparisons performed during the communication phase where d = log P. </plain></SENT>
<SENT sid="86" pm="."><plain>The former involves a total of P = 2d comparisons, while the latter requires at most (Nd (d+1) /2) comparisons. </plain></SENT>
<SENT sid="87" pm="."><plain>Because the algorithm is perfectly balanced, we assume that idle time is negligible. </plain></SENT>
<SENT sid="88" pm="."><plain>Our results were obtained by running Gridblast code on Linux Clusters (Fedora Core) with 2.0 GHz Duo core CPU's and 4GB RAM. </plain></SENT>
<SENT sid="89" pm="."><plain>A heterogeneous set of peers (three nodes running Linux Fedora core; four nodes running Windows Vista Ultimate, three nodes running Sun Open Solaris 10) having different configurations were used for running the algorithm as a Grid service using the A3pviGrid agents running on their VM's or individual user space. </plain></SENT>
<SENT sid="90" pm="."><plain>In this project, human DNA sequence (GenBankID: AL611946) has been used as the database of choice. </plain></SENT>
<SENT sid="91" pm="."><plain>The size of this sequence is 44,921 base pairs (bp). </plain></SENT>
</text></p></sec></sec></SecTag><SecTag type="RESULTS"><sec id="s2"><title><text><SENT sid="92" pm="."><plain>Results </plain></SENT>
</text></title><sec id="s2a"><title><text><SENT sid="93" pm="."><plain>Initial Results </plain></SENT>
</text></title><p><text><SENT sid="94" pm="."><plain>All of the A3pviGrid agents initially ran on individual workstations and the initial results were obtained with a mini-grid test-bed of 10 nodes. </plain></SENT>
<SENT sid="95" pm="."><plain>The results indicate the time of execution taken as the average value of the two experiments with the same settings and parameters in place. </plain></SENT>
<SENT sid="96" pm="."><plain>(Table 1, 2 see supplementary material) </plain></SENT>
</text></p></sec><sec id="s2b"><title><text><SENT sid="97" pm="."><plain>Results with Agents running on VM's </plain></SENT>
</text></title><p><text><SENT sid="98" pm="."><plain>The initial data set was stored and written to scratch disks created in RAM along with accessing and storing results on the iRAM installed on the head node (where the initial job was submitted).The results are shown in (Table 3, 4 see supplementary material). </plain></SENT>
<SENT sid="99" pm="."><plain>From the data recorded we can estimate that the initial turnaround time was affected due to an increase in latency posed by the VM's during initialization and data retrieval. </plain></SENT>
<SENT sid="100" pm="."><plain>As we can observe from table 3 the overall turnaround time almost increases two fold during initial execution as resources are allocated dynamically by the agents during execution. </plain></SENT>
<SENT sid="101" pm="."><plain>From table 4, the researchers observed that once the data was made available, the execution time was decreased more than half after the agent and its environment were initialized. </plain></SENT>
<SENT sid="102" pm="."><plain>A two-fold speedup can be observed based on running agents in virtual machines as the input/output data access time is cut by half as resources and data were made available locally to the agents using virtual machines. </plain></SENT>
</text></p></sec><sec id="s2c"><title><text><SENT sid="103" pm="."><plain>Conclusion and Future directions </plain></SENT>
</text></title><p><text><SENT sid="104" pm="."><plain>To improve application and agent specific performance, customized Virtual execution environments (Virtual Machines) were created for each of the agents running the A3pviGrid service. </plain></SENT>
<SENT sid="105" pm="."><plain>An increase in performance after initialization and execution of agents on the VM's was observed. </plain></SENT>
<SENT sid="106" pm="."><plain>A coalition based approach to solving a known problem in bioinformatics was undertaken. </plain></SENT>
<SENT sid="107" pm="."><plain>The use of RAM based scratch disks proved useful in improving the execution times of the BLAST searches on the Mini-Grid test bed. </plain></SENT>
<SENT sid="108" pm="."><plain>It was found that the A3pviGrid framework fairs well against embarrassingly parallel bioinformatics applications such as Blast. </plain></SENT>
<SENT sid="109" pm="."><plain>The scalability of the Mini-Grid test bed is based on numerous factors such as the resources available; the operating environments and the speedup observed after virtualization is applied. </plain></SENT>
<SENT sid="110" pm="."><plain>A query search approach was undertaken and we still need to try and apply query splitting to see how the A3pviGrid framework fairs with similar datasets. </plain></SENT>
<SENT sid="111" pm="."><plain>Future research would be towards this direction. </plain></SENT>
</text></p></sec></sec></SecTag><SecTag type="SUPPL"><sec sec-type="supplementary-material"><title><text><SENT sid="112" pm="."><plain>Supplementary material </plain></SENT>
</text></title><supplementary-material content-type="local-data" id="SD1"><caption><title><text><SENT sid="113" pm="."><plain>Data 1 </plain></SENT>
</text></title></caption><media xlink:href="97320630005186S1.pdf" xlink:type="simple" id="d32e287" position="anchor" mimetype="application" mime-subtype="pdf"/></supplementary-material></sec></SecTag></body><back><SecTag type="ACK_FUND"><ack><p><text4fund><text><SENT sid="114" pm="."><plain>This project is part of a Masters by Research dissertation at SASTRA University, Thanjavur, India. </plain></SENT>
<SENT sid="115" pm="."><plain>We would like to take this opportunity to thank Dr K.N. </plain></SENT>
<SENT sid="116" pm="."><plain>Somasekaran, Dean, Department of Chemical and Biotechnology, SASTRA University for his valuable comments and feedback. </plain></SENT>
</text></text4fund></p></ack></SecTag><fn-group><fn id="FN1" fn-type="other"><p><text><SENT sid="117" pm="."><plain>Citation:Shankaranarayanan etal; Bioinformation 5(5): 186- 190 (2010) </plain></SENT>
</text></p></fn></fn-group><SecTag type="REF"><ref-list><title>References</title><ref id="R01"><text><SENT sid="118" pm="."><plain>1KrishnanAConcurrency and Computation: Practice and Experience2005171607 </plain></SENT>
</text></ref><ref id="R02"><text><SENT sid="119" pm="."><plain>2AltschulJournal of Molecular Biology19902154032231712 </plain></SENT>
</text></ref><ref id="R03"><text><SENT sid="120" pm="."><plain>3ShankarAPDPTA20052730 </plain></SENT>
</text></ref><ref id="R04"><text><SENT sid="121" pm="."><plain>4ShankaranarayananInternational Journal of GeneticEngineering and Biotechnology2010123 </plain></SENT>
</text></ref><ref id="R05"><text><SENT sid="122" pm="."><plain>5ShankaranarayananIEEE Computer Society, CIMCAIAWTIC 0620062315 </plain></SENT>
</text></ref><ref id="R06"><text><SENT sid="123" pm="."><plain>6DarlingAClusterWorld Conference and Expo2003311 </plain></SENT>
</text></ref><ref id="R07"><text><SENT sid="124" pm="."><plain>7BurtSBMC Bioinformatics200561681190154 </plain></SENT>
</text></ref><ref id="R08"><text><SENT sid="125" pm="."><plain>8GibasCO Reilly and Associates2001 </plain></SENT>
</text></ref><ref id="R09"><text><SENT sid="126" pm="."><plain>9HigginsDGMethods Enzymol19962663838743695 </plain></SENT>
</text></ref><ref id="R10"><text><SENT sid="127" pm="."><plain>10MarshallJComput Methods Programs Biomed2009931732665129 </plain></SENT>
</text></ref><ref id="R11"><text><SENT sid="128" pm="."><plain>11FosterIThe International Journal of SupercomputerApplications and High Performance Computing1997112115 </plain></SENT>
</text></ref><ref id="R12"><text><SENT sid="129" pm="."><plain>12KonagayaABMC Bioinformatics20067(Suppl 5)S1017254294 </plain></SENT>
</text></ref><ref id="R13"><text><SENT sid="130" pm="."><plain>13BraunRFuture Generation Computer Systems2001176745 </plain></SENT>
</text></ref><ref id="R14"><text><SENT sid="131" pm="."><plain>14JosephMicroprocess Microsyst20093342812771927 </plain></SENT>
</text></ref><ref id="R15"><text><SENT sid="132" pm="."><plain>15JacobACM Trans Reconfigurable Technol Syst20081292615407 </plain></SENT>
</text></ref><ref id="R16"><text><SENT sid="133" pm="."><plain>16IsaacBMC Bioinformatics200781851896180 </plain></SENT>
</text></ref><ref id="R17"><text><SENT sid="134" pm="."><plain>17PauloBMC Bioinformatics200561971190159 </plain></SENT>
</text></ref><ref id="R18"><text><SENT sid="135" pm="."><plain>18TalukdarVBiotechnol J20094912442697647 </plain></SENT>
</text></ref></ref-list></SecTag></back><floats-group><SecTag type="FIG"><fig id="F1" position="float"><label>Figure 1</label><caption><p><text><SENT sid="136" pm="."><plain>A 3p viGrid an Experimental Grid Framework [4] </plain></SENT>
</text></p></caption><graphic xlink:href="97320630005186F1"/></fig></SecTag></floats-group></article>
